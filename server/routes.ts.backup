import express from "express";
import { z } from "zod";
import { IStorage } from "./storage";
import { generateNewsArticle } from "./ai/news-generation";

const newsGenerationSchema = z.object({
  topic: z.string().min(1, "Topic is required"),
  category: z.enum(['draft', 'trades', 'standings', 'players', 'analysis', 'league-news']),
  featured: z.boolean().default(false),
});

export function registerRoutes(app: express.Application) {
  const storage = (global as any).storage;
  // Health check endpoint
  app.get("/api/health", (req, res) => {
    res.json({ status: "ok", timestamp: new Date().toISOString() });
  });

  // Teams routes
  app.get("/api/teams", async (req, res) => {
    try {
      const teams = await storage.getTeams();
      res.json(teams);
    } catch (error) {
      console.error("Error fetching teams:", error);
      res.status(500).json({ error: "Failed to fetch teams" });
    }
  });

  app.post("/api/teams", async (req, res) => {
    try {
      const team = await storage.createTeam(req.body);
      res.json(team);
    } catch (error) {
      console.error("Error creating team:", error);
      res.status(500).json({ error: "Failed to create team" });
    }
  });

  app.put("/api/teams/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const team = await storage.updateTeam(id, req.body);
      res.json(team);
    } catch (error) {
      console.error("Error updating team:", error);
      res.status(500).json({ error: "Failed to update team" });
    }
  });

  // Players routes
  app.get("/api/players", async (req, res) => {
    try {
      const players = await storage.getPlayers();
      res.json(players);
    } catch (error) {
      console.error("Error fetching players:", error);
      res.status(500).json({ error: "Failed to fetch players" });
    }
  });

  app.post("/api/players", async (req, res) => {
    try {
      const player = await storage.createPlayer(req.body);
      res.json(player);
    } catch (error) {
      console.error("Error creating player:", error);
      res.status(500).json({ error: "Failed to create player" });
    }
  });

  app.put("/api/players/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const player = await storage.updatePlayer(id, req.body);
      res.json(player);
    } catch (error) {
      console.error("Error updating player:", error);
      res.status(500).json({ error: "Failed to update player" });
    }
  });

  app.delete("/api/players/:id", async (req, res) => {
    try {
      const { id } = req.params;
      await storage.deletePlayer(id);
      res.json({ success: true });
    } catch (error) {
      console.error("Error deleting player:", error);
      res.status(500).json({ error: "Failed to delete player" });
    }
  });

  // Games routes
  app.get("/api/games", async (req, res) => {
    try {
      const games = await storage.getGames();
      res.json(games);
    } catch (error) {
      console.error("Error fetching games:", error);
      res.status(500).json({ error: "Failed to fetch games" });
    }
  });

  app.get("/api/games/recent", async (req, res) => {
    try {
      const games = await storage.getGames();
      const recentGames = games.slice(-10);
      res.json(recentGames);
    } catch (error) {
      console.error("Error fetching recent games:", error);
      res.status(500).json({ error: "Failed to fetch recent games" });
    }
  });

  app.post("/api/games", async (req, res) => {
    try {
      const game = await storage.createGame(req.body);
      res.json(game);
    } catch (error) {
      console.error("Error creating game:", error);
      res.status(500).json({ error: "Failed to create game" });
    }
  });

  app.put("/api/games/:gameId/stats", async (req, res) => {
    try {
      const { gameId } = req.params;
      const { homeScore, awayScore, notes } = req.body;
      
      const game = await storage.updateGame(gameId, {
        homeScore,
        awayScore,
        status: 'completed'
      });
      
      res.json(game);
    } catch (error) {
      console.error("Error updating game stats:", error);
      res.status(500).json({ error: "Failed to update game stats" });
    }
  });

  // Trades routes
  app.get("/api/trades", async (req, res) => {
    try {
      const trades = await storage.getTrades();
      res.json(trades);
    } catch (error) {
      console.error("Error fetching trades:", error);
      res.status(500).json({ error: "Failed to fetch trades" });
    }
  });

  app.post("/api/trades", async (req, res) => {
    try {
      const trade = await storage.createTrade(req.body);
      res.json(trade);
    } catch (error) {
      console.error("Error creating trade:", error);
      res.status(500).json({ error: "Failed to create trade" });
    }
  });

  app.put("/api/trades/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const trade = await storage.updateTrade(id, req.body);
      res.json(trade);
    } catch (error) {
      console.error("Error updating trade:", error);
      res.status(500).json({ error: "Failed to update trade" });
    }
  });

  // Draft routes
  app.get("/api/draft/picks", async (req, res) => {
    try {
      const draftPicks = await storage.getDraftPicks();
      res.json(draftPicks);
    } catch (error) {
      console.error("Error fetching draft picks:", error);
      res.status(500).json({ error: "Failed to fetch draft picks" });
    }
  });

  app.get("/api/draft/settings", async (req, res) => {
    try {
      const settings = {
        isActive: false,
        currentRound: 1,
        currentPick: 1,
        timeRemaining: 60,
        pickOrder: []
      };
      res.json(settings);
    } catch (error) {
      console.error("Error fetching draft settings:", error);
      res.status(500).json({ error: "Failed to fetch draft settings" });
    }
  });

  app.post("/api/draft/picks", async (req, res) => {
    try {
      const draftPick = await storage.createDraftPick(req.body);
      res.json(draftPick);
    } catch (error) {
      console.error("Error creating draft pick:", error);
      res.status(500).json({ error: "Failed to create draft pick" });
    }
  });

  // Stats routes
  app.get("/api/stats", async (req, res) => {
    try {
      const teams = await storage.getTeams();
      const players = await storage.getPlayers();
      const games = await storage.getGames();
      
      const stats = {
        totalTeams: teams.length,
        totalPlayers: players.length,
        totalGames: games.length,
        activeTrades: 0,
        topScorers: players.slice(0, 10),
        recentActivity: []
      };
      
      res.json(stats);
    } catch (error) {
      console.error("Error fetching stats:", error);
      res.status(500).json({ error: "Failed to fetch stats" });
    }
  });

  // Activity routes
  app.get("/api/activity", async (req, res) => {
    try {
      const activity = await storage.getActivity();
      res.json(activity);
    } catch (error) {
      console.error("Error fetching activity:", error);
      res.status(500).json({ error: "Failed to fetch activity" });
    }
  });

  app.get("/api/activity/recent", async (req, res) => {
    try {
      const activity = await storage.getActivity();
      const recentActivity = activity.slice(-20);
      res.json(recentActivity);
    } catch (error) {
      console.error("Error fetching recent activity:", error);
      res.status(500).json({ error: "Failed to fetch recent activity" });
    }
  });

  app.post("/api/activity", async (req, res) => {
    try {
      const activityItem = await storage.logActivity(req.body);
      res.json(activityItem);
    } catch (error) {
      console.error("Error logging activity:", error);
      res.status(500).json({ error: "Failed to log activity" });
    }
  });

  // News routes
  app.get("/api/news", async (req, res) => {
    try {
      const news = await storage.getGeneratedContent();
      const newsArticles = news.filter(item => item.type === 'news');
      res.json(newsArticles);
    } catch (error) {
      console.error("Error fetching news:", error);
      res.status(500).json({ error: "Failed to fetch news" });
    }
  });

  app.post("/api/news/generate", async (req, res) => {
    try {
      const validatedData = newsGenerationSchema.parse(req.body);
      const result = await generateNewsArticle(validatedData.topic, validatedData.category);
      res.json(result);
    } catch (error) {
      console.error("News generation error:", error);
      res.status(500).json({ message: "Failed to generate news article" });
    }
  });

  // Admin routes
  app.get("/api/admin/users", async (req, res) => {
    try {
      const users = await storage.getUsers();
      res.json(users);
    } catch (error) {
      console.error("Error fetching users:", error);
      res.status(500).json({ error: "Failed to fetch users" });
    }
  });

  app.put("/api/admin/users/:id/role", async (req, res) => {
    try {
      const { id } = req.params;
      const { role } = req.body;
      const user = await storage.updateUser(id, { role });
      res.json(user);
    } catch (error) {
      console.error("Error updating user role:", error);
      res.status(500).json({ error: "Failed to update user role" });
    }
  });

  app.put("/api/admin/users/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const { roles, teamId } = req.body;
      const user = await storage.updateUser(id, { 
        role: roles?.[0] || 'player', 
        teamId: teamId || null 
      });
      res.json(user);
    } catch (error) {
      console.error("Error updating user:", error);
      res.status(500).json({ error: "Failed to update user" });
    }
  });

  app.delete("/api/admin/users/:id", async (req, res) => {
    try {
      const { id } = req.params;
      await storage.deleteUser(id);
      res.json({ success: true });
    } catch (error) {
      console.error("Error deleting user:", error);
      res.status(500).json({ error: "Failed to delete user" });
    }
  });

  // Schedule generation route
  app.post("/api/schedule/generate", async (req, res) => {
    try {
      const { startDate, endDate, days, timeSlots } = req.body;
      
      const scheduleData = {
        startDate,
        endDate, 
        days,
        timeSlots,
        gamesGenerated: days.length * timeSlots.length
      };
      
      res.json({ 
        success: true, 
        message: `Generated ${scheduleData.gamesGenerated} games`,
        data: scheduleData 
      });
    } catch (error) {
      console.error("Error generating schedule:", error);
      res.status(500).json({ error: "Failed to generate schedule" });
    }
  });

  // Awards routes
  app.get("/api/awards", async (req, res) => {
    try {
      const awards = await storage.getAwards();
      res.json(awards);
    } catch (error) {
      console.error("Error fetching awards:", error);
      res.status(500).json({ error: "Failed to fetch awards" });
    }
  });

  app.post("/api/awards/vote", async (req, res) => {
    try {
      const vote = await storage.createAward(req.body);
      res.json(vote);
    } catch (error) {
      console.error("Error creating award vote:", error);
      res.status(500).json({ error: "Failed to submit vote" });
    }
  });

  // Generated content routes
  app.get("/api/content", async (req, res) => {
    try {
      const content = await storage.getGeneratedContent();
      res.json(content);
    } catch (error) {
      console.error("Error fetching generated content:", error);
      res.status(500).json({ error: "Failed to fetch generated content" });
    }
  });

  app.post("/api/content", async (req, res) => {
    try {
      const content = await storage.saveGeneratedContent(req.body);
      res.json(content);
    } catch (error) {
      console.error("Error saving generated content:", error);
      res.status(500).json({ error: "Failed to save generated content" });
    }
  });
}