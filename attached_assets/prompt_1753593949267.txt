Hello Copilot. Please create a complete Next.js project with the following file structure and content.

The project uses Next.js, React, TypeScript, Tailwind CSS, ShadCN UI components, and Genkit for AI features.

Here is the complete file structure and content for the project:

---

**File: `.env`**
```

```

---

**File: `README.md`**
```md
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.
```

---

**File: `apphosting.yaml`**
```yaml
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1
```

---

**File: `components.json`**
```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

---

**File: `next.config.ts`**
```ts
/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

module.exports = nextConfig;
```

---

**File: `package.json`**
```json
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.14.1",
    "@genkit-ai/next": "^1.14.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "genkit": "^1.14.1",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.14.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
```

---

**File: `src/ai/dev.ts`**
```ts
'use server';
import { config } from 'dotenv';
config();

import '@/ai/flows/generate-hall-of-fame-retrospective.ts';
import '@/ai/flows/ai-powered-faq-search.ts';
import '@/ai/flows/generate-scouting-report.ts';
import '@/ai/flows/generate-news-recap.ts';
import '@/ai/flows/generate-player-headshot.ts';
import '@/ai/flows/generate-draft-commentary.ts';
import '@/ai/flows/lookup-chel-stats.ts';
```

---

**File: `src/ai/flows/ai-powered-faq-search.ts`**
```ts
'use server';
/**
 * @fileOverview An AI-powered FAQ search flow.
 *
 * - aiPoweredFaqSearch - A function that searches the FAQ using AI.
 * - AiPoweredFaqSearchInput - The input type for the aiPoweredFaqSearch function.
 * - AiPoweredFaqSearchOutput - The return type for the aiPoweredFaqSearch function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AiPoweredFaqSearchInputSchema = z.object({
  query: z.string().describe('The search query.'),
  faqContent: z.string().describe('The content of the FAQ page.'),
});
export type AiPoweredFaqSearchInput = z.infer<typeof AiPoweredFaqSearchInputSchema>;

const AiPoweredFaqSearchOutputSchema = z.object({
  answer: z.string().describe('The answer to the query based on the FAQ content.'),
});
export type AiPoweredFaqSearchOutput = z.infer<typeof AiPoweredFaqSearchOutputSchema>;

export async function aiPoweredFaqSearch(input: AiPoweredFaqSearchInput): Promise<AiPoweredFaqSearchOutput> {
  return aiPoweredFaqSearchFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiPoweredFaqSearchPrompt',
  input: {schema: AiPoweredFaqSearchInputSchema},
  output: {schema: AiPoweredFaqSearchOutputSchema},
  prompt: `You are an AI assistant that helps users find answers to their questions in the FAQ section of a website.\n  You will be provided with the content of the FAQ and a search query from the user. Your task is to find the most relevant answer in the FAQ content and return it to the user.\n  If the answer is not found in the FAQ content, return a message saying that the answer is not found.\n\n  FAQ Content:\n  {{faqContent}}\n\n  Search Query:\n  {{query}}\n\n  Answer:
  `,
});

const aiPoweredFaqSearchFlow = ai.defineFlow(
  {
    name: 'aiPoweredFaqSearchFlow',
    inputSchema: AiPoweredFaqSearchInputSchema,
    outputSchema: AiPoweredFaqSearchOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
```

---

**File: `src/ai/flows/generate-draft-commentary.ts`**
```ts
'use server';
/**
 * @fileOverview Generates AI-powered commentary for a draft pick.
 *
 * - generateDraftCommentary - A function that generates the draft commentary.
 * - GenerateDraftCommentaryInput - The input type for the generateDraftCommentary function.
 * - GenerateDraftCommentaryOutput - The return type for the generateDraftCommentary function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateDraftCommentaryInputSchema = z.object({
  player_name: z.string().describe("The name of the drafted player."),
  pick_number: z.number().describe("The pick number in the draft."),
  team_name: z.string().describe("The name of the team that drafted the player."),
});
export type GenerateDraftCommentaryInput = z.infer<typeof GenerateDraftCommentaryInputSchema>;

const GenerateDraftCommentaryOutputSchema = z.object({
  commentary: z.string().describe('A multi-paragraph analysis of the draft pick.'),
});
export type GenerateDraftCommentaryOutput = z.infer<typeof GenerateDraftCommentaryOutputSchema>;

export async function generateDraftCommentary(input: GenerateDraftCommentaryInput): Promise<GenerateDraftCommentaryOutput> {
  return generateDraftCommentaryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateDraftCommentaryPrompt',
  input: {schema: GenerateDraftCommentaryInputSchema},
  output: {schema: GenerateDraftCommentaryOutputSchema},
  prompt: `You are a draft analyst for a major sports network.

  Provide a multi-paragraph analysis of the following draft pick:

  Pick Number: {{{pick_number}}}
  Player Name: {{{player_name}}}
  Team: {{{team_name}}}

  Discuss the player's strengths, how they fit with the team, and the overall value of the pick.`,
});

const generateDraftCommentaryFlow = ai.defineFlow(
  {
    name: 'generateDraftCommentaryFlow',
    inputSchema: GenerateDraftCommentaryInputSchema,
    outputSchema: GenerateDraftCommentaryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
```

---

**File: `src/ai/flows/generate-hall-of-fame-retrospective.ts`**
```ts
'use server';
/**
 * @fileOverview Generates an AI-powered career retrospective for Hall of Fame players.
 *
 * - generateHallOfFameRetrospective - A function that generates the career retrospective.
 * - GenerateHallOfFameRetrospectiveInput - The input type for the generateHallOfFameRetrospective function.
 * - GenerateHallOfFameRetrospectiveOutput - The return type for the generateHallOfFameRetrospective function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateHallOfFameRetrospectiveInputSchema = z.object({
  playerName: z.string().describe('The name of the Hall of Fame player.'),
});
export type GenerateHallOfFameRetrospectiveInput = z.infer<typeof GenerateHallOfFameRetrospectiveInputSchema>;

const GenerateHallOfFameRetrospectiveOutputSchema = z.object({
  retrospective: z.string().describe('A multi-paragraph career retrospective for the Hall of Fame player.'),
});
export type GenerateHallOfFameRetrospectiveOutput = z.infer<typeof GenerateHallOfFameRetrospectiveOutputSchema>;

export async function generateHallOfFameRetrospective(input: GenerateHallOfFameRetrospectiveInput): Promise<GenerateHallOfFameRetrospectiveOutput> {
  return generateHallOfFameRetrospectiveFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateHallOfFameRetrospectivePrompt',
  input: {schema: GenerateHallOfFameRetrospectiveInputSchema},
  output: {schema: GenerateHallOfFameRetrospectiveOutputSchema},
  prompt: `You are a sports journalist specializing in hockey, and are writing a career retrospective for a Hall of Fame player.

  Write a multi-paragraph career retrospective for the following player:

  Player Name: {{{playerName}}}
  `,
});

const generateHallOfFameRetrospectiveFlow = ai.defineFlow(
  {
    name: 'generateHallOfFameRetrospectiveFlow',
    inputSchema: GenerateHallOfFameRetrospectiveInputSchema,
    outputSchema: GenerateHallOfFameRetrospectiveOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
```

---

**File: `src/ai/flows/generate-news-recap.ts`**
```ts
// src/ai/flows/generate-news-recap.ts
'use server';

/**
 * @fileOverview Generates weekly AI-generated news recaps for the league, a specific team, or a player.
 *
 * - generateNewsRecap - A function that generates the news recap.
 * - GenerateNewsRecapInput - The input type for the generateNewsRecap function.
 * - GenerateNewsRecapOutput - The return type for the generateNewsRecap function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateNewsRecapInputSchema = z.object({
  entityType: z.enum(['league', 'team', 'player']).describe('The type of entity to generate a news recap for.'),
  entityName: z.string().describe('The name of the league, team, or player.'),
});
export type GenerateNewsRecapInput = z.infer<typeof GenerateNewsRecapInputSchema>;

const GenerateNewsRecapOutputSchema = z.object({
  recap: z.string().describe('The generated news recap.'),
});
export type GenerateNewsRecapOutput = z.infer<typeof GenerateNewsRecapOutputSchema>;

export async function generateNewsRecap(input: GenerateNewsRecapInput): Promise<GenerateNewsRecapOutput> {
  return generateNewsRecapFlow(input);
}

const recapPrompt = ai.definePrompt({
  name: 'recapPrompt',
  input: {schema: GenerateNewsRecapInputSchema},
  output: {schema: GenerateNewsRecapOutputSchema},
  model: 'googleai/gemini-1.5-flash-latest',
  prompt: `You are an expert sports news writer. Generate a weekly news recap for the following entity:

Entity Type: {{{entityType}}}
Entity Name: {{{entityName}}}

Write a compelling and informative recap of the past week's events.`,
});

const generateNewsRecapFlow = ai.defineFlow(
  {
    name: 'generateNewsRecapFlow',
    inputSchema: GenerateNewsRecapInputSchema,
    outputSchema: GenerateNewsRecapOutputSchema,
  },
  async input => {
    const {output} = await recapPrompt(input);
    return output!;
  }
);
```

---

**File: `src/ai/flows/generate-player-headshot.ts`**
```ts
'use server';

/**
 * @fileOverview Generates a player headshot using AI.
 *
 * - generatePlayerHeadshot - A function that generates a player headshot.
 * - GeneratePlayerHeadshotInput - The input type for the generatePlayerHeadshot function.
 * - GeneratePlayerHeadshotOutput - The return type for the generatePlayerHeadshot function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePlayerHeadshotInputSchema = z.object({
  player_name: z.string().describe('The name of the player.'),
  team_name: z.string().describe('The name of the team the player is on.'),
  position: z.string().describe('The position of the player.'),
});
export type GeneratePlayerHeadshotInput = z.infer<typeof GeneratePlayerHeadshotInputSchema>;

const GeneratePlayerHeadshotOutputSchema = z.object({
  headshot_data_uri: z
    .string()
    .describe(
      "A generated headshot of the player, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type GeneratePlayerHeadshotOutput = z.infer<typeof GeneratePlayerHeadshotOutputSchema>;

export async function generatePlayerHeadshot(input: GeneratePlayerHeadshotInput): Promise<GeneratePlayerHeadshotOutput> {
  return generatePlayerHeadshotFlow(input);
}

const generatePlayerHeadshotFlow = ai.defineFlow(
  {
    name: 'generatePlayerHeadshotFlow',
    inputSchema: GeneratePlayerHeadshotInputSchema,
    outputSchema: GeneratePlayerHeadshotOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-preview-image-generation',
      prompt: `photorealistic headshot of a hockey player named ${input.player_name}, ${input.position} for the ${input.team_name}, looking at the camera`,
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    if (!media.url) {
      throw new Error('Failed to generate headshot');
    }

    return {
      headshot_data_uri: media.url,
    };
  }
);
```

---

**File: `src/ai/flows/generate-scouting-report.ts`**
```ts
// src/ai/flows/generate-scouting-report.ts
'use server';

/**
 * @fileOverview Generates a scouting report for a player given their statistics.
 *
 * - generateScoutingReport - A function that generates a scouting report for a player.
 * - GenerateScoutingReportInput - The input type for the generateScoutingReport function.
 * - GenerateScoutingReportOutput - The return type for the generateScoutingReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateScoutingReportInputSchema = z.object({
  playerName: z.string().describe('The name of the player.'),
  offenseStats: z.string().describe('The offensive statistics of the player.'),
  defenseStats: z.string().describe('The defensive statistics of the player.'),
  goalieStats: z.string().optional().describe('The goalie statistics of the player, if applicable.'),
});
export type GenerateScoutingReportInput = z.infer<typeof GenerateScoutingReportInputSchema>;

const GenerateScoutingReportOutputSchema = z.object({
  scoutingReport: z.string().describe('The AI-generated scouting report for the player.'),
});
export type GenerateScoutingReportOutput = z.infer<typeof GenerateScoutingReportOutputSchema>;

export async function generateScoutingReport(input: GenerateScoutingReportInput): Promise<GenerateScoutingReportOutput> {
  return generateScoutingReportFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateScoutingReportPrompt',
  input: {schema: GenerateScoutingReportInputSchema},
  output: {schema: GenerateScoutingReportOutputSchema},
  prompt: `You are an expert hockey scout. Generate a scouting report for the following player:

Player Name: {{{playerName}}}

Offensive Statistics: {{{offenseStats}}}

Defensive Statistics: {{{defenseStats}}}

{{#if goalieStats}}
Goalie Statistics: {{{goalieStats}}}
{{/if}}

Write a concise scouting report (approximately 3-4 paragraphs) highlighting the player's strengths and weaknesses based on the provided statistics.
`,
});

const generateScoutingReportFlow = ai.defineFlow(
  {
    name: 'generateScoutingReportFlow',
    inputSchema: GenerateScoutingReportInputSchema,
    outputSchema: GenerateScoutingReportOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
```

---

**File: `src/ai/flows/lookup-chel-stats.ts`**
```ts
'use server';
/**
 * @fileOverview A flow to look up simulated player stats for a given gamertag.
 *
 * - lookupChelStats - A function that fetches simulated stats.
 * - LookupChelStatsInput - The input type for the lookupChelStats function.
 * - LookupChelStatsOutput - The return type for the lookupChelStats function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LookupChelStatsInputSchema = z.object({
  gamertag: z.string().describe('The gamertag of the player to look up.'),
});
export type LookupChelStatsInput = z.infer<typeof LookupChelStatsInputSchema>;

const LookupChelStatsOutputSchema = z.object({
  skaterStats: z.object({
    gamesPlayed: z.number(),
    goals: z.number(),
    assists: z.number(),
    points: z.number(),
    plusMinus: z.number(),
    penaltyMinutes: z.number(),
    hits: z.number(),
    blocks: z.number(),
    sog: z.number(),
  }),
  goalieStats: z.object({
    gamesPlayed: z.number(),
    wins: z.number(),
    losses: z.number(),
    otLosses: z.number(),
    gaa: z.number(),
    svPct: z.number(),
  }),
});
export type LookupChelStatsOutput = z.infer<typeof LookupChelStatsOutputSchema>;

export async function lookupChelStats(input: LookupChelStatsInput): Promise<LookupChelStatsOutput> {
  return lookupChelStatsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'lookupChelStatsPrompt',
  input: {schema: LookupChelStatsInputSchema},
  output: {schema: LookupChelStatsOutputSchema},
  prompt: `You are an API that generates plausible hockey video game stats for a player based on their gamertag.
  Generate a comprehensive set of stats for a player with the gamertag: {{{gamertag}}}.
  Provide both skater and goalie stats, even if a player is primarily one or the other.
  Ensure the stats are realistic for a skilled player.`,
});

const lookupChelStatsFlow = ai.defineFlow(
  {
    name: 'lookupChelStatsFlow',
    inputSchema: LookupChelStatsInputSchema,
    outputSchema: LookupChelStatsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
```

---

**File: `src/ai/genkit.ts`**
```ts
import {genkit} from 'genkit';
import {googleAI as googleAIPlugin} from '@genkit-ai/googleai';

const plugins = [];

const googleAI = googleAIPlugin();
plugins.push(googleAI);

export const ai = genkit({
  plugins,
});
```

---

**File: `src/app/admin/page.tsx`**
```tsx
import AdminDashboardClient from "@/components/pages/admin-dashboard-client";

export default function AdminDashboardPage() {
    return <AdminDashboardClient />;
}
```

---

**File: `src/app/all-star-vote/page.tsx`**
```tsx
import AllStarVoteClient from "@/components/pages/all-star-vote-client";

export default function AllStarVotePage() {
    return <AllStarVoteClient />;
}
```

---

**File: `src/app/api/v1/games/[gameId]/route.ts`**
```ts
// src/app/api/v1/games/[gameId]/route.ts
import { NextResponse } from 'next/server';
import { generateMockSchedule, generateTeams, generatePlayers } from '@/lib/mock-data';
import type { PlayerStats } from '@/lib/mock-data-types';

const teams = generateTeams();
const schedule = generateMockSchedule(teams);
const players = generatePlayers(teams);

export async function GET(
  request: Request,
  { params }: { params: { gameId: string } }
) {
  try {
    const gameId = params.gameId;
    const game = schedule.find(g => g.id === gameId);

    if (!game) {
      return NextResponse.json({ message: 'Game not found' }, { status: 404 });
    }

    const homeTeam = teams.find(t => t.id === game.homeTeamId);
    const awayTeam = teams.find(t => t.id === game.awayTeamId);

    if (!homeTeam || !awayTeam) {
        return NextResponse.json({ message: 'Team data not found for game' }, { status: 500 });
    }

    const getPlayerStats = (teamId: string) => {
        return players.filter(p => p.teamId === teamId).map(p => {
            const stats = p.stats as PlayerStats;
            return {
                id: p.id,
                name: p.name,
                position: p.position,
                goals: stats.goals || 0,
                assists: stats.assists || 0,
                shots: stats.sog || 0,
                hits: stats.hits || 0,
                pim: stats.penaltyMinutes || 0
            };
        });
    }

    const standardizedGame = {
        id: game.id,
        date: game.date.toISOString(),
        status: game.status,
        home_team: {
            id: homeTeam.id,
            name: homeTeam.name,
            city: homeTeam.city,
            score: game.homeScore
        },
        away_team: {
            id: awayTeam.id,
            name: awayTeam.name,
            city: awayTeam.city,
            score: game.awayScore
        },
        box_score: {
            home_players: getPlayerStats(homeTeam.id),
            away_players: getPlayerStats(awayTeam.id)
        }
    };

    return NextResponse.json(standardizedGame);
  } catch (error) {
    console.error('Failed to fetch game details:', error);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}
```

---

**File: `src/app/api/v1/games/route.ts`**
```ts
// src/app/api/v1/games/route.ts
import { NextResponse } from 'next/server';
import { generateMockSchedule, generateTeams } from '@/lib/mock-data';

const teams = generateTeams();
const schedule = generateMockSchedule(teams);

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const dateQuery = searchParams.get('date'); // Expects YYYY-MM-DD

    let games = schedule;

    if (dateQuery) {
      const queryDate = new Date(dateQuery + 'T00:00:00Z'); // Treat date as UTC to avoid timezone issues
      games = schedule.filter(game => {
        const gameDate = new Date(game.date);
        return gameDate.getUTCFullYear() === queryDate.getUTCFullYear() &&
               gameDate.getUTCMonth() === queryDate.getUTCMonth() &&
               gameDate.getUTCDate() === queryDate.getUTCDate();
      });
    }

    const standardizedGames = games.map(game => {
        const homeTeam = teams.find(t => t.id === game.homeTeamId);
        const awayTeam = teams.find(t => t.id === game.awayTeamId);
        return {
            id: game.id,
            date: game.date.toISOString(),
            status: game.status,
            home_team: {
                id: homeTeam?.id,
                name: homeTeam?.name,
                city: homeTeam?.city,
            },
            away_team: {
                id: awayTeam?.id,
                name: awayTeam?.name,
                city: awayTeam?.city,
            },
            score: {
                home: game.homeScore,
                away: game.awayScore,
            }
        }
    });

    return NextResponse.json(standardizedGames);
  } catch (error) {
    console.error('Failed to fetch games:', error);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}
```

---

**File: `src/app/api/v1/players/[playerId]/route.ts`**
```ts
// src/app/api/v1/players/[playerId]/route.ts
import { NextResponse } from 'next/server';
import { generateTeams, generatePlayers } from '@/lib/mock-data';
import type { Player, PlayerStats, GoalieStats } from '@/lib/mock-data-types';

const teams = generateTeams();
const players = generatePlayers(teams);

export async function GET(
  request: Request,
  { params }: { params: { playerId: string } }
) {
  try {
    const playerId = params.playerId;
    const player = players.find(p => p.id === playerId);

    if (!player) {
      return NextResponse.json({ message: 'Player not found' }, { status: 404 });
    }

    const team = teams.find(t => t.id === player.teamId);

    let standardizedPlayer;
    if (player.position === 'G') {
        const stats = player.stats as GoalieStats;
        standardizedPlayer = {
            id: player.id,
            full_name: player.name,
            team_name: team?.name || 'Free Agent',
            position: player.position,
            headshot_url: player.headshotUrl,
            number: player.number,
            stats: {
                games_played: stats.gamesPlayed,
                wins: stats.wins,
                losses: stats.losses,
                ot_losses: stats.otLosses,
                save_percentage: stats.savePercentage,
                gaa: stats.goalsAgainstAverage,
                shutouts: stats.shutouts,
            }
        };
    } else {
        const stats = player.stats as PlayerStats;
        standardizedPlayer = {
            id: player.id,
            full_name: player.name,
            team_name: team?.name || 'Free Agent',
            position: player.position,
            headshot_url: player.headshotUrl,
            number: player.number,
            stats: {
                games_played: stats.gamesPlayed,
                goals: stats.goals,
                assists: stats.assists,
                points: stats.points,
                plus_minus: stats.plusMinus,
                penalty_minutes: stats.penaltyMinutes,
                hits: stats.hits,
                blocks: stats.blocks,
            }
        };
    }

    return NextResponse.json(standardizedPlayer);
  } catch (error) {
    console.error('Failed to fetch player details:', error);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}
```

---

**File: `src/app/api/v1/teams/[teamId]/players/route.ts`**
```ts
// src/app/api/v1/teams/[teamId]/players/route.ts
import { NextResponse } from 'next/server';
import { generateTeams, generatePlayers } from '@/lib/mock-data';
import type { PlayerStats } from '@/lib/mock-data-types';

const teams = generateTeams();
const players = generatePlayers(teams);

export async function GET(
  request: Request,
  { params }: { params: { teamId: string } }
) {
  try {
    const teamId = params.teamId;
    const team = teams.find(t => t.id === teamId);

    if (!team) {
      return NextResponse.json({ message: 'Team not found' }, { status: 404 });
    }
    
    const teamPlayers = players.filter(p => p.teamId === teamId);

    const standardizedPlayers = teamPlayers.map(player => {
        const stats = player.stats as PlayerStats;
        return {
            id: player.id,
            full_name: player.name,
            team_name: team.name,
            goals: stats.goals || 0,
            assists: stats.assists || 0,
            position: player.position,
            headshot_url: player.headshotUrl,
            number: player.number,
        };
    });

    return NextResponse.json(standardizedPlayers);
  } catch (error) {
    console.error('Failed to fetch players for team:', error);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}
```

---

**File: `src/app/api/v1/teams/route.ts`**
```ts
// src/app/api/v1/teams/route.ts
import { NextResponse } from 'next/server';
import { generateTeams } from '@/lib/mock-data';

const teams = generateTeams();

export async function GET() {
  try {
    const standardizedTeams = teams.map(team => ({
      id: team.id,
      name: team.name,
      city: team.city,
      logo_url: team.logoUrl,
      conference: team.conference,
      division: team.division,
      stadium: team.stadium,
    }));

    return NextResponse.json(standardizedTeams);
  } catch (error) {
    console.error('Failed to fetch teams:', error);
    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
  }
}
```

---

**File: `src/app/awards/page.tsx`**
```tsx
import AwardsClient from "@/components/pages/awards-client";

export default function AwardsPage() {
    return <AwardsClient />;
}
```

---

**File: `src/app/disclaimer/page.tsx`**
```tsx
import DisclaimerClient from "@/components/pages/disclaimer-client";

export default function DisclaimerPage() {
    return <DisclaimerClient />;
}
```

---

**File: `src/app/draft-central/page.tsx`**
```tsx
import DraftCentralClient from "@/components/pages/draft-central-client";

export default function DraftCentralPage() {
    return <DraftCentralClient />;
}
```

---

**File: `src/app/faq/page.tsx`**
```tsx
import FaqClient from "@/components/pages/faq-client";

export default function FaqPage() {
    return <FaqClient />;
}
```

---

**File: `src/app/free-agency/page.tsx`**
```tsx
import FreeAgencyClient from "@/components/pages/free-agency-client";

export default function FreeAgencyPage() {
    return <FreeAgencyClient />;
}
```

---

**File: `src/app/globals.css`**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 231 48% 48%;
    --primary-foreground: 355.7 100% 97.3%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 291 64% 42%;
    --accent-foreground: 355.7 100% 97.3%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 355.7 100% 97.3%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 200 15% 18%;
    --foreground: 0 0% 98%;
    --card: 200 15% 22%;
    --card-foreground: 0 0% 98%;
    --popover: 200 15% 12%;
    --popover-foreground: 0 0% 98%;
    --primary: 231 48% 48%;
    --primary-foreground: 0 0% 100%;
    --secondary: 200 15% 24%;
    --secondary-foreground: 0 0% 98%;
    --muted: 200 15% 24%;
    --muted-foreground: 200 10% 60%;
    --accent: 291 64% 52%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 72.2% 50.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 200 15% 30%;
    --input: 200 15% 30%;
    --ring: 231 48% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

---

**File: `src/app/hall-of-fame/page.tsx`**
```tsx
import HallOfFameClient from "@/components/pages/hall-of-fame-client";

export default function HallOfFamePage() {
    return <HallOfFameClient />;
}
```

---

**File: `src/app/layout.tsx`**
```tsx
import type { Metadata } from 'next';
import './globals.css';
import { AuthProvider } from '@/hooks/use-auth';
import { Header } from '@/components/layout/header';
import { Footer } from '@/components/layout/footer';
import { Toaster } from '@/components/ui/toaster';
import { cn } from '@/lib/utils';

export const metadata: Metadata = {
  title: 'MVHL Hub',
  description: 'The central portal for the MVHL hockey league.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Source+Code+Pro&family=Space+Grotesk:wght@700&display=swap" rel="stylesheet" />
      </head>
      <body className={cn("font-body antialiased min-h-screen flex flex-col")}>
        <AuthProvider>
          <Header />
          <main className="flex-grow">{children}</main>
          <Footer />
          <Toaster />
        </AuthProvider>
      </body>
    </html>
  );
}
```

---

**File: `src/app/management/page.tsx`**
```tsx
import ManagementDashboardClient from "@/components/pages/management-dashboard-client";

export default function ManagementDashboardPage() {
    return <ManagementDashboardClient />;
}
```

---

**File: `src/app/matches/page.tsx`**
```tsx
import MatchesClient from "@/components/pages/matches-client";

export default function MatchesPage() {
    return <MatchesClient />;
}
```

---

**File: `src/app/news/page.tsx`**
```tsx
import NewsClient from "@/components/pages/news-client";

export default function NewsPage() {
    return <NewsClient />;
}
```

---

**File: `src/app/page.tsx`**
```tsx
import HomePageClient from "@/components/pages/home-client";

export default function Home() {
  return <HomePageClient />;
}
```

---

**File: `src/app/player/page.tsx`**
```tsx
import PlayerDashboardClient from "@/components/pages/player-dashboard-client";

export default function PlayerDashboardPage() {
    return <PlayerDashboardClient />;
}
```

---

**File: `src/app/privacy/page.tsx`**
```tsx
import PrivacyPolicyClient from "@/components/pages/privacy-client";

export default function PrivacyPolicyPage() {
    return <PrivacyPolicyClient />;
}
```

---

**File: `src/app/signup/page.tsx`**
```tsx
import SignUpClient from "@/components/pages/signup-client";

export default function SignUpPage() {
    return <SignUpClient />;
}
```

---

**File: `src/app/standings/page.tsx`**
```tsx
import StandingsClient from "@/components/pages/standings-client";

export default function StandingsPage() {
    return <StandingsClient />;
}
```

---

**File: `src/app/stats/page.tsx`**
```tsx
import StatsClient from "@/components/pages/stats-client";

export default function StatsPage() {
    return <StatsClient />;
}
```

---

**File: `src/app/teams/page.tsx`**
```tsx
import TeamsClient from "@/components/pages/teams-client";

export default function TeamsPage() {
    return <TeamsClient />;
}
```

---

**File: `src/app/transactions/page.tsx`**
```tsx
import TransactionsClient from "@/components/pages/transactions-client";

export default function TransactionsPage() {
    return <TransactionsClient />;
}
```

---

**File: `src/components/layout/footer.tsx`**
```tsx
"use client";

import Link from "next/link";
import { SiteLogo } from "@/components/site-logo";
import { FOOTER_LINKS } from "@/lib/constants";
import { Button } from "../ui/button";
import { useAuth } from "@/hooks/use-auth";

export function Footer() {
  const { login } = useAuth();
  
  const handleAccountLinkClick = (e: React.MouseEvent<HTMLAnchorElement>, link: {href: string, label: string}) => {
    if (link.label === 'Sign In') {
      e.preventDefault();
      login('management'); // Default login for example
    }
    // For other links like "Sign Up", we let the default Link behavior handle it.
  };

  return (
    <footer className="bg-card text-card-foreground border-t">
      <div className="container mx-auto max-w-screen-2xl px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8 py-16">
          <div className="col-span-2 lg:col-span-1">
            <SiteLogo />
            <p className="mt-4 text-muted-foreground text-sm">
              The official hub for the MOCK Virtual Hockey League. Stats, news, and community for the world's premier virtual ice hockey simulation.
            </p>
          </div>

          <div>
            <h3 className="font-headline text-lg font-semibold">League</h3>
            <ul className="mt-4 space-y-2">
              {FOOTER_LINKS.league.map((link) => (
                <li key={`${link.href}-${link.label}`}>
                  <Link href={link.href} className="text-sm text-muted-foreground hover:text-primary">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>
          
          <div>
            <h3 className="font-headline text-lg font-semibold">Community</h3>
            <ul className="mt-4 space-y-2">
              {FOOTER_LINKS.community.map((link) => (
                <li key={`${link.href}-${link.label}`}>
                  <Link href={link.href} className="text-sm text-muted-foreground hover:text-primary">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          <div>
            <h3 className="font-headline text-lg font-semibold">Resources</h3>
            <ul className="mt-4 space-y-2">
              {FOOTER_LINKS.resources.map((link) => (
                <li key={`${link.href}-${link.label}`}>
                  <Link href={link.href} className="text-sm text-muted-foreground hover:text-primary">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          <div>
            <h3 className="font-headline text-lg font-semibold">Account</h3>
            <ul className="mt-4 space-y-2">
              {FOOTER_LINKS.account.map((link) => (
                <li key={`${link.href}-${link.label}`}>
                  <Link href={link.href} onClick={(e) => handleAccountLinkClick(e, link)} className="text-sm text-muted-foreground hover:text-primary">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

        </div>
        <div className="border-t py-6 text-center text-sm text-muted-foreground">
          <p>&copy; {new Date().getFullYear()} MVHL Hub. All Rights Reserved. This is a fictional entity for demonstration purposes.</p>
        </div>
      </div>
    </footer>
  );
}
```

---

**File: `src/components/layout/header.tsx`**
```tsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { Menu } from "lucide-react";
import React from 'react';

import { useAuth } from "@/hooks/use-auth";
import { cn } from "@/lib/utils";
import { NAV_LINKS } from "@/lib/constants";
import { SiteLogo } from "@/components/site-logo";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Skeleton } from "../ui/skeleton";

export function Header() {
  const { user, login, logout } = useAuth();
  const pathname = usePathname();
  const [isClient, setIsClient] = React.useState(false);

  React.useEffect(() => {
    setIsClient(true);
  }, []);

  const getInitials = (name: string) => {
    const names = name.split(' ');
    return names.map((n) => n[0]).join('').toUpperCase();
  };
  
  const UserMenu = () => {
    if (!isClient) {
        return <Skeleton className="h-10 w-20" />;
    }

    if (!user) {
        return (
          <div className="flex items-center gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button>Login</Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56" align="end" forceMount>
                <DropdownMenuLabel>Select a Role</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => login('player')}>
                  Login as Player
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => login('management')}>
                  Login as Management
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => login('admin')}>
                  Login as Admin
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
            <Button asChild variant="outline">
              <Link href="/signup">Sign Up</Link>
            </Button>
          </div>
        );
    }
    
    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="relative h-10 w-10 rounded-full">
                    <Avatar className="h-10 w-10">
                        <AvatarImage src={user.avatarUrl} alt={user.name} />
                        <AvatarFallback>{getInitials(user.name)}</AvatarFallback>
                    </Avatar>
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
                <DropdownMenuLabel className="font-normal">
                    <div className="flex flex-col space-y-1">
                        <p className="text-sm font-medium leading-none">{user.name}</p>
                        <p className="text-xs leading-none text-muted-foreground">{user.email}</p>
                    </div>
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                {user.role === 'player' && <DropdownMenuItem asChild><Link href="/player">Player Dashboard</Link></DropdownMenuItem>}
                {user.role === 'management' && <DropdownMenuItem asChild><Link href="/management">Management Dashboard</Link></DropdownMenuItem>}
                {user.role === 'admin' && <DropdownMenuItem asChild><Link href="/admin">Admin Dashboard</Link></DropdownMenuItem>}
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => logout()}>
                    Logout
                </DropdownMenuItem>
            </DropdownMenuContent>
        </DropdownMenu>
    );
  }

  return (
    <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 max-w-screen-2xl items-center">
        <SiteLogo />
        <nav className="hidden md:flex items-center gap-4 lg:gap-6 mx-auto overflow-x-auto">
          {NAV_LINKS.map((link) => (
            <Link
              key={link.href}
              href={link.href}
              className={cn(
                "text-sm font-medium transition-colors hover:text-primary whitespace-nowrap",
                pathname === link.href ? "text-primary" : "text-muted-foreground"
              )}
            >
              {link.label}
            </Link>
          ))}
        </nav>

        <div className="flex flex-1 items-center justify-end space-x-4">
            <UserMenu/>
            <Sheet>
                <SheetTrigger asChild>
                    <Button variant="ghost" size="icon" className="md:hidden">
                        <Menu className="h-6 w-6" />
                        <span className="sr-only">Toggle Menu</span>
                    </Button>
                </SheetTrigger>
                <SheetContent side="right" className="w-[300px] sm:w-[400px]">
                    <nav className="flex flex-col gap-4 mt-8">
                        {NAV_LINKS.map((link) => (
                            <Link
                                key={link.href}
                                href={link.href}
                                className={cn(
                                "text-lg font-medium transition-colors hover:text-primary",
                                pathname === link.href ? "text-primary" : "text-muted-foreground"
                                )}
                            >
                                {link.label}
                            </Link>
                        ))}
                    </nav>
                </SheetContent>
            </Sheet>
        </div>
      </div>
    </header>
  );
}
```

---

**File: `src/components/loader.tsx`**
```tsx
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface LoaderProps {
  className?: string;
  text?: string;
}

export default function Loader({ className, text }: LoaderProps) {
  return (
    <div className={cn("flex flex-col items-center justify-center gap-4 py-20", className)}>
      <Loader2 className="h-12 w-12 animate-spin text-primary" />
      {text && <p className="text-muted-foreground">{text}</p>}
    </div>
  );
}
```

---

**File: `src/components/pages/admin-dashboard-client.tsx`**
```tsx


'use client';

import { useAuth } from '@/hooks/use-auth';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Shield, Users, Calendar, BarChart2, ImageIcon, Newspaper, Image as ImageIconLucide, Gavel, Play, Pause, SkipForward, StopCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '../ui/textarea';
import { Checkbox } from '../ui/checkbox';
import React from 'react';
import { Progress } from '../ui/progress';
import { mockDraftOrder } from '@/lib/mock-data';
import Image from 'next/image';

const UserManagementTab = () => {
    const { toast } = useToast();
    
    const handleSaveUser = (e: React.FormEvent) => {
        e.preventDefault();
        toast({ title: "User Saved", description: "User roles and team assignments have been updated." });
    }

    return (
        <Card>
            <CardHeader>
                <CardTitle>User Management</CardTitle>
                <CardDescription>Assign roles and teams to registered users.</CardDescription>
            </CardHeader>
            <CardContent>
                <form onSubmit={handleSaveUser} className="space-y-6">
                    <div className="space-y-2">
                        <Label htmlFor="user-select">Select User</Label>
                        <Select>
                            <SelectTrigger id="user-select"><SelectValue placeholder="Select a user..." /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="user-1">player@mvhthub.com</SelectItem>
                                <SelectItem value="user-2">gm@mvhthub.com</SelectItem>
                                <SelectItem value="user-3">admin@mvhthub.com</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                     <div className="space-y-4">
                        <Label>Assign Roles</Label>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div className="flex items-center space-x-2"><Checkbox id="role-player" /><Label htmlFor="role-player">Player</Label></div>
                            <div className="flex items-center space-x-2"><Checkbox id="role-agm" /><Label htmlFor="role-agm">AGM</Label></div>
                            <div className="flex items-center space-x-2"><Checkbox id="role-gm" /><Label htmlFor="role-gm">GM</Label></div>
                            <div className="flex items-center space-x-2"><Checkbox id="role-owner" /><Label htmlFor="role-owner">Owner</Label></div>
                            <div className="flex items-center space-x-2"><Checkbox id="role-admin" /><Label htmlFor="role-admin">Admin</Label></div>
                        </div>
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="team-select">Assign Team</Label>
                        <Select>
                            <SelectTrigger id="team-select"><SelectValue placeholder="Select a team..." /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="team-1">New York Rangers</SelectItem>
                                <SelectItem value="team-2">Toronto Maple Leafs</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                    <Button type="submit">Save User</Button>
                </form>
            </CardContent>
        </Card>
    );
}

const TeamManagementTab = () => {
    const { toast } = useToast();
    const { teams, addTeam } = useAuth();
    const [selectedTeam, setSelectedTeam] = React.useState('new');
    const [city, setCity] = React.useState('');
    const [name, setName] = React.useState('');

    const handleSaveTeam = (e: React.FormEvent) => {
        e.preventDefault();
        if (selectedTeam === 'new') {
            if (!city || !name) {
                toast({ title: "Missing Information", description: "City and Name are required to create a new team.", variant: "destructive" });
                return;
            }
            addTeam({ city, name });
            toast({ title: "Team Created", description: `The ${city} ${name} have been added to the league.` });
            setCity('');
            setName('');
        } else {
            // Edit logic would go here
            toast({ title: "Team Saved", description: "Team details have been updated." });
        }
    }

     const handleDeleteTeam = () => {
        toast({ title: "Team Deleted", description: "Team has been removed from the league.", variant: "destructive" });
    }

    return (
         <Card>
            <CardHeader>
                <CardTitle>Team Management</CardTitle>
                <CardDescription>Create, edit, or delete league teams.</CardDescription>
            </CardHeader>
            <CardContent>
                 <form onSubmit={handleSaveTeam} className="space-y-6">
                    <div className="space-y-2">
                        <Label htmlFor="team-select-edit">Select Team (or create new)</Label>
                        <Select value={selectedTeam} onValueChange={setSelectedTeam}>
                            <SelectTrigger id="team-select-edit"><SelectValue placeholder="Select a team to edit..." /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="new">-- Create New Team --</SelectItem>
                                {teams.map(team => (
                                    <SelectItem key={team.id} value={team.id}>{team.city} {team.name}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <Label htmlFor="team-city">City</Label>
                            <Input id="team-city" placeholder="e.g., Boston" value={city} onChange={(e) => setCity(e.target.value)} />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="team-name">Name</Label>
                            <Input id="team-name" placeholder="e.g., Bruins" value={name} onChange={(e) => setName(e.target.value)}/>
                        </div>
                    </div>
                    <div className="flex gap-4">
                        <Button type="submit">Save Team</Button>
                        <Button type="button" variant="destructive" onClick={handleDeleteTeam} disabled={selectedTeam === 'new'}>Delete Team</Button>
                    </div>
                 </form>
            </CardContent>
        </Card>
    )
}

const ScheduleManagementTab = () => {
    const { toast } = useToast();
    const { teams, addMatch } = useAuth();
    
    // Single Game State
    const [homeTeamId, setHomeTeamId] = React.useState('');
    const [awayTeamId, setAwayTeamId] = React.useState('');
    const [date, setDate] = React.useState('');
    const [time, setTime] = React.useState('');
    
    // Mass Generate State
    const [massStartDate, setMassStartDate] = React.useState('');
    const [massEndDate, setMassEndDate] = React.useState('');
    const [massTime1, setMassTime1] = React.useState('');
    const [massTime2, setMassTime2] = React.useState('');
    const [massTime3, setMassTime3] = React.useState('');
    const [massDays, setMassDays] = React.useState<Record<string, boolean>>({});

    // Playoff Series State
    const [playoffTeam1, setPlayoffTeam1] = React.useState('');
    const [playoffTeam2, setPlayoffTeam2] = React.useState('');
    const [playoffStartDate, setPlayoffStartDate] = React.useState('');
    const [playoffTime, setPlayoffTime] = React.useState('');

    const handleCreateGame = (e: React.FormEvent) => {
        e.preventDefault();
        if(!homeTeamId || !awayTeamId || !date || !time) {
            toast({ title: "Missing Information", description: "All fields are required to create a game.", variant: "destructive" });
            return;
        }

        const [year, month, day] = date.split('-').map(Number);
        const [hours, minutes] = time.split(':').map(Number);
        const gameDate = new Date(year, month - 1, day, hours, minutes);

        addMatch({ homeTeamId, awayTeamId, date: gameDate });
        toast({ title: "Game Created", description: "The game has been added to the schedule." });
        setHomeTeamId('');
        setAwayTeamId('');
        setDate('');
        setTime('');
    };
    
    const handleMassGenerate = (e: React.FormEvent) => {
        e.preventDefault();
         const selectedDays = Object.entries(massDays).filter(([, checked]) => checked).map(([day]) => day);
        if (!massStartDate || !massEndDate || selectedDays.length === 0) {
            toast({ title: "Missing Information", description: "Start date, end date, and at least one day of the week are required.", variant: "destructive" });
            return;
        }
        toast({ title: "Schedule Action", description: `Simulating schedule generation for ${selectedDays.join(', ')} between ${massStartDate} and ${massEndDate}. Added 3 sample games.` });
        
        // Mock implementation: add a few games
        for (let i = 0; i < 3; i++) {
            const homeTeam = teams[i % teams.length];
            const awayTeam = teams[(i + 3) % teams.length];
            if (homeTeam && awayTeam) {
                 addMatch({ homeTeamId: homeTeam.id, awayTeamId: awayTeam.id, date: new Date() });
            }
        }
    }
    
    const handleCreatePlayoffs = (e: React.FormEvent) => {
        e.preventDefault();
        if(!playoffTeam1 || !playoffTeam2) {
            toast({ title: "Missing Information", description: "Please select two teams for the series.", variant: "destructive" });
            return;
        }
        toast({ title: "Schedule Action", description: `Playoff series created between selected teams.` });
        addMatch({ homeTeamId: playoffTeam1, awayTeamId: playoffTeam2, date: new Date() });
    }
    
    const handleDayChange = (day: string, checked: boolean) => {
        setMassDays(prev => ({...prev, [day]: checked}));
    }

    const weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

    return (
        <div className="space-y-6">
            <Card>
                <CardHeader><CardTitle>Mass Generate</CardTitle></CardHeader>
                <CardContent>
                    <form onSubmit={handleMassGenerate} className="space-y-4">
                         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-2"><Label>Start Date</Label><Input type="date" value={massStartDate} onChange={e => setMassStartDate(e.target.value)}/></div>
                            <div className="space-y-2"><Label>End Date</Label><Input type="date" value={massEndDate} onChange={e => setMassEndDate(e.target.value)}/></div>
                        </div>
                        <div className="space-y-2">
                             <Label>Game Days</Label>
                             <div className="grid grid-cols-3 sm:grid-cols-4 lg:grid-cols-7 gap-4">
                                {weekDays.map(day => (
                                    <div key={day} className="flex items-center space-x-2">
                                        <Checkbox id={`day-${day}`} onCheckedChange={(checked) => handleDayChange(day, !!checked)} />
                                        <Label htmlFor={`day-${day}`}>{day}</Label>
                                    </div>
                                ))}
                             </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="space-y-2"><Label>Time Slot 1</Label><Input type="time" value={massTime1} onChange={e => setMassTime1(e.target.value)}/></div>
                            <div className="space-y-2"><Label>Time Slot 2</Label><Input type="time" value={massTime2} onChange={e => setMassTime2(e.target.value)}/></div>
                            <div className="space-y-2"><Label>Time Slot 3</Label><Input type="time" value={massTime3} onChange={e => setMassTime3(e.target.value)}/></div>
                        </div>
                        <Button type="submit">Generate Schedule</Button>
                    </form>
                </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle>Create Playoff Series</CardTitle></CardHeader>
                <CardContent>
                    <form onSubmit={handleCreatePlayoffs} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                             <div className="space-y-2">
                                <Label>Team 1</Label>
                                <Select value={playoffTeam1} onValueChange={setPlayoffTeam1}>
                                    <SelectTrigger><SelectValue placeholder="Select..."/></SelectTrigger>
                                    <SelectContent>
                                        {teams.map(team => <SelectItem key={team.id} value={team.id}>{team.city} {team.name}</SelectItem>)}
                                    </SelectContent>
                                </Select>
                            </div>
                             <div className="space-y-2">
                                <Label>Team 2</Label>
                                 <Select value={playoffTeam2} onValueChange={setPlayoffTeam2}>
                                    <SelectTrigger><SelectValue placeholder="Select..."/></SelectTrigger>
                                    <SelectContent>
                                        {teams.map(team => <SelectItem key={team.id} value={team.id}>{team.city} {team.name}</SelectItem>)}
                                    </SelectContent>
                                </Select>
                            </div>
                             <div className="space-y-2"><Label>Start Date</Label><Input type="date" value={playoffStartDate} onChange={e => setPlayoffStartDate(e.target.value)}/></div>
                             <div className="space-y-2"><Label>Time</Label><Input type="time" value={playoffTime} onChange={e => setPlayoffTime(e.target.value)}/></div>
                        </div>
                        <Button type="submit">Create Playoff Series</Button>
                    </form>
                </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle>Single Game</CardTitle></CardHeader>
                <CardContent>
                    <form onSubmit={handleCreateGame} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                             <div className="space-y-2">
                                <Label>Home Team</Label>
                                <Select value={homeTeamId} onValueChange={setHomeTeamId}>
                                    <SelectTrigger><SelectValue placeholder="Select..."/></SelectTrigger>
                                    <SelectContent>
                                        {teams.map(team => <SelectItem key={team.id} value={team.id}>{team.city} {team.name}</SelectItem>)}
                                    </SelectContent>
                                </Select>
                            </div>
                             <div className="space-y-2">
                                <Label>Away Team</Label>
                                <Select value={awayTeamId} onValueChange={setAwayTeamId}>
                                    <SelectTrigger><SelectValue placeholder="Select..."/></SelectTrigger>
                                    <SelectContent>
                                        {teams.map(team => <SelectItem key={team.id} value={team.id}>{team.city} {team.name}</SelectItem>)}
                                    </SelectContent>
                                </Select>
                            </div>
                             <div className="space-y-2"><Label>Date</Label><Input type="date" value={date} onChange={e => setDate(e.target.value)} /></div>
                             <div className="space-y-2"><Label>Time</Label><Input type="time" value={time} onChange={e => setTime(e.target.value)} /></div>
                        </div>
                         <Button type="submit">Create Game</Button>
                    </form>
                </CardContent>
            </Card>
        </div>
    )
}

const EditGameStatsTab = () => {
    const { toast } = useToast();
    const handleSaveStats = (e: React.FormEvent) => {
        e.preventDefault();
        toast({ title: "Game Stats Saved", description: "The game stats have been updated." });
    }
    return (
        <Card>
            <CardHeader>
                <CardTitle>Edit Game Stats</CardTitle>
                <CardDescription>Manually enter or override statistics for a completed game.</CardDescription>
            </CardHeader>
            <CardContent>
                <form onSubmit={handleSaveStats} className="space-y-6">
                    <div className="space-y-2">
                        <Label htmlFor="game-select">Select Game</Label>
                        <Select>
                            <SelectTrigger id="game-select"><SelectValue placeholder="Select a completed game..." /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="game-1">New York Rangers vs. Toronto Maple Leafs (Yesterday)</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="grid grid-cols-2 gap-8">
                        <div className="space-y-2">
                            <Label htmlFor="home-score">Home Score</Label>
                            <Input id="home-score" type="number" />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="away-score">Away Score</Label>
                            <Input id="away-score" type="number" />
                        </div>
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="game-notes">Game Notes / Summary</Label>
                        <Textarea id="game-notes" placeholder="e.g., Overtime winner by Player X..." />
                    </div>
                    <Button type="submit">Save Game Stats</Button>
                </form>
            </CardContent>
        </Card>
    )
}

const ImageUploadRow = ({
  label,
  description,
  inputId,
}: {
  label: string;
  description: string;
  inputId: string;
}) => {
  const { toast } = useToast();
  const [fileName, setFileName] = React.useState('');

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setFileName(e.target.files[0].name);
    }
  };

  const handleSave = () => {
    if (!fileName) return;
    toast({
      title: 'Image "Uploaded"',
      description: `${fileName} has been saved for ${label}. (This is a simulation)`,
    });
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 items-center gap-4 border-b pb-4">
      <div className="md:col-span-1">
        <h4 className="font-semibold">{label}</h4>
        <p className="text-sm text-muted-foreground">{description}</p>
      </div>
      <div className="md:col-span-2 flex items-center gap-4">
        <Label htmlFor={inputId} className="cursor-pointer">
            <Button asChild variant="outline">
                <span><ImageIconLucide className="mr-2 h-4 w-4" /> Choose File</span>
            </Button>
        </Label>
        <Input
          id={inputId}
          type="file"
          className="hidden"
          onChange={handleFileChange}
        />

        {fileName ? (
          <>
            <span className="text-sm text-muted-foreground flex-1 truncate">
              {fileName}
            </span>
            <Button onClick={handleSave}>Save</Button>
          </>
        ) : (
          <span className="text-sm text-muted-foreground flex-1">
            No file chosen
          </span>
        )}
      </div>
    </div>
  );
};


const ImageManagementTab = () => {
    const { teams, players } = useAuth();
    return (
        <Card>
            <CardHeader>
                <CardTitle>Image Management</CardTitle>
                <CardDescription>Update or regenerate key images used across the website. Changes are saved locally for your session.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-8">
                <ImageUploadRow
                    inputId="hero-upload"
                    label="Home Page Hero"
                    description="The main banner image displayed at the top of the home page."
                />
                 <div className="grid grid-cols-1 md:grid-cols-3 items-start gap-4 border-b pb-4">
                    <div className="md:col-span-1">
                        <h4 className="font-semibold">Team Logos</h4>
                        <p className="text-sm text-muted-foreground">Update the logo for a specific team.</p>
                    </div>
                    <div className="md:col-span-2 space-y-4">
                         <Select>
                            <SelectTrigger><SelectValue placeholder="Select a team..." /></SelectTrigger>
                            <SelectContent>
                                {teams.map(t => <SelectItem key={t.id} value={t.id}>{t.city} {t.name}</SelectItem>)}
                            </SelectContent>
                        </Select>
                         <ImageUploadRow
                            inputId="team-logo-upload"
                            label="Team Logo"
                            description=""
                        />
                    </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 items-start gap-4 border-b pb-4">
                    <div className="md:col-span-1">
                        <h4 className="font-semibold">Player Headshots</h4>
                        <p className="text-sm text-muted-foreground">Upload a new headshot for a player.</p>
                    </div>
                     <div className="md:col-span-2 space-y-4">
                        <Select>
                            <SelectTrigger><SelectValue placeholder="Select a player..." /></SelectTrigger>
                             <SelectContent>
                                {players.map(p => <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>)}
                            </SelectContent>
                        </Select>
                         <ImageUploadRow
                            inputId="player-headshot-upload"
                            label="Player Headshot"
                            description=""
                        />
                    </div>
                </div>
                
                <ImageUploadRow
                    inputId="site-logo-upload"
                    label="Site Logo"
                    description="The main site logo used in the header and footer."
                />

            </CardContent>
        </Card>
    );
}

const NewsGeneratorTab = () => {
    const { toast } = useToast();
    const handleGenerateNews = (e: React.FormEvent) => {
        e.preventDefault();
        toast({ title: "News Recap Generated", description: "The recap has been created." });
    }
    return (
        <Card>
            <CardHeader>
                <CardTitle>News Generator</CardTitle>
                <CardDescription>Provide details and select the type of recap to generate.</CardDescription>
            </CardHeader>
            <CardContent>
                <form onSubmit={handleGenerateNews} className="space-y-6">
                    <div className="space-y-2">
                        <Label>Recap Type</Label>
                        <Select defaultValue="daily">
                            <SelectTrigger><SelectValue /></SelectTrigger>
                            <SelectContent>
                                <SelectItem value="daily">Daily</SelectItem>
                                <SelectItem value="weekly">Weekly</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                    <div className="space-y-2">
                        <Label>Recap Details</Label>
                        <Textarea placeholder="Optionally provide key players, teams, or events to focus on..." />
                    </div>
                    <Button type="submit">Generate Recap</Button>
                </form>
                 <div className="mt-6 space-y-4">
                    <Label className="text-lg font-medium">Generated Recap</Label>
                    <Card className="bg-muted p-4">
                        <CardContent className="p-0">
                            <p className="text-sm text-muted-foreground">The AI-generated daily news recap will appear here.</p>
                        </CardContent>
                    </Card>
                </div>
            </CardContent>
        </Card>
    )
}

const DraftManagementTab = () => {
    const { toast } = useToast();
    const { draftStatus, setDraftStatus, currentPick, setCurrentPick, findTeam } = useAuth();
    const [time, setTime] = React.useState(300); // 5 minutes in seconds
    const timerRef = React.useRef<NodeJS.Timeout>();

    const handleNextPick = React.useCallback(() => {
        setCurrentPick(p => p + 1);
        setTime(300);
    }, [setCurrentPick]);

    // This effect runs the timer.
    React.useEffect(() => {
        if (draftStatus === 'In Progress' && time > 0) {
            timerRef.current = setTimeout(() => setTime(t => t - 1), 1000);
        } else if (time === 0 && draftStatus === 'In Progress') {
            handleNextPick();
        }
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        };
    }, [time, draftStatus, handleNextPick]);

    // This effect shows a toast when the pick changes.
    React.useEffect(() => {
        if (currentPick > 1) {
            toast({ title: "Next Pick", description: `The draft has moved to pick #${currentPick}.` });
        }
    }, [currentPick, toast]);

    const handleStart = () => {
        setDraftStatus('In Progress');
        setTime(300);
        toast({ title: "Draft Started", description: "The draft is now live." });
    }

    const handlePause = () => {
        setDraftStatus(prevStatus => {
            const newStatus = prevStatus === 'Paused' ? 'In Progress' : 'Paused';
            toast({ title: `Draft ${newStatus === 'In Progress' ? 'Resumed' : 'Paused'}` });
            return newStatus;
        });
    }

    const handleEnd = () => {
        setDraftStatus('Finished');
        toast({ title: "Draft Ended", description: "The draft is complete." });
    }

    const formatTime = (seconds: number) => {
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    const currentTeamOnClock = mockDraftOrder.find(p => p.pick === currentPick);
    const team = currentTeamOnClock ? findTeam(currentTeamOnClock.teamId) : null;

    return (
        <Card>
            <CardHeader>
                <CardTitle>Draft Management</CardTitle>
                <CardDescription>Control the flow of the official MVHL draft.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                <Card>
                    <CardContent className="p-6 flex flex-col md:flex-row justify-between items-center gap-6">
                        <div className="text-center">
                            <p className="text-sm text-muted-foreground">Status</p>
                            <p className="text-2xl font-bold">{draftStatus}</p>
                        </div>
                         <div className="text-center">
                            <p className="text-sm text-muted-foreground">Current Pick</p>
                            <p className="text-2xl font-bold">#{currentPick}</p>
                        </div>
                        {team && (
                            <div className="text-center flex flex-col items-center">
                                <p className="text-sm text-muted-foreground">On the Clock</p>
                                <div className="flex items-center gap-2 mt-1">
                                    <Image src={team.logoUrl} alt={team.name} width={24} height={24} data-ai-hint="logo" />
                                    <p className="text-lg font-bold">{team.name}</p>
                                </div>
                            </div>
                        )}
                        <div className="text-center">
                            <p className="text-sm text-muted-foreground">Time Remaining</p>
                            <p className="text-2xl font-bold font-mono">{formatTime(time)}</p>
                        </div>
                        <div className="w-full md:w-1/3">
                            <Progress value={(time/300)*100} />
                        </div>
                    </CardContent>
                </Card>
                <div className="flex flex-wrap gap-4">
                    <Button onClick={handleStart} disabled={draftStatus !== 'Not Started'}><Play className="mr-2"/> Start Draft</Button>
                    <Button onClick={handlePause} variant="secondary" disabled={draftStatus === 'Not Started' || draftStatus === 'Finished'}><Pause className="mr-2"/> {draftStatus === 'Paused' ? 'Resume' : 'Pause'}</Button>
                    <Button onClick={handleNextPick} variant="secondary" disabled={draftStatus !== 'In Progress'}><SkipForward className="mr-2"/> Next Pick</Button>
                    <Button onClick={handleEnd} variant="destructive" disabled={draftStatus === 'Finished'}><StopCircle className="mr-2"/> End Draft</Button>
                </div>
            </CardContent>
        </Card>
    );
}

export default function AdminDashboardClient() {
    const { user } = useAuth();

    if (!user || user.role !== 'admin') {
        return (
            <div className="container mx-auto p-4 text-center">
                <p className="text-destructive">You do not have permission to view this page.</p>
            </div>
        )
    }

    return (
        <div className="container mx-auto p-4 sm:p-6 lg:p-8">
            <div className="mb-8">
                <h1 className="text-4xl font-headline font-bold">Admin Dashboard</h1>
                <p className="text-muted-foreground">Welcome, {user.name}. Manage the MVHL Hub.</p>
            </div>
            
            <Tabs defaultValue="user_management" className="w-full">
                <TabsList className="grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-7 h-auto">
                    <TabsTrigger value="user_management"><Users className="mr-2"/>Users</TabsTrigger>
                    <TabsTrigger value="team_management"><Shield className="mr-2"/>Teams</TabsTrigger>
                    <TabsTrigger value="schedule_management"><Calendar className="mr-2"/>Schedule</TabsTrigger>
                    <TabsTrigger value="game_stats"><BarChart2 className="mr-2"/>Game Stats</TabsTrigger>
                    <TabsTrigger value="image_management"><ImageIcon className="mr-2"/>Images</TabsTrigger>
                    <TabsTrigger value="news_generator"><Newspaper className="mr-2"/>News</TabsTrigger>
                    <TabsTrigger value="draft_management"><Gavel className="mr-2"/>Draft</TabsTrigger>
                </TabsList>

                <TabsContent value="user_management" className="mt-6"><UserManagementTab/></TabsContent>
                <TabsContent value="team_management" className="mt-6"><TeamManagementTab/></TabsContent>
                <TabsContent value="schedule_management" className="mt-6"><ScheduleManagementTab/></TabsContent>
                <TabsContent value="game_stats" className="mt-6"><EditGameStatsTab/></TabsContent>
                <TabsContent value="image_management" className="mt-6"><ImageManagementTab/></TabsContent>
                <TabsContent value="news_generator" className="mt-6"><NewsGeneratorTab/></TabsContent>
                <TabsContent value="draft_management" className="mt-6"><DraftManagementTab/></TabsContent>
            </Tabs>
        </div>
    );
}
```

---

**File: `src/components/pages/all-star-vote-client.tsx`**
```tsx
'use client';

import {useState, useEffect} from 'react';
import Image from 'next/image';
import {Camera, Crown, Loader2, Star, User, ShieldCheck} from 'lucide-react';
import {useAuth} from '@/hooks/use-auth';
import {useToast} from '@/hooks/use-toast';
import {Button} from '@/components/ui/button';
import {Card, CardContent, CardFooter, CardHeader, CardTitle} from '@/components/ui/card';
import type {Player} from '@/lib/mock-data-types';
import { Badge } from '../ui/badge';
import { Alert, AlertDescription, AlertTitle } from '../ui/alert';

type Position = Player['position'];

export default function AllStarVoteClient() {
  const {user, players, teams, allStars, login, setAvatar, findTeam} = useAuth();
  const {toast} = useToast();
  const [headshots, setHeadshots] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState<Record<string, boolean>>({});
  const [votes, setVotes] = useState<Record<string, number>>({});
  const [voted, setVoted] = useState<Record<string, Set<string>>>({ Eastern: new Set(), Western: new Set() });

  const userTeam = user?.teamId ? findTeam(user.teamId) : null;
  const userConference = userTeam?.conference;

  useEffect(() => {
    const loadedHeadshots: Record<string, string> = {};
    const loadedVotes: Record<string, number> = {};
    const loadedVoted: Record<string, Set<string>> = { Eastern: new Set(), Western: new Set() };
    const positions: Position[] = ['C', 'LW', 'RW', 'LD', 'RD', 'G'];

    allStars.forEach(p => {
      const storedHeadshot = localStorage.getItem(`headshot_${p.id}`);
      if (storedHeadshot) {
        loadedHeadshots[p.id] = storedHeadshot;
      }
      const storedVote = localStorage.getItem(`vote_allstar_${p.id}`);
      loadedVotes[p.id] = storedVote ? parseInt(storedVote, 10) : Math.floor(Math.random() * 2500);
    });

    ['Eastern', 'Western'].forEach(conf => {
        positions.forEach(pos => {
            const votedPlayerId = localStorage.getItem(`voted_${conf}_${pos}`);
            if(votedPlayerId) {
                loadedVoted[conf].add(pos);
            }
        });
    });

    setHeadshots(loadedHeadshots);
    setVotes(loadedVotes);
    setVoted(loadedVoted);
  }, [allStars]);

  const handleGenerateHeadshot = async (player: Player) => {
    setLoading(prev => ({...prev, [player.id]: true}));
    try {
      const team = teams.find(t => t.id === player.teamId);
      // This flow does not exist, so we will mock the result
      // const result = await generatePlayerHeadshot({
      //   player_name: player.name,
      //   team_name: team?.name || '',
      //   position: player.position,
      // });
      const result = { headshot_data_uri: 'https://placehold.co/200x200.png' };
      const url = result.headshot_data_uri;
      setHeadshots(prev => ({...prev, [player.id]: url}));
      localStorage.setItem(`headshot_${player.id}`, url);
    } catch (error) {
      toast({
        title: 'Error generating headshot',
        variant: 'destructive',
      });
    } finally {
      setLoading(prev => ({...prev, [player.id]: false}));
    }
  };

  const handleSetAvatar = (player: Player) => {
    if (!user) {
      login('player');
      toast({
        title: 'Please log in to set your avatar.',
      });
      return;
    }
    const url = headshots[player.id];
    if (url) {
      setAvatar(url);
      toast({
        title: 'Avatar updated!',
      });
    }
  };

  const handleVote = (player: Player) => {
    const team = findTeam(player.teamId);
    if (!team) return;

    const conference = team.conference;
    const position = player.position;

    if (voted[conference]?.has(position)) {
      toast({
        title: 'Already Voted',
        description: `You have already cast your vote for a ${position} in the ${conference} Conference.`,
        variant: 'destructive'
      });
      return;
    }

    const newVotes = {
      ...votes,
      [player.id]: (votes[player.id] || 0) + 1,
    };
    setVotes(newVotes);
    localStorage.setItem(`vote_allstar_${player.id}`, newVotes[player.id].toString());

    const newVoted = {...voted};
    newVoted[conference].add(position);
    setVoted(newVoted);
    localStorage.setItem(`voted_${conference}_${position}`, player.id);

    toast({
      title: 'Vote Cast!',
      description: `You voted for ${player.name}.`,
    });
  };

  const PlayerCard = ({player, isLeading}: {player: Player; isLeading: boolean}) => {
    const team = teams.find(t => t.id === player.teamId);
    if (!team) return null;
    
    const headshotUrl = headshots[player.id];
    const voteCount = votes[player.id] || 0;
    const position = player.position;
    const hasVoted = voted[team.conference]?.has(position);
    const canVote = !userConference || userConference === team.conference;

    return (
      <Card className={isLeading ? 'border-primary' : ''}>
        <CardHeader className="relative">
          {isLeading && (
            <Badge variant="default" className="absolute -top-3 -right-3 flex items-center gap-1">
              <Crown className="h-4 w-4" /> Leading
            </Badge>
          )}
          <CardTitle>{player.name}</CardTitle>
          <p className="text-sm text-muted-foreground">
            {player.position} | {team?.name}
          </p>
        </CardHeader>
        <CardContent>
          <div className="relative aspect-square w-full">
            <Image
              src={headshotUrl || 'https://placehold.co/200x200.png'}
              alt={player.name}
              layout="fill"
              objectFit="cover"
              className="rounded-md"
              data-ai-hint="player headshot"
            />
            {!headshotUrl && (
              <Button
                size="icon"
                className="absolute bottom-2 right-2"
                onClick={() => handleGenerateHeadshot(player)}
                disabled={loading[player.id]}
              >
                {loading[player.id] ? <Loader2 className="animate-spin" /> : <Camera />}
              </Button>
            )}
          </div>
           <p className="text-center mt-4 font-bold text-lg">{voteCount.toLocaleString()} votes</p>
        </CardContent>
        <CardFooter className="flex-col gap-2">
          <Button onClick={() => handleVote(player)} className="w-full" disabled={hasVoted || !canVote}>
            {hasVoted ? 'Voted' : 'Vote'}
          </Button>
          {headshotUrl && (
            <Button
              variant="secondary"
              className="w-full"
              onClick={() => handleSetAvatar(player)}
            >
              <User className="mr-2" />
              Set Avatar
            </Button>
          )}
        </CardFooter>
      </Card>
    );
  };

  const renderPlayerGrid = (filteredPlayers: Player[], position: Position, positionName: string) => {
    let leadingPlayerId = '';
    let maxVotes = -1;
    const playersInGroup = filteredPlayers.filter(p => p.position === position);
    if(playersInGroup.length === 0) return null;

    playersInGroup.forEach(p => {
      if ((votes[p.id] || 0) > maxVotes) {
        maxVotes = votes[p.id];
        leadingPlayerId = p.id;
      }
    });
    
    return (
        <div className="space-y-4">
            <h4 className="text-xl font-headline">{positionName}</h4>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {playersInGroup.map(p => (
                    <PlayerCard key={p.id} player={p} isLeading={p.id === leadingPlayerId}/>
                ))}
            </div>
        </div>
    );
  }

  const renderConference = (conference: 'Eastern' | 'Western') => {
    const conferencePlayers = allStars.filter(p => teams.find(t => t.id === p.teamId)?.conference === conference);
    const isDisabled = userConference && userConference !== conference;
    
    return (
        <div className={`space-y-8 ${isDisabled ? 'opacity-50 pointer-events-none' : ''}`}>
            {isDisabled && (
                 <Alert>
                    <ShieldCheck className="h-4 w-4" />
                    <AlertTitle>Voting Locked</AlertTitle>
                    <AlertDescription>
                        As a member of the {userConference} Conference, you can only vote for players in your conference.
                    </AlertDescription>
                </Alert>
            )}
            <div>
            <h3 className="text-2xl font-headline mb-4">{conference} Conference</h3>
              <div className="space-y-8">
                {renderPlayerGrid(conferencePlayers, 'C', 'Center')}
                {renderPlayerGrid(conferencePlayers, 'LW', 'Left Wing')}
                {renderPlayerGrid(conferencePlayers, 'RW', 'Right Wing')}
                {renderPlayerGrid(conferencePlayers, 'LD', 'Left Defense')}
                {renderPlayerGrid(conferencePlayers, 'RD', 'Right Defense')}
                {renderPlayerGrid(conferencePlayers, 'G', 'Goalie')}
              </div>
            </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto p-4">
      <div className="text-center mb-8">
        <Star className="mx-auto h-16 w-16 text-primary" />
        <h1 className="text-4xl font-headline mt-4">All-Star Vote</h1>
        <p className="text-muted-foreground mt-2">
          Vote for your favorite players and generate their official AI headshots!
        </p>
      </div>

      <div className="space-y-12">
        {renderConference('Eastern')}
        {renderConference('Western')}
      </div>
    </div>
  );
}
```

---

**File: `src/components/pages/awards-client.tsx`**
```tsx
'use client';

import {useState, useEffect} from 'react';
import {useAuth} from '@/hooks/use-auth';
import {useToast} from '@/hooks/use-toast';
import {Button} from '@/components/ui/button';
import {Card, CardContent, CardFooter, CardHeader, CardTitle} from '@/components/ui/card';
import {Badge} from '@/components/ui/badge';
import {Crown, Trophy} from 'lucide-react';
import type {PlayerStats, GoalieStats, AwardNominee} from '@/lib/mock-data-types';

export default function AwardsClient() {
  const {awardNominees, players, teams} = useAuth();
  const {toast} = useToast();
  const [votes, setVotes] = useState<Record<string, number>>({});
  const [votedAwards, setVotedAwards] = useState<Set<string>>(new Set());

  useEffect(() => {
    const loadedVotes: Record<string, number> = {};
    const loadedVotedAwards = new Set<string>();
    const awards = [...new Set(awardNominees.map(n => n.awardName))];

    awardNominees.forEach(nominee => {
      const storedVote = localStorage.getItem(`vote_award_${nominee.id}`);
      loadedVotes[nominee.id] = storedVote ? parseInt(storedVote, 10) : nominee.votes;
    });

    awards.forEach(award => {
      const hasVoted = localStorage.getItem(`voted_for_award_${award}`);
      if (hasVoted) {
        loadedVotedAwards.add(award);
      }
    });
    
    setVotes(loadedVotes);
    setVotedAwards(loadedVotedAwards);
  }, [awardNominees]);

  const handleVote = (nominee: AwardNominee, playerName: string, awardName: string) => {
    if (votedAwards.has(awardName)) {
      toast({
        title: 'Already Voted',
        description: `You have already cast your vote for the ${awardName}.`,
        variant: 'destructive'
      });
      return;
    }

    const newVotes = {
      ...votes,
      [nominee.id]: (votes[nominee.id] || 0) + 1,
    };
    setVotes(newVotes);
    localStorage.setItem(`vote_award_${nominee.id}`, newVotes[nominee.id].toString());

    const newVotedAwards = new Set(votedAwards);
    newVotedAwards.add(awardName);
    setVotedAwards(newVotedAwards);
    localStorage.setItem(`voted_for_award_${awardName}`, 'true');

    toast({
      title: 'Vote Cast!',
      description: `You voted for ${playerName} for the ${awardName}.`,
    });
  };

  const renderNominees = (awardName: string) => {
    const nominees = awardNominees.filter(n => n.awardName === awardName);
    const hasVotedForAward = votedAwards.has(awardName);

    let leadingNomineeId = '';
    let maxVotes = -1;
    nominees.forEach(n => {
      const voteCount = votes[n.id] || n.votes;
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        leadingNomineeId = n.id;
      }
    });

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {nominees.map(nominee => {
          const player = players.find(p => p.id === nominee.playerId);
          if (!player) return null;
          const team = teams.find(t => t.id === player.teamId);
          const stats = player.stats;
          const voteCount = votes[nominee.id] || nominee.votes;
          const isLeading = nominee.id === leadingNomineeId;

          return (
            <Card key={nominee.id} className={isLeading ? 'border-primary' : ''}>
              <CardHeader className="relative">
                 {isLeading && (
                  <Badge variant="default" className="absolute -top-3 -right-3 flex items-center gap-1">
                    <Crown className="h-4 w-4" /> Leading
                  </Badge>
                )}
                <CardTitle>{player.name}</CardTitle>
                <p className="text-sm text-muted-foreground">
                  {player.position} | {team?.name}
                </p>
              </CardHeader>
              <CardContent>
                <ul className="text-sm space-y-1 mb-4">
                  {player.position === 'G' ? (
                    <>
                      <li>SV%: {(stats as GoalieStats).savePercentage.toFixed(3)}</li>
                      <li>GAA: {(stats as GoalieStats).goalsAgainstAverage.toFixed(2)}</li>
                      <li>Wins: {(stats as GoalieStats).wins}</li>
                    </>
                  ) : (
                    <>
                      <li>Points: {(stats as PlayerStats).points}</li>
                      <li>Goals: {(stats as PlayerStats).goals}</li>
                      <li>Assists: {(stats as PlayerStats).assists}</li>
                      <li>+/-: {(stats as PlayerStats).plusMinus}</li>
                    </>
                  )}
                </ul>
                <p className="text-center font-bold text-lg">{voteCount.toLocaleString()} votes</p>
              </CardContent>
              <CardFooter>
                <Button className="w-full" onClick={() => handleVote(nominee, player.name, awardName)} disabled={hasVotedForAward}>
                   {hasVotedForAward ? 'Voted' : 'Vote'}
                </Button>
              </CardFooter>
            </Card>
          );
        })}
      </div>
    );
  };

  const awards = [...new Set(awardNominees.map(n => n.awardName))];

  return (
    <div className="container mx-auto p-4">
      <div className="text-center mb-8">
        <Trophy className="mx-auto h-16 w-16 text-primary" />
        <h1 className="text-4xl font-headline mt-4">Season Awards</h1>
        <p className="text-muted-foreground mt-2">
          Vote for the players who defined this season.
        </p>
      </div>

      <div className="space-y-8">
        {awards.map(award => (
          <div key={award}>
            <h3 className="text-2xl font-headline mb-4">{award}</h3>
            {renderNominees(award)}
          </div>
        ))}
      </div>
    </div>
  );
}
```

---

**File: `src/components/pages/disclaimer-client.tsx`**
```tsx
'use client';

import * as React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { AlertTriangle } from "lucide-react";

export default function DisclaimerClient() {
  return (
    <div className="container mx-auto max-w-4xl py-12 px-4">
      <div className="text-center mb-12">
        <AlertTriangle className="mx-auto h-16 w-16 text-amber-500" />
        <h1 className="text-4xl font-headline font-bold mt-4">Disclaimer</h1>
        <p className="text-muted-foreground mt-2">Important information about this website.</p>
      </div>

      <Card>
        <CardContent className="p-8 space-y-8">
          <section className="space-y-2">
            <h2 className="text-2xl font-headline">Fictional Nature</h2>
            <p className="text-muted-foreground leading-relaxed">
              The Mock Virtual Hockey League (MVHL) Hub is a fictional website created for demonstration and portfolio purposes only. All teams, players, statistics, news articles, and other content are entirely computer-generated and do not represent any real individuals, teams, or events.
            </p>
          </section>

          <section className="space-y-2">
            <h2 className="text-2xl font-headline">No Real-World Affiliation</h2>
            <p className="text-muted-foreground leading-relaxed">
              This project is not affiliated with, endorsed by, or sponsored by the National Hockey League (NHL) or any other professional or amateur sports league. Any resemblance to real-world entities is purely coincidental.
            </p>
          </section>
          
          <section className="space-y-2">
            <h2 className="text-2xl font-headline">AI-Generated Content</h2>
            <p className="text-muted-foreground leading-relaxed">
              Significant portions of this site, including news recaps, scouting reports, and player commentary, are generated by artificial intelligence models (such as Google's Gemini). This content is for illustrative purposes and may contain inaccuracies or nonsensical information. It should not be considered a source of factual information.
            </p>
          </section>

          <section className="space-y-2">
            <h2 className="text-2xl font-headline">Limitation of Liability</h2>
            <p className="text-muted-foreground leading-relaxed">
              The creators of this website are not responsible for any actions taken based on the information presented here. The site is provided "as is" without any warranties of any kind.
            </p>
          </section>
        </CardContent>
      </Card>
    </div>
  );
}
```

---

**File: `src/components/pages/draft-central-client.tsx`**
```tsx
'use client';

import {useState, useRef, useEffect} from 'react';
import {useAuth} from '@/hooks/use-auth';
import {Button} from '@/components/ui/button';
import {Card, CardContent, CardHeader, CardTitle, CardDescription} from '@/components/ui/card';
import {Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger} from '@/components/ui/dialog';
import {Table, TableBody, TableCell, TableHead, TableHeader, TableRow} from '@/components/ui/table';
import {ScrollArea} from '@/components/ui/scroll-area';
import {Input} from '@/components/ui/input';
import {Skeleton} from '@/components/ui/skeleton';
import {FileText, Users, Clock, Send, Mic} from 'lucide-react';
import {generateDraftCommentary} from '@/ai/flows/generate-draft-commentary';
import {toast} from '@/hooks/use-toast';
import {Avatar, AvatarFallback, AvatarImage} from '../ui/avatar';
import { cn } from '@/lib/utils';
import Image from 'next/image';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '../ui/carousel';
import { Progress } from '../ui/progress';

type ChatMessage = {
    sender: string;
    content: string;
    avatarUrl?: string;
    isUser: boolean;
};

const mockUsers = [
    { name: "LeafsFan88", avatarUrl: "https://placehold.co/40x40.png?text=LF" },
    { name: "HockeyGuru", avatarUrl: "https://placehold.co/40x40.png?text=HG" },
    { name: "GMMike", avatarUrl: "https://placehold.co/40x40.png?text=GM" },
];
const mockMessages = [
    "Who do you think Seattle is taking at #3?",
    "They have to go for a defenseman here. Their blue line is thin.",
    "I dunno, that winger from Sweden is a pure goal scorer. Can't pass that up.",
    "What a pick by Chicago! Torque is a game changer."
];

const DraftChat = () => {
    const { user } = useAuth();
    const [messages, setMessages] = useState<ChatMessage[]>([
        { sender: "Moderator", content: "Welcome to the MVHL Draft! Keep it civil and enjoy the show.", isUser: false, avatarUrl: "https://placehold.co/40x40.png?text=M" }
    ]);
    const [input, setInput] = useState('');
    const scrollAreaRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        if (scrollAreaRef.current) {
            scrollAreaRef.current.scrollTo({ top: scrollAreaRef.current.scrollHeight, behavior: 'smooth' });
        }
    }, [messages]);
    
    useEffect(() => {
        const interval = setInterval(() => {
            const randomUser = mockUsers[Math.floor(Math.random() * mockUsers.length)];
            const randomMessage = mockMessages[Math.floor(Math.random() * mockMessages.length)];
            const newMessage: ChatMessage = {
                sender: randomUser.name,
                content: randomMessage,
                avatarUrl: randomUser.avatarUrl,
                isUser: false
            };
            setMessages(prev => [...prev, newMessage]);
        }, 8000); // Add a new message every 8 seconds

        return () => clearInterval(interval);
    }, []);

    const handleSendMessage = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!input.trim() || !user) return;

        const newUserMessage: ChatMessage = { sender: user.name, content: input, isUser: true, avatarUrl: user.avatarUrl };
        setMessages(prev => [...prev, newUserMessage]);
        setInput('');
    };

    return (
        <Card className="flex flex-col h-[75vh]">
            <CardHeader>
                <CardTitle className="font-headline flex items-center gap-2">
                    <Users /> Live Draft Chat
                </CardTitle>
                 <CardDescription>
                    Chat with other GMs and fans during the draft.
                </CardDescription>
            </CardHeader>
            <CardContent className="flex-1 overflow-hidden">
                <ScrollArea className="h-full pr-4" ref={scrollAreaRef}>
                    <div className="space-y-4">
                        {messages.map((message, index) => (
                            <div key={index} className={cn("flex items-start gap-3", message.isUser ? 'justify-end' : 'justify-start')}>
                                {!message.isUser && (
                                    <Avatar className="h-8 w-8">
                                        <AvatarImage src={message.avatarUrl} />
                                        <AvatarFallback>{message.sender.substring(0,2)}</AvatarFallback>
                                    </Avatar>
                                )}
                                <div className="flex flex-col gap-1">
                                    {!message.isUser && <p className="text-xs text-muted-foreground">{message.sender}</p>}
                                    <div className={cn("rounded-lg px-4 py-2 max-w-lg", message.isUser ? 'bg-primary text-primary-foreground' : 'bg-muted')}>
                                        <p className="text-sm">{message.content}</p>
                                    </div>
                                </div>
                                 {message.isUser && user && (
                                    <Avatar className="h-8 w-8">
                                        <AvatarImage src={user.avatarUrl} />
                                        <AvatarFallback>{user.name?.[0] || 'U'}</AvatarFallback>
                                    </Avatar>
                                )}
                            </div>
                        ))}
                    </div>
                </ScrollArea>
            </CardContent>
            <CardContent className="border-t pt-4">
                <form onSubmit={handleSendMessage} className="flex items-center gap-2">
                    <Input
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        placeholder={user ? "Type your message..." : "Log in to chat"}
                        disabled={!user}
                    />
                    <Button type="submit" size="icon" disabled={!user || !input.trim()}>
                        <Send />
                    </Button>
                </form>
            </CardContent>
        </Card>
    )
}

const mockDraftOrder = [
    { pick: 1, teamId: "team-1", selection: "Leo Grandis" },
    { pick: 2, teamId: "team-2", selection: "Axel Torque" },
    { pick: 3, teamId: "team-17", selection: null },
    { pick: 4, teamId: "team-4", selection: null },
    { pick: 5, teamId: "team-5", selection: null },
    { pick: 6, teamId: "team-6", selection: null },
    { pick: 7, teamId: "team-7", selection: null },
    { pick: 8, teamId: "team-8", selection: null },
    { pick: 9, teamId: "team-9", selection: null },
    { pick: 10, teamId: "team-10", selection: null },
];

const DraftPicksAnalysis = ({ completedPicks }: { completedPicks: typeof mockDraftOrder }) => {
    const { findTeam } = useAuth();
    const [commentary, setCommentary] = useState<Record<string, string>>({});
    const [loading, setLoading] = useState<Record<string, boolean>>({});

    const handleGenerateCommentary = async (pick: (typeof mockDraftOrder)[0]) => {
        if (!pick.selection) return;
        setLoading(prev => ({ ...prev, [pick.pick]: true }));
        try {
            const team = findTeam(pick.teamId);
            const result = await generateDraftCommentary({
                player_name: pick.selection,
                pick_number: pick.pick,
                team_name: team ? `${team.city} ${team.name}` : 'Unknown Team',
            });
            setCommentary(prev => ({ ...prev, [pick.pick]: result.commentary }));
        } catch (e) {
            console.error(e);
            toast({
                title: "Error generating commentary",
                description: "There was an issue creating the analysis.",
                variant: "destructive"
            });
        } finally {
            setLoading(prev => ({ ...prev, [pick.pick]: false }));
        }
    };
    
    return (
        <Card>
            <CardHeader>
                <CardTitle className="font-headline">AI Draft Analyst</CardTitle>
                <CardDescription>Get instant AI-powered analysis on each completed draft pick.</CardDescription>
            </CardHeader>
            <CardContent>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead className="w-[50px]">Pick</TableHead>
                            <TableHead>Team</TableHead>
                            <TableHead>Player</TableHead>
                            <TableHead className="text-right">Analysis</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {completedPicks.map(pick => {
                            const team = findTeam(pick.teamId);
                            if (!team) return null;
                            return (
                                <TableRow key={pick.pick}>
                                    <TableCell className="font-bold">{pick.pick}</TableCell>
                                    <TableCell>
                                        <div className="flex items-center gap-3">
                                            <Image data-ai-hint="logo" src={team.logoUrl} alt={team.name} width={24} height={24} />
                                            <span className="font-medium">{team?.name}</span>
                                        </div>
                                    </TableCell>
                                    <TableCell className="font-medium">{pick.selection}</TableCell>
                                    <TableCell className="text-right">
                                        <Dialog>
                                            <DialogTrigger asChild>
                                                <Button variant="outline" size="icon" onClick={() => !commentary[pick.pick] && handleGenerateCommentary(pick)}>
                                                    <Mic className="h-4 w-4" />
                                                </Button>
                                            </DialogTrigger>
                                            <DialogContent className="max-w-2xl">
                                                <DialogHeader>
                                                    <DialogTitle>Analysis: {team.name} select {pick.selection}</DialogTitle>
                                                    <DialogDescription>Pick #{pick.pick} Overall</DialogDescription>
                                                </DialogHeader>
                                                <div className="py-4">
                                                    {loading[pick.pick] ? (
                                                        <div className="space-y-2">
                                                            <Skeleton className="h-4 w-full" />
                                                            <Skeleton className="h-4 w-full" />
                                                            <Skeleton className="h-4 w-3/4" />
                                                        </div>
                                                    ) : (
                                                        <p className="whitespace-pre-wrap">{commentary[pick.pick]}</p>
                                                    )}
                                                </div>
                                            </DialogContent>
                                        </Dialog>
                                    </TableCell>
                                </TableRow>
                            )
                        })}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    )
}

export default function DraftCentralClient() {
  const {findTeam, draftStatus, currentPick} = useAuth();
  const [time, setTime] = useState(300);
  const timerRef = useRef<NodeJS.Timeout>();
  
  useEffect(() => {
    if (draftStatus === 'In Progress' && time > 0) {
      timerRef.current = setTimeout(() => setTime(t => t - 1), 1000);
    }
    return () => {
        if(timerRef.current) clearTimeout(timerRef.current);
    }
  }, [time, draftStatus]);

  useEffect(() => {
    setTime(300); // Reset timer on pick change
  }, [currentPick]);


  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }

  const completedPicks = mockDraftOrder.filter(p => p.selection !== null && p.pick < currentPick);
  const upcomingPicks = mockDraftOrder.filter(p => p.pick >= currentPick).slice(0, 10);
  
  const currentTeamOnClock = mockDraftOrder.find(p => p.pick === currentPick);
  const team = currentTeamOnClock ? findTeam(currentTeamOnClock.teamId) : null;

  return (
    <div className="container mx-auto p-4">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <main className="lg:col-span-2 space-y-8">
            <Card>
                <CardHeader>
                    <CardTitle className="font-headline text-2xl flex items-center gap-2">
                        <Clock />
                        ON THE CLOCK
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <Card>
                        <CardContent className="p-6 flex flex-col md:flex-row justify-between items-center gap-6">
                            <div className="text-center">
                                <p className="text-sm text-muted-foreground">Status</p>
                                <p className="text-2xl font-bold">{draftStatus}</p>
                            </div>
                            <div className="text-center">
                                <p className="text-sm text-muted-foreground">Current Pick</p>
                                <p className="text-2xl font-bold">#{currentPick}</p>
                            </div>
                            {team && (
                                <div className="text-center flex flex-col items-center">
                                    <p className="text-sm text-muted-foreground">On the Clock</p>
                                    <div className="flex items-center gap-2 mt-1">
                                        <Image src={team.logoUrl} alt={team.name} width={24} height={24} data-ai-hint="logo" />
                                        <p className="text-lg font-bold">{team.name}</p>
                                    </div>
                                </div>
                            )}
                            <div className="text-center">
                                <p className="text-sm text-muted-foreground">Time Remaining</p>
                                <p className="text-2xl font-bold font-mono">{formatTime(time)}</p>
                            </div>
                            <div className="w-full md:w-1/3">
                                <Progress value={(time/300)*100} />
                            </div>
                        </CardContent>
                    </Card>
                </CardContent>
            </Card>

            <Card>
                <CardHeader>
                    <CardTitle className="font-headline">Upcoming Picks</CardTitle>
                </CardHeader>
                 <CardContent>
                    <Carousel
                        opts={{
                            align: "start",
                            loop: false,
                        }}
                        className="w-full"
                    >
                        <CarouselContent>
                            {upcomingPicks.map((pick, index) => {
                                const team = findTeam(pick.teamId);
                                if (!team) return null;
                                return (
                                    <CarouselItem key={pick.pick} className="md:basis-1/2 lg:basis-1/3">
                                        <div className={cn("p-1", index === 0 ? "border-primary border-2 rounded-lg" : "")}>
                                            <Card className={cn(index === 0 ? "border-0" : "")}>
                                                <CardHeader className="p-4">
                                                    <CardDescription>Pick #{pick.pick}</CardDescription>
                                                    <CardTitle className="text-xl">{team.city} {team.name}</CardTitle>
                                                </CardHeader>
                                                <CardContent className="p-4 pt-0">
                                                    <Image data-ai-hint="logo" src={team.logoUrl} alt={team.name} width={60} height={60} />
                                                </CardContent>
                                            </Card>
                                        </div>
                                    </CarouselItem>
                                )
                            })}
                        </CarouselContent>
                        <CarouselPrevious className="-left-4" />
                        <CarouselNext className="-right-4" />
                    </Carousel>
                </CardContent>
            </Card>
          
          <DraftPicksAnalysis completedPicks={completedPicks} />
        </main>
        <aside>
          <DraftChat />
        </aside>
      </div>
    </div>
  );
}
```

---

**File: `src/components/pages/faq-client.tsx`**
```tsx
'use client';

import { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { aiPoweredFaqSearch } from '@/ai/flows/ai-powered-faq-search';
import { toast } from '@/hooks/use-toast';
import Loader from '../loader';
import { Search, BrainCircuit } from 'lucide-react';

const faqData = [
  {
    question: 'How is the league structured?',
    answer: 'The Mock Virtual Hockey League (MVHL) consists of 32 teams, divided into two conferences (Eastern and Western), with two divisions in each conference (Northeast, South, Midwest, and West).',
  },
  {
    question: 'How does the AI generate news and analysis?',
    answer: "We use advanced generative AI models, like Google's Gemini, to analyze game data, player statistics, and league trends. These models are instructed by expert prompts to write articles, scouting reports, and commentary in the style of a professional sports journalist.",
  },
  {
    question: 'Can I vote for the All-Stars?',
    answer: "Yes! All registered members can vote for the All-Star teams. You can vote for one player at each position (C, LW, RW, LD, RD, G) in your team's conference.",
  },
  {
    question: 'How are draft prospects ranked?',
    answer: 'Draft prospects are ranked based on a combination of simulated performance data and AI-generated scouting analysis. Our AI models evaluate player potential to create a comprehensive "big board".',
  },
    {
    question: 'Is this a real hockey league?',
    answer: 'No, the MVHL is a fictional league created for demonstration purposes to showcase AI integration in a sports context. All teams, players, and statistics are simulated.',
  },
];

export default function FaqClient() {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResult, setSearchResult] = useState('');
  const [isSearching, setIsSearching] = useState(false);

  const faqContent = useMemo(() => {
    return faqData.map(item => `Q: ${item.question}\nA: ${item.answer}`).join('\n\n');
  }, []);

  const handleSearch = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!searchTerm.trim()) return;

    setIsSearching(true);
    setSearchResult('');
    try {
      const result = await aiPoweredFaqSearch({ query: searchTerm, faqContent });
      setSearchResult(result.answer);
    } catch (error) {
      console.error(error);
      toast({
        title: 'Error searching FAQ',
        description: 'There was an issue with the AI search. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsSearching(false);
    }
  };

  return (
    <div className="container mx-auto max-w-4xl py-12 px-4">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-headline font-bold">Frequently Asked Questions</h1>
        <p className="text-muted-foreground mt-2">Find answers to common questions about the MVHL.</p>
      </div>

      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="font-headline flex items-center gap-2">
            <BrainCircuit />
            AI-Powered Search
          </CardTitle>
          <CardDescription>Can't find your question? Ask our AI assistant.</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSearch} className="flex gap-2">
            <Input
              placeholder="Type your question here..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              disabled={isSearching}
            />
            <Button type="submit" disabled={isSearching || !searchTerm.trim()}>
              {isSearching ? 'Searching...' : <Search />}
            </Button>
          </form>
          {isSearching && <Loader text="Searching for answers..." className="py-8" />}
          {searchResult && (
            <div className="mt-6 p-4 bg-muted rounded-lg">
                <p className="text-sm">{searchResult}</p>
            </div>
          )}
        </CardContent>
      </Card>

      <Accordion type="single" collapsible className="w-full">
        {faqData.map((item, index) => (
          <AccordionItem value={`item-${index}`} key={index}>
            <AccordionTrigger className="text-left">{item.question}</AccordionTrigger>
            <AccordionContent>
              {item.answer}
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>
    </div>
  );
}
```

---

**File: `src/components/pages/free-agency-client.tsx`**
```tsx
'use client';

import {useAuth} from '@/hooks/use-auth';
import {useToast} from '@/hooks/use-toast';
import {Button} from '@/components/ui/button';
import {Card, CardContent, CardHeader, CardTitle} from '@/components/ui/card';
import {Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger} from '@/components/ui/dialog';
import {Input} from '@/components/ui/input';
import {Label} from '@/components/ui/label';
import {z} from 'zod';
import type {Player, PlayerStats} from '@/lib/mock-data-types';

const offerSchema = z.object({
  salary: z.number().min(1),
  seasons: z.number().min(1).max(8),
});

export default function FreeAgencyClient() {
  const {user, freeAgents} = useAuth();
  const {toast} = useToast();

  const handleOfferSubmit = (player: Player, e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const salary = parseFloat(formData.get('salary') as string);
    const seasons = parseInt(formData.get('seasons') as string);
    const validation = offerSchema.safeParse({salary, seasons});
    if (validation.success) {
      toast({
        title: 'Offer Submitted',
        description: `Your offer to ${player.name} for ${seasons} season(s) at $${salary}M has been submitted.`,
      });
    } else {
      toast({
        title: 'Invalid Offer',
        description: validation.error.errors.map(err => err.message).join(', '),
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="container mx-auto p-4">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {freeAgents.map(player => (
          <Card key={player.id}>
            <CardHeader>
              <CardTitle>{player.name}</CardTitle>
              <p>{player.position}</p>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground mb-4">{player.bio}</p>
              <p>Asking: ${player.askingSalary}M x {player.contractLength} years</p>
            </CardContent>
            <CardContent>
              {user?.role === 'management' && (
                <Dialog>
                  <DialogTrigger asChild>
                    <Button>Offer Contract</Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Offer Contract to {player.name}</DialogTitle>
                    </DialogHeader>
                    <form onSubmit={e => handleOfferSubmit(player, e)} className="space-y-4">
                      <div>
                        <Label htmlFor="salary">Salary (in millions)</Label>
                        <Input id="salary" name="salary" type="number" step="0.1" required />
                      </div>
                      <div>
                        <Label htmlFor="seasons">Seasons</Label>
                        <Input id="seasons" name="seasons" type="number" min="1" max="8" required />
                      </div>
                      <Button type="submit">Submit Offer</Button>
                    </form>
                  </DialogContent>
                </Dialog>
              )}
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
```

---

**File: `src/components/pages/hall-of-fame-client.tsx`**
```tsx
'use client';

import {useState} from 'react';
import Image from 'next/image';
import {useAuth} from '@/hooks/use-auth';
import {Button} from '@/components/ui/button';
import {Card, CardContent, CardHeader, CardTitle} from '@/components/ui/card';
import {Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger} from '@/components/ui/dialog';
import {Loader2} from 'lucide-react';
import {generateHallOfFameRetrospective} from '@/ai/flows/generate-hall-of-fame-retrospective';
import type {Player} from '@/lib/mock-data-types';

export default function HallOfFameClient() {
  const {hallOfFameInductees} = useAuth();
  const [retrospectives, setRetrospectives] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState<Record<string, boolean>>({});

  const handleGenerateRetrospective = async (player: Player) => {
    if (retrospectives[player.id]) return;
    setLoading(prev => ({...prev, [player.id]: true}));
    try {
      const result = await generateHallOfFameRetrospective({playerName: player.name});
      setRetrospectives(prev => ({...prev, [player.id]: result.retrospective}));
    } catch (e) {
      console.error(e);
    } finally {
      setLoading(prev => ({...prev, [player.id]: false}));
    }
  };

  return (
    <div className="container mx-auto p-4">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {hallOfFameInductees.map(player => (
          <Card key={player.id} className="border-yellow-400">
            <CardHeader>
              <Image
                src={player.headshotUrl}
                alt={player.name}
                width={100}
                height={100}
                className="rounded-full mx-auto"
                data-ai-hint="player headshot"
              />
              <CardTitle className="text-center mt-4">{player.name}</CardTitle>
              <p className="text-center text-muted-foreground">Inducted {player.inductionYear}</p>
            </CardHeader>
            <CardContent>
              <Dialog>
                <DialogTrigger asChild>
                  <Button className="w-full" onClick={() => handleGenerateRetrospective(player)}>
                    Read Retrospective
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Career Retrospective: {player.name}</DialogTitle>
                    <DialogDescription>
                      An AI-generated look back at the career of a Hall of Famer.
                    </DialogDescription>
                  </DialogHeader>
                  <div className='py-4'>
                    {loading[player.id] ? (
                      <Loader2 className="animate-spin" />
                    ) : (
                      <p className="whitespace-pre-wrap">{retrospectives[player.id]}</p>
                    )}
                  </div>
                </DialogContent>
              </Dialog>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
```

---

**File: `src/components/pages/home-client.tsx`**
```tsx
"use client";

import Image from "next/image";
import Link from "next/link";
import { ArrowRight, Trophy, Users, Newspaper } from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import Loader from "@/components/loader";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from "@/components/ui/carousel";

export default function HomePageClient() {
  const { isLoading, teams, findTeam, scoreTickerMatches, upcomingMatches, recentTrades } = useAuth();

  if (isLoading) {
    return <Loader text="Loading League Data..." />;
  }

  const ScoreTicker = () => (
    <div className="py-4">
        <Carousel opts={{ align: "start", loop: true }}>
            <CarouselContent>
            {scoreTickerMatches.map((match) => {
                const homeTeam = findTeam(match.homeTeamId);
                const awayTeam = findTeam(match.awayTeamId);
                return (
                    <CarouselItem key={match.id} className="md:basis-1/2 lg:basis-1/3">
                        <Card>
                            <CardContent className="p-4 flex justify-between items-center text-sm">
                                <div className="flex flex-col gap-2">
                                    <div className="flex items-center gap-2">
                                        <Image data-ai-hint="logo" src={awayTeam?.logoUrl || ''} alt={awayTeam?.name || ''} width={24} height={24} />
                                        <span>{awayTeam?.name}</span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <Image data-ai-hint="logo" src={homeTeam?.logoUrl || ''} alt={homeTeam?.name || ''} width={24} height={24} />
                                        <span>{homeTeam?.name}</span>
                                    </div>
                                </div>
                                <div className="flex flex-col gap-2 items-end font-mono">
                                    <span>{match.awayScore}</span>
                                    <span>{match.homeScore}</span>
                                </div>
                                <div className="text-center text-xs text-muted-foreground w-16">
                                    Final
                                </div>
                            </CardContent>
                        </Card>
                    </CarouselItem>
                );
            })}
            </CarouselContent>
            <CarouselPrevious className="hidden sm:flex" />
            <CarouselNext className="hidden sm:flex"/>
        </Carousel>
    </div>
  );

  const HeroSection = () => (
    <Card className="overflow-hidden">
        <div className="relative w-full h-64 md:h-96">
            <Image
                src="https://placehold.co/1200x400.png"
                alt="MVHL Hero Image"
                layout="fill"
                objectFit="cover"
                priority
                data-ai-hint="hockey action"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent" />
            <div className="absolute bottom-0 left-0 p-8">
                <h1 className="font-headline text-4xl md:text-6xl font-bold text-white shadow-lg">Welcome to the MVHL</h1>
                <p className="mt-2 text-lg text-gray-200 max-w-2xl">Your source for everything in the Mock Virtual Hockey League.</p>
            </div>
        </div>
    </Card>
  );

  return (
    <div className="container mx-auto max-w-screen-2xl py-8 px-4">
      <div className="space-y-12">
        <HeroSection />
        <ScoreTicker />

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2 space-y-8">
                <Card>
                    <CardHeader>
                        <CardTitle className="font-headline">Upcoming Matches</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <ul className="space-y-4">
                            {upcomingMatches.map((match, index) => {
                                const homeTeam = findTeam(match.homeTeamId);
                                const awayTeam = findTeam(match.awayTeamId);
                                return (
                                    <li key={match.id}>
                                        <div className="flex items-center justify-between p-2 rounded-lg hover:bg-muted">
                                            <div className="flex items-center gap-2 text-sm">
                                                <Image data-ai-hint="logo" src={awayTeam?.logoUrl || ''} alt={awayTeam?.name || ''} width={24} height={24} />
                                                <span>{awayTeam?.name}</span>
                                                <span className="text-muted-foreground mx-1">@</span>
                                                <Image data-ai-hint="logo" src={homeTeam?.logoUrl || ''} alt={homeTeam?.name || ''} width={24} height={24} />
                                                <span>{homeTeam?.name}</span>
                                            </div>
                                            <div className="text-sm text-muted-foreground">
                                                {match.date.toLocaleDateString()}
                                            </div>
                                        </div>
                                        {index < upcomingMatches.length - 1 && <Separator />}
                                    </li>
                                )
                            })}
                        </ul>
                    </CardContent>
                </Card>

                <Card>
                    <CardHeader>
                        <CardTitle className="font-headline">Recent Trades</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <ul className="space-y-4">
                            {recentTrades.map((trade, index) => (
                                <li key={trade.id}>
                                    <div className="text-sm">
                                        <p><span className="font-semibold">{findTeam(trade.teamsInvolved[0].teamId)?.name}</span> trade with <span className="font-semibold">{findTeam(trade.teamsInvolved[1].teamId)?.name}</span></p>
                                        <p className="text-xs text-muted-foreground">{trade.date.toLocaleDateString()}</p>
                                    </div>
                                    {index < recentTrades.length -1 && <Separator className="my-4"/>}
                                </li>
                            ))}
                        </ul>
                    </CardContent>
                </Card>
            </div>

            <div className="space-y-8">
                <Card className="hover:border-primary transition-colors">
                    <CardHeader className="flex-row items-center gap-4">
                        <Users className="w-8 h-8 text-primary"/>
                        <CardTitle className="font-headline">Teams</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <CardDescription>Explore all 32 teams in the MVHL. View rosters, stats, and more.</CardDescription>
                    </CardContent>
                    <CardFooter>
                        <Button asChild variant="outline">
                            <Link href="/teams">View Teams <ArrowRight className="ml-2 h-4 w-4"/></Link>
                        </Button>
                    </CardFooter>
                </Card>
                <Card className="hover:border-primary transition-colors">
                    <CardHeader className="flex-row items-center gap-4">
                        <Newspaper className="w-8 h-8 text-primary"/>
                        <CardTitle className="font-headline">News</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <CardDescription>Get the latest AI-powered news and analysis from around the league.</CardDescription>
                    </CardContent>
                    <CardFooter>
                        <Button asChild variant="outline">
                           <Link href="/news">Read News <ArrowRight className="ml-2 h-4 w-4"/></Link>
                        </Button>
                    </CardFooter>
                </Card>
                 <Card className="hover:border-primary transition-colors">
                    <CardHeader className="flex-row items-center gap-4">
                        <Trophy className="w-8 h-8 text-primary"/>
                        <CardTitle className="font-headline">Awards</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <CardDescription>See the league's top performers and vote for the end-of-season awards.</CardDescription>
                    </CardContent>
                    <CardFooter>
                        <Button asChild variant="outline">
                           <Link href="/awards">View Awards <ArrowRight className="ml-2 h-4 w-4"/></Link>
                        </Button>
                    </CardFooter>
                </Card>
            </div>
        </div>
      </div>
    </div>
  );
}
```

---

**File: `src/components/pages/management-dashboard-client.tsx`**
```tsx
'use client';

import React, { useState, useEffect, useRef } from 'react';
import Image from 'next/image';
import { useAuth } from '@/hooks/use-auth';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { toast } from '@/hooks/use-toast';
import type { Player, Match, DraftProspect, Team } from '@/lib/mock-data-types';
import { ScrollArea, ScrollBar } from '../ui/scroll-area';
import { cn } from '@/lib/utils';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';
import { Send, Users, Search, FileText, Clock, UserCheck, Loader2 } from 'lucide-react';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '../ui/carousel';
import { RadioGroup, RadioGroupItem } from '../ui/radio-group';
import { lookupChelStats, type LookupChelStatsOutput } from '@/ai/flows/lookup-chel-stats';


// Mock data types and initial states
interface InjuredPlayer extends Player {
    waiverTimestamp: Date;
    originalTeamId: string;
    injuryReason: string;
    returnDate: string;
    irSince: Date;
}

interface Offer {
    id: string;
    playerName: string;
    salary: number;
    seasons: number;
    hasTradeClause: boolean;
    status: 'Pending' | 'Accepted' | 'Rejected';
}


const RosterTab = ({ roster }: { roster: Player[] }) => {
    return (
        <Card>
            <CardHeader>
                <CardTitle>Active Roster</CardTitle>
                <CardDescription>Your team's current active players.</CardDescription>
            </CardHeader>
            <CardContent>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Name</TableHead>
                            <TableHead>Position</TableHead>
                            <TableHead>Salary</TableHead>
                            <TableHead>Trade Clause</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {roster.map(player => (
                            <TableRow key={player.id}>
                                <TableCell>{player.name}</TableCell>
                                <TableCell>{player.position}</TableCell>
                                <TableCell>$7,500,000</TableCell>
                                <TableCell>{player.hasTradeClause ? 'Yes' : 'No'}</TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    );
};

const AvailabilityTab = ({ schedule, roster, findTeam }: { schedule: Match[]; roster: Player[]; findTeam: (id: string) => Team | undefined }) => {
    const upcomingGames = schedule.filter(m => m.status === 'scheduled');
    const availabilityOptions = ['Available', 'Maybe', 'Unavailable'];

    return (
        <div className="space-y-6">
            {upcomingGames.map(game => (
                <Card key={game.id}>
                    <CardHeader>
                        <CardTitle>Availability vs {findTeam(game.awayTeamId)?.name}</CardTitle>
                        <CardDescription>Date: {game.date.toLocaleDateString()}</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Player</TableHead>
                                    <TableHead className="text-right">Status</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {roster.map(player => {
                                    const status = availabilityOptions[Math.floor(Math.random() * availabilityOptions.length)];
                                    return (
                                        <TableRow key={player.id}>
                                            <TableCell>{player.name}</TableCell>
                                            <TableCell className="text-right">
                                                <Badge variant={status === 'Available' ? 'default' : status === 'Unavailable' ? 'destructive' : 'secondary'}>
                                                    {status}
                                                </Badge>
                                            </TableCell>
                                        </TableRow>
                                    );
                                })}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
            ))}
            {upcomingGames.length === 0 && (
                 <Card>
                    <CardContent className="p-8 text-center text-muted-foreground">
                        No upcoming games in the schedule to report availability for.
                    </CardContent>
                </Card>
            )}
        </div>
    );
};

const InjuredReserveTab = ({ teamPlayers }: { teamPlayers: Player[] }) => {
    const { injuredReserve, movePlayerToIR, activatePlayerFromIR } = useAuth();
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);

    const openDialog = (player: Player) => {
        setSelectedPlayer(player);
        setIsDialogOpen(true);
    };

    const closeDialog = () => {
        setIsDialogOpen(false);
        setSelectedPlayer(null);
    };

    const IRMoveDialog = () => {
        if (!selectedPlayer) return null;

        const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
            e.preventDefault();
            const formData = new FormData(e.currentTarget);
            const reason = formData.get('reason') as string;
            const returnDate = formData.get('returnDate') as string;
            movePlayerToIR(selectedPlayer.id, reason, returnDate);
            toast({ title: "Player Moved to IR", description: `${selectedPlayer.name} has been placed on Injured Reserve.` });
            closeDialog();
        };

        return (
            <Dialog open={isDialogOpen} onOpenChange={(isOpen) => !isOpen && closeDialog()}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Move {selectedPlayer.name} to IR</DialogTitle>
                    </DialogHeader>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <Label htmlFor="reason">Injury Reason</Label>
                            <Input id="reason" name="reason" placeholder="e.g., Upper Body" required />
                        </div>
                        <div>
                            <Label htmlFor="returnDate">Estimated Return Date</Label>
                            <Input id="returnDate" name="returnDate" type="date" required />
                        </div>
                        <Button type="submit">Confirm</Button>
                    </form>
                </DialogContent>
            </Dialog>
        );
    }

    const handleActivate = (player: any) => {
        activatePlayerFromIR(player.id);
        toast({ title: "Player Activated", description: `${player.name} has been activated from IR.` });
    };

    const daysOnIR = (date: Date) => {
        return Math.floor((new Date().getTime() - new Date(date).getTime()) / (1000 * 3600 * 24));
    }
    
    return (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <IRMoveDialog />
            <Card>
                <CardHeader><CardTitle>Active Roster</CardTitle></CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader>
                            <TableRow><TableHead>Name</TableHead><TableHead className="text-right">Action</TableHead></TableRow>
                        </TableHeader>
                        <TableBody>
                            {teamPlayers.map(p => (
                                <TableRow key={p.id}>
                                    <TableCell>{p.name}</TableCell>
                                    <TableCell className="text-right">
                                        <Button variant="outline" size="sm" onClick={() => openDialog(p)}>Move to IR</Button>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle>Injured Reserve</CardTitle></CardHeader>
                <CardContent className="space-y-4">
                    {injuredReserve.map(p => {
                        const days = daysOnIR(p.irSince);
                        return (
                            <Card key={p.id}>
                                <CardHeader>
                                    <CardTitle className="text-lg">{p.name}</CardTitle>
                                    <CardDescription>{p.injuryReason}</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <p className="text-sm">Return: {p.returnDate}</p>
                                    <p className="text-sm text-muted-foreground">Days on IR: {days}</p>
                                </CardContent>
                                <CardFooter>
                                    <Button size="sm" onClick={() => handleActivate(p)} disabled={days < 7}>Activate</Button>
                                </CardFooter>
                            </Card>
                        )
                    })}
                     {injuredReserve.length === 0 && <p className="text-muted-foreground text-center py-8">No players on IR.</p>}
                </CardContent>
            </Card>
        </div>
    )
};

const TradesTab = ({ roster, teams, userTeamId }: { roster: Player[], teams: any[], userTeamId: string }) => {
    const { findTeam } = useAuth();
    const [tradeBlock, setTradeBlock] = useState<Set<string>>(new Set());
    
    const handleBlockChange = (playerId: string, checked: boolean) => {
        const newBlock = new Set(tradeBlock);
        if (checked) {
            newBlock.add(playerId);
        } else {
            newBlock.delete(playerId);
        }
        setTradeBlock(newBlock);
    }
    
    return (
        <div className="space-y-6">
             <Dialog>
                <DialogTrigger asChild>
                     <Button>Propose a Trade</Button>
                </DialogTrigger>
                <DialogContent className="max-w-4xl h-[90vh]">
                     <DialogHeader><DialogTitle>Propose a New Trade</DialogTitle></DialogHeader>
                     <div className="grid grid-cols-2 gap-6 h-full overflow-hidden">
                        <div className="flex flex-col gap-4">
                           <Select>
                               <SelectTrigger><SelectValue placeholder="Select a trade partner..."/></SelectTrigger>
                               <SelectContent>
                                   {teams.filter(t => t.id !== userTeamId).map(t => <SelectItem key={t.id} value={t.id}>{t.city} {t.name}</SelectItem>)}
                               </SelectContent>
                           </Select>
                           <Card className="flex-1 flex flex-col">
                               <CardHeader><CardTitle>Assets to Send</CardTitle></CardHeader>
                               <CardContent className="flex-1 overflow-y-auto">
                                   {roster.map(p => <div key={p.id} className="flex items-center gap-2"><Checkbox id={`send-${p.id}`}/> <Label htmlFor={`send-${p.id}`}>{p.name}</Label></div>)}
                               </CardContent>
                           </Card>
                        </div>
                         <Card className="flex flex-col">
                           <CardHeader><CardTitle>Assets to Receive</CardTitle></CardHeader>
                             <CardContent className="flex-1 overflow-y-auto">
                                 <p className="text-muted-foreground">Select a team to see their players.</p>
                             </CardContent>
                         </Card>
                     </div>
                     <DialogFooter>
                        <Button>Submit Proposal</Button>
                     </DialogFooter>
                </DialogContent>
            </Dialog>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                    <CardHeader><CardTitle>My Trade Block</CardTitle></CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader><TableRow><TableHead>On Block</TableHead><TableHead>Player</TableHead></TableRow></TableHeader>
                            <TableBody>
                                {roster.map(p => (
                                    <TableRow key={p.id}>
                                        <TableCell>
                                            <Checkbox 
                                                checked={tradeBlock.has(p.id)}
                                                onCheckedChange={(checked) => handleBlockChange(p.id, !!checked)}
                                            />
                                        </TableCell>
                                        <TableCell>{p.name}</TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader><CardTitle>League-Wide Trade Block</CardTitle></CardHeader>
                    <CardContent>
                         <Table>
                            <TableHeader><TableRow><TableHead>Player</TableHead><TableHead>Team</TableHead></TableRow></TableHeader>
                            <TableBody>
                                {Array.from(tradeBlock).map(playerId => {
                                     const player = roster.find(p => p.id === playerId);
                                     if (!player) return null;
                                     const team = findTeam(player.teamId);
                                     return (
                                         <TableRow key={playerId}>
                                             <TableCell>{player.name}</TableCell>
                                             <TableCell>{team?.name}</TableCell>
                                         </TableRow>
                                     )
                                })}
                                {tradeBlock.size === 0 && (
                                    <TableRow>
                                        <TableCell colSpan={2} className="text-center text-muted-foreground">No players on the block.</TableCell>
                                    </TableRow>
                                )}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader><CardTitle>Incoming Offers</CardTitle></CardHeader>
                     <CardContent>
                         <div className="text-center text-muted-foreground py-4">No incoming offers.</div>
                         {/* Example offer: */}
                         {/* <Card><CardContent className="p-4">From RANGERS for PLAYER <div className="flex gap-2 mt-2"><Button size="sm">Accept</Button><Button size="sm" variant="destructive">Reject</Button></div></CardContent></Card> */}
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader><CardTitle>Outgoing Offers</CardTitle></CardHeader>
                     <CardContent>
                        <div className="text-center text-muted-foreground py-4">No outgoing offers.</div>
                         {/* <Card><CardContent className="p-4">To LEAFS for OTHER_PLAYER <Badge>Pending</Badge></CardContent></Card> */}
                    </CardContent>
                </Card>
            </div>
        </div>
    )
};

const WaiverWireCard = ({player, teamId, onClaim}: {player: InjuredPlayer, teamId: string, onClaim: (player: InjuredPlayer, isReclaim: boolean) => void}) => {
    const { findTeam } = useAuth();
    const [timeLeft, setTimeLeft] = useState('');
    const [status, setStatus] = useState<'reclaim' | 'claim' | 'cleared'>('reclaim');

    useEffect(() => {
        const interval = setInterval(() => {
            const now = new Date().getTime();
            const waivedAt = player.waiverTimestamp.getTime();
            const elapsedSeconds = (now - waivedAt) / 1000;
            
            const reclaimPeriod = 30 * 60; // 30 minutes
            const claimPeriod = reclaimPeriod + (8 * 60 * 60); // 8 hours after reclaim

            if (elapsedSeconds < reclaimPeriod) {
                setStatus('reclaim');
                const secondsRemaining = Math.round(reclaimPeriod - elapsedSeconds);
                setTimeLeft(`Reclaim: ${Math.floor(secondsRemaining / 60)}m ${secondsRemaining % 60}s`);
            } else if (elapsedSeconds < claimPeriod) {
                setStatus('claim');
                const secondsRemaining = Math.round(claimPeriod - elapsedSeconds);
                const hours = Math.floor(secondsRemaining / 3600);
                const minutes = Math.floor((secondsRemaining % 3600) / 60);
                setTimeLeft(`Claim: ${hours}h ${minutes}m`);
            } else {
                setStatus('cleared');
                setTimeLeft('Cleared Waivers');
                clearInterval(interval);
            }
        }, 1000);

        return () => clearInterval(interval);
    }, [player]);

    const originalTeam = findTeam(player.originalTeamId);

    const canReclaim = teamId === player.originalTeamId && status === 'reclaim';
    const canClaim = teamId !== player.originalTeamId && status === 'claim';

    return (
        <Card>
           <CardHeader>
               <CardTitle className="text-lg">{player.name}</CardTitle>
               <CardDescription>Waived by: {originalTeam?.name}</CardDescription>
           </CardHeader>
           <CardContent><p>Time Left: {timeLeft}</p></CardContent>
           <CardFooter>
               {canReclaim && <Button onClick={() => onClaim(player, true)}>Reclaim</Button>}
               {canClaim && <Button onClick={() => onClaim(player, false)}>Claim Player</Button>}
               {status === 'cleared' && <Button disabled>Cleared</Button>}
           </CardFooter>
       </Card>
    )
}


const WaiversTab = ({ roster, teamId }: { roster: Player[], teamId: string }) => {
    const {waiverList, setWaiverList, teamPlayers, setTeamPlayers} = useAuth();

    const handleWaivePlayer = (player: Player) => {
        const waivedPlayer: InjuredPlayer = {
            ...player,
            waiverTimestamp: new Date(),
            originalTeamId: teamId,
            injuryReason: '',
            returnDate: '',
            irSince: new Date()
        };
        setWaiverList(prev => [...prev, waivedPlayer]);
        setTeamPlayers(prev => prev.filter(p => p.id !== player.id));
        toast({ title: "Player Waived", description: `${player.name} has been placed on waivers.` });
    }

    const handleClaimPlayer = (player: InjuredPlayer, isReclaim: boolean) => {
        setWaiverList(prev => prev.filter(p => p.id !== player.id));
        
        if (isReclaim) {
             setTeamPlayers(prev => [...prev, player as Player]);
             toast({ title: "Player Reclaimed", description: `${player.name} has been reclaimed.` });
        } else {
            // In a real app, you'd check waiver priority. Here we just add them.
            setTeamPlayers(prev => [...prev, {...player, teamId: teamId}]);
            toast({ title: "Player Claimed", description: `${player.name} has been claimed and added to your roster.` });
        }
    }

    return (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
                <CardHeader>
                    <CardTitle>Place Player on Waivers</CardTitle>
                    <CardDescription>Cap Space: $12,345,678</CardDescription>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader><TableRow><TableHead>Player</TableHead><TableHead className="text-right">Action</TableHead></TableRow></TableHeader>
                        <TableBody>
                            {teamPlayers.map(p => <TableRow key={p.id}><TableCell>{p.name}</TableCell><TableCell className="text-right"><Button variant="destructive" size="sm" onClick={() => handleWaivePlayer(p)}>Waive</Button></TableCell></TableRow>)}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle>Waiver Wire</CardTitle></CardHeader>
                <CardContent className="space-y-4">
                     {waiverList.map(player => (
                         <WaiverWireCard key={player.id} player={player} teamId={teamId} onClaim={handleClaimPlayer} />
                     ))}
                     {waiverList.length === 0 && <p className="text-muted-foreground text-center py-8">Waiver wire is empty.</p>}
                </CardContent>
            </Card>
        </div>
    )
}

const LineupsTab = ({ schedule, roster, findTeam }: { schedule: Match[], roster: Player[], findTeam: (id: string) => Team | undefined }) => {
    const upcomingGames = schedule.filter(m => m.status === 'scheduled');

    const handleSaveLineup = (gameId: string) => {
        toast({ title: "Lineup Saved", description: `Lineup for game vs ${findTeam(schedule.find(s=>s.id === gameId)?.awayTeamId || '')?.name} has been saved.` });
    };
    
    return (
        <div className="space-y-6">
            {upcomingGames.map(game => (
                <Card key={game.id}>
                    <CardHeader>
                        <CardTitle>Lineup vs {findTeam(game.awayTeamId)?.name}</CardTitle>
                        <CardDescription>Date: {game.date.toLocaleDateString()}</CardDescription>
                    </CardHeader>
                    <CardContent className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                       {['LW', 'C', 'RW', 'LD', 'RD', 'G'].map(pos => (
                           <div key={pos} className="space-y-2">
                               <Label>{pos}</Label>
                               <Select>
                                   <SelectTrigger><SelectValue placeholder="Select..."/></SelectTrigger>
                                   <SelectContent>
                                       {roster.filter(p => p.position === pos).map(p => (
                                           <SelectItem key={p.id} value={p.id}>{p.name}</SelectItem>
                                       ))}
                                   </SelectContent>
                               </Select>
                           </div>
                       ))}
                    </CardContent>
                    <CardFooter>
                        <Button onClick={() => handleSaveLineup(game.id)}>Save Lineup</Button>
                    </CardFooter>
                </Card>
            ))}
             {upcomingGames.length === 0 && (
                 <Card>
                    <CardContent className="p-8 text-center text-muted-foreground">
                        No upcoming games to set a lineup for.
                    </CardContent>
                </Card>
            )}
        </div>
    )
}


const ContractsTab = ({ roster, onOffer }: { roster: Player[], onOffer: (offer: Offer) => void }) => {
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);

    const openDialog = (player: Player) => {
        setSelectedPlayer(player);
        setIsDialogOpen(true);
    };

    const closeDialog = () => {
        setIsDialogOpen(false);
        setSelectedPlayer(null);
    };

    const handleOfferExtension = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (!selectedPlayer) return;

        const formData = new FormData(e.currentTarget);
        const salary = parseFloat(formData.get('salary') as string);
        const seasons = parseInt(formData.get('seasons') as string);
        const hasTradeClause = (formData.get('tradeClause') as string) === 'on';

        const newOffer: Offer = {
            id: `offer-${Date.now()}`,
            playerName: selectedPlayer.name,
            salary,
            seasons,
            hasTradeClause,
            status: 'Pending'
        };
        onOffer(newOffer);
        toast({ title: "Extension Offered", description: `An extension has been offered to ${selectedPlayer.name}.` });
        closeDialog();
    };

    return (
        <Card>
            <CardHeader><CardTitle>Expiring Contracts</CardTitle></CardHeader>
            <CardContent>
                <Table>
                    <TableHeader><TableRow><TableHead>Player</TableHead><TableHead className='text-right'>Action</TableHead></TableRow></TableHeader>
                    <TableBody>
                        {roster.slice(0, 5).map(p => (
                            <TableRow key={p.id}>
                                <TableCell>{p.name}</TableCell>
                                <TableCell className='text-right'>
                                    <Button size="sm" onClick={() => openDialog(p)}>Offer Extension</Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
             <Dialog open={isDialogOpen} onOpenChange={(isOpen) => !isOpen && closeDialog()}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Offer Extension to {selectedPlayer?.name}</DialogTitle>
                    </DialogHeader>
                    <form onSubmit={handleOfferExtension} className="space-y-4">
                        <div><Label htmlFor="salary">Salary (in season millions)</Label><Input id="salary" name="salary" type="number" step="0.1" defaultValue="5.0" /></div>
                        <div><Label htmlFor="seasons">Seasons</Label><Input id="seasons" name="seasons" type="number" defaultValue="3" /></div>
                        <div className="flex items-center space-x-2">
                            <Checkbox id="tradeClause" name="tradeClause" />
                            <Label htmlFor="tradeClause">No-Trade Clause</Label>
                        </div>
                        <DialogFooter>
                             <Button variant="outline" type="button" onClick={closeDialog}>Cancel</Button>
                            <Button type="submit">Submit Offer</Button>
                        </DialogFooter>
                    </form>
                </DialogContent>
            </Dialog>
        </Card>
    );
}

const SigningsTab = ({ offers }: { offers: Offer[] }) => (
     <Card>
        <CardHeader><CardTitle>Free Agent & Extension Offers</CardTitle></CardHeader>
        <CardContent>
            <Table>
                <TableHeader><TableRow><TableHead>Player</TableHead><TableHead>Offer</TableHead><TableHead>NTC</TableHead><TableHead>Status</TableHead></TableRow></TableHeader>
                <TableBody>
                    {offers.map(offer => (
                         <TableRow key={offer.id}>
                            <TableCell>{offer.playerName}</TableCell>
                            <TableCell>${offer.salary}M x {offer.seasons} Years</TableCell>
                            <TableCell>{offer.hasTradeClause ? 'Yes' : 'No'}</TableCell>
                            <TableCell><Badge>{offer.status}</Badge></TableCell>
                        </TableRow>
                    ))}
                    {offers.length === 0 && (
                        <TableRow>
                            <TableCell colSpan={4} className="text-center text-muted-foreground">No pending offers.</TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>
        </CardContent>
    </Card>
)

const LogStatsDialogContent = ({ match, homeTeam, awayTeam, players }: { match: Match; homeTeam?: Team; awayTeam?: Team; players: Player[] }) => {
    const handleLogStats = (e: React.FormEvent) => {
        e.preventDefault();
        toast({ title: "Stats Logged", description: "Game stats have been submitted." });
    };

    if (!homeTeam || !awayTeam) return null;

    const homeSkaters = players.filter(p => p.teamId === homeTeam.id && p.position !== 'G');
    const awaySkaters = players.filter(p => p.teamId === awayTeam.id && p.position !== 'G');
    const homeGoalies = players.filter(p => p.teamId === homeTeam.id && p.position === 'G');
    const awayGoalies = players.filter(p => p.teamId === awayTeam.id && p.position === 'G');
    
    const skaterHeaders = ['Pos', 'G', 'A', 'PTS', '+/-', 'PIM', 'S', 'HIT', 'BLK', 'GVA', 'TKA', 'INT', 'FOW', 'FOL', 'FO%', 'PassCom', 'PassAtt', 'PDraws', 'PPG', 'TWP', 'TOI'];
    const goalieHeaders = ['Shots', 'Saves', 'GA', 'Save %', 'GAA', 'TOI'];
    
    const SkaterTable = ({skaters}: {skaters: Player[]}) => (
        <Card>
            <CardContent className="p-2">
                <ScrollArea className="w-full whitespace-nowrap">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead className="sticky left-0 bg-background z-10">Player</TableHead>
                                {skaterHeaders.map((h) => <TableHead key={h}>{h}</TableHead>)}
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {skaters.map(p => (
                                <TableRow key={p.id}>
                                    <TableCell className="min-w-[150px] sticky left-0 bg-background z-10 font-medium">{p.name}</TableCell>
                                    <TableCell>{p.position}</TableCell>
                                    {skaterHeaders.slice(1).map(h => <TableCell key={`${p.id}-${h}`}><Input className="h-8 w-14 text-center p-1" type="text" /></TableCell>)}
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                    <ScrollBar orientation="horizontal" />
                </ScrollArea>
            </CardContent>
        </Card>
    )

    const GoalieTable = ({goalies}: {goalies: Player[]}) => (
        <Card>
            <CardContent className="p-2">
                <ScrollArea className="w-full whitespace-nowrap">
                    <Table>
                        <TableHeader>
                             <TableRow>
                                <TableHead className="sticky left-0 bg-background z-10">Player</TableHead>
                                {goalieHeaders.map((h) => <TableHead key={h}>{h}</TableHead>)}
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {goalies.map(p => (
                                <TableRow key={p.id}>
                                    <TableCell className="min-w-[150px] sticky left-0 bg-background z-10 font-medium">{p.name}</TableCell>
                                    {goalieHeaders.map(h => <TableCell key={`${p.id}-${h}`}><Input className="h-8 w-16 text-center" type="text" /></TableCell>)}
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                    <ScrollBar orientation="horizontal" />
                </ScrollArea>
            </CardContent>
        </Card>
    )

    return (
        <DialogContent className="max-w-7xl h-[90vh]">
            <DialogHeader>
                <DialogTitle>Log Game Stats: {awayTeam.name} @ {homeTeam.name}</DialogTitle>
                <DialogDescription>Enter statistics for the completed game.</DialogDescription>
            </DialogHeader>
            <form onSubmit={handleLogStats} className="space-y-4 h-full flex flex-col">
                <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-1">
                        <Label>{awayTeam.name} Score</Label>
                        <Input type="number" defaultValue={match.awayScore || 0}/>
                    </div>
                    <div className="space-y-1">
                        <Label>{homeTeam.name} Score</Label>
                        <Input type="number" defaultValue={match.homeScore || 0}/>
                    </div>
                </div>
                <div className="flex-grow overflow-hidden">
                    <Tabs defaultValue="away_skaters" className="h-full flex flex-col">
                        <TabsList>
                            <TabsTrigger value="away_skaters">{awayTeam.name} Skaters</TabsTrigger>
                            <TabsTrigger value="away_goalies">{awayTeam.name} Goalies</TabsTrigger>
                            <TabsTrigger value="home_skaters">{homeTeam.name} Skaters</TabsTrigger>
                            <TabsTrigger value="home_goalies">{homeTeam.name} Goalies</TabsTrigger>
                        </TabsList>
                        <TabsContent value="away_skaters" className="mt-4 flex-grow"><SkaterTable skaters={awaySkaters} /></TabsContent>
                        <TabsContent value="away_goalies" className="mt-4 flex-grow"><GoalieTable goalies={awayGoalies} /></TabsContent>
                        <TabsContent value="home_skaters" className="mt-4 flex-grow"><SkaterTable skaters={homeSkaters} /></TabsContent>
                        <TabsContent value="home_goalies" className="mt-4 flex-grow"><GoalieTable goalies={homeGoalies} /></TabsContent>
                    </Tabs>
                </div>
                <DialogFooter className="pt-4 border-t">
                    <Button type="submit">Submit Final Stats</Button>
                </DialogFooter>
            </form>
        </DialogContent>
    )
}

const ScheduleTab = ({ schedule, players, findTeam }: { schedule: Match[], players: Player[], findTeam: (id: string) => any }) => {
    
    return (
        <Card>
            <CardHeader><CardTitle>Upcoming Schedule</CardTitle></CardHeader>
            <CardContent className="space-y-4">
                {schedule.filter(m => m.status === 'scheduled').map(m => {
                    const homeTeam = findTeam(m.homeTeamId);
                    const awayTeam = findTeam(m.awayTeamId);
                    return (
                        <div key={m.id} className="flex justify-between items-center p-2 bg-muted rounded-md">
                            <div>
                                 <p>vs. {findTeam(m.awayTeamId)?.name}</p>
                                 <p className="text-xs text-muted-foreground">{m.date.toLocaleString()}</p>
                            </div>
                             <div className='flex gap-2'>
                                <Dialog>
                                    <DialogTrigger asChild>
                                        <Button variant="outline" size="sm">View Lineups</Button>
                                    </DialogTrigger>
                                     <DialogContent className="max-w-4xl">
                                        <DialogHeader>
                                            <DialogTitle className="flex items-center gap-2"><Users/>Match Lineups</DialogTitle>
                                            <DialogDescription>{awayTeam.name} @ {homeTeam.name}</DialogDescription>
                                        </DialogHeader>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                                            <Card>
                                                <CardHeader><CardTitle className="text-lg">{awayTeam.city} {awayTeam.name}</CardTitle></CardHeader>
                                                <CardContent>
                                                    <Table>
                                                        <TableHeader><TableRow><TableHead>Position</TableHead><TableHead>Player</TableHead></TableRow></TableHeader>
                                                        <TableBody>{players.filter(p => p.teamId === awayTeam.id).map(player => (<TableRow key={player.id}><TableCell>{player.position}</TableCell><TableCell>{player.name}</TableCell></TableRow>))}</TableBody>
                                                    </Table>
                                                </CardContent>
                                            </Card>
                                            <Card>
                                                <CardHeader><CardTitle className="text-lg">{homeTeam.city} {homeTeam.name}</CardTitle></CardHeader>
                                                <CardContent>
                                                    <Table>
                                                        <TableHeader><TableRow><TableHead>Position</TableHead><TableHead>Player</TableHead></TableRow></TableHeader>
                                                        <TableBody>{players.filter(p => p.teamId === homeTeam.id).map(player => (<TableRow key={player.id}><TableCell>{player.position}</TableCell><TableCell>{player.name}</TableCell></TableRow>))}</TableBody>
                                                    </Table>
                                                </CardContent>
                                            </Card>
                                        </div>
                                    </DialogContent>
                               </Dialog>
                                <Dialog>
                                    <DialogTrigger asChild>
                                        <Button variant="outline" size="sm">Log Stats</Button>
                                    </DialogTrigger>
                                     <LogStatsDialogContent match={m} homeTeam={homeTeam} awayTeam={awayTeam} players={players}/>
                                </Dialog>
                            </div>
                        </div>
                    )
                })}
            </CardContent>
        </Card>
    )
}


type ChatMessage = { sender: string; content: string; avatarUrl?: string; isUser: boolean; };

const ChatComponent = ({ title }: { title: string }) => {
    const { user } = useAuth();
    const [messages, setMessages] = useState<ChatMessage[]>([]);
    const [input, setInput] = useState('');
    const scrollAreaRef = React.useRef<HTMLDivElement>(null);

    const handleSendMessage = (e: React.FormEvent) => {
        e.preventDefault();
        if (!input.trim() || !user) return;
        const newMessage: ChatMessage = { sender: user.name, content: input, isUser: true, avatarUrl: user.avatarUrl };
        setMessages(prev => [...prev, newMessage]);
        setInput('');
    };
    
    useEffect(() => {
        if (scrollAreaRef.current) {
            scrollAreaRef.current.scrollTo({ top: scrollAreaRef.current.scrollHeight, behavior: 'smooth' });
        }
    }, [messages]);

    return (
        <Card className="flex flex-col h-full">
            <CardHeader>
                <CardTitle className="font-headline flex items-center gap-2 text-lg"><Users />{title}</CardTitle>
            </CardHeader>
            <CardContent className="flex-1 overflow-hidden">
                <ScrollArea className="h-full pr-4" ref={scrollAreaRef}>
                    <div className="space-y-4">
                        {messages.map((message, index) => (
                            <div key={index} className={cn("flex items-start gap-3", message.isUser ? 'justify-end' : 'justify-start')}>
                                {!message.isUser && (
                                    <Avatar className="h-8 w-8"><AvatarImage src={message.avatarUrl} /><AvatarFallback>{message.sender.substring(0,2)}</AvatarFallback></Avatar>
                                )}
                                <div className={cn("rounded-lg px-4 py-2 max-w-sm", message.isUser ? 'bg-primary text-primary-foreground' : 'bg-muted')}>
                                    <p className="text-sm">{message.content}</p>
                                </div>
                                {message.isUser && user && (
                                    <Avatar className="h-8 w-8"><AvatarImage src={user.avatarUrl} /><AvatarFallback>{user.name?.[0] || 'U'}</AvatarFallback></Avatar>
                                )}
                            </div>
                        ))}
                         {messages.length === 0 && <p className="text-center text-muted-foreground py-8">No messages yet.</p>}
                    </div>
                </ScrollArea>
            </CardContent>
            <CardFooter className="border-t pt-4">
                <form onSubmit={handleSendMessage} className="flex items-center gap-2 w-full">
                    <Input value={input} onChange={(e) => setInput(e.target.value)} placeholder="Type message..." />
                    <Button type="submit" size="icon"><Send /></Button>
                </form>
            </CardFooter>
        </Card>
    );
}

const ChatTab = () => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <ChatComponent title="Team Chat"/>
        <ChatComponent title="Management Chat"/>
    </div>
)

const mockDraftOrder = [
    { pick: 1, teamId: "team-17", selection: null },
    { pick: 2, teamId: "team-4", selection: null },
    { pick: 3, teamId: "team-5", selection: null },
    { pick: 4, teamId: "team-6", selection: null },
];

const ChelStatsDialog = ({ gamertag, stats, open, onOpenChange }: { gamertag: string, stats: LookupChelStatsOutput, open: boolean, onOpenChange: (open: boolean) => void }) => {
    const { skaterStats, goalieStats } = stats;
    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>CHEL Stats for {gamertag}</DialogTitle>
                </DialogHeader>
                <Tabs defaultValue="skater">
                    <TabsList className="grid w-full grid-cols-2">
                        <TabsTrigger value="skater">Skater Stats</TabsTrigger>
                        <TabsTrigger value="goalie">Goalie Stats</TabsTrigger>
                    </TabsList>
                    <TabsContent value="skater" className="mt-4">
                        <Table>
                            <TableBody>
                                <TableRow><TableCell>Games Played</TableCell><TableCell className="text-right font-mono">{skaterStats.gamesPlayed}</TableCell></TableRow>
                                <TableRow><TableCell>Goals</TableCell><TableCell className="text-right font-mono">{skaterStats.goals}</TableCell></TableRow>
                                <TableRow><TableCell>Assists</TableCell><TableCell className="text-right font-mono">{skaterStats.assists}</TableCell></TableRow>
                                <TableRow><TableCell>Points</TableCell><TableCell className="text-right font-mono">{skaterStats.points}</TableCell></TableRow>
                                <TableRow><TableCell>+/-</TableCell><TableCell className="text-right font-mono">{skaterStats.plusMinus}</TableCell></TableRow>
                                <TableRow><TableCell>PIM</TableCell><TableCell className="text-right font-mono">{skaterStats.penaltyMinutes}</TableCell></TableRow>
                                <TableRow><TableCell>Hits</TableCell><TableCell className="text-right font-mono">{skaterStats.hits}</TableCell></TableRow>
                                <TableRow><TableCell>Blocks</TableCell><TableCell className="text-right font-mono">{skaterStats.blocks}</TableCell></TableRow>
                                <TableRow><TableCell>Shots on Goal</TableCell><TableCell className="text-right font-mono">{skaterStats.sog}</TableCell></TableRow>
                            </TableBody>
                        </Table>
                    </TabsContent>
                    <TabsContent value="goalie" className="mt-4">
                        <Table>
                             <TableBody>
                                <TableRow><TableCell>Games Played</TableCell><TableCell className="text-right font-mono">{goalieStats.gamesPlayed}</TableCell></TableRow>
                                <TableRow><TableCell>Wins</TableCell><TableCell className="text-right font-mono">{goalieStats.wins}</TableCell></TableRow>
                                <TableRow><TableCell>Losses</TableCell><TableCell className="text-right font-mono">{goalieStats.losses}</TableCell></TableRow>
                                <TableRow><TableCell>OT Losses</TableCell><TableCell className="text-right font-mono">{goalieStats.otLosses}</TableCell></TableRow>
                                <TableRow><TableCell>GAA</TableCell><TableCell className="text-right font-mono">{goalieStats.gaa.toFixed(2)}</TableCell></TableRow>
                                <TableRow><TableCell>SV%</TableCell><TableCell className="text-right font-mono">{goalieStats.svPct.toFixed(3)}</TableCell></TableRow>
                            </TableBody>
                        </Table>
                    </TabsContent>
                </Tabs>
            </DialogContent>
        </Dialog>
    );
};


const DraftTab = ({draftProspects, team, findTeam}: {draftProspects: DraftProspect[], team: any, findTeam: (id: string) => any}) => {
    const [isSearching, setIsSearching] = useState(false);
    const [gamertag, setGamertag] = useState("");
    const [lookupResults, setLookupResults] = useState<LookupChelStatsOutput | null>(null);
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    
    const handleDraftPlayer = (prospect: DraftProspect) => {
        toast({
            title: "Player Drafted!",
            description: `${prospect.name} has been drafted by the ${team.name}.`
        })
    }

    const handleStatsLookup = async (e: React.FormEvent) => {
        e.preventDefault();
        const formData = new FormData(e.target as HTMLFormElement);
        const currentGamertag = formData.get('gamertag') as string;
        if (!currentGamertag) return;

        setGamertag(currentGamertag);
        setIsSearching(true);
        setLookupResults(null);
        try {
            const results = await lookupChelStats({ gamertag: currentGamertag });
            setLookupResults(results);
            setIsDialogOpen(true);
        } catch(err) {
            toast({
                title: "Error",
                description: "Could not look up stats for this player.",
                variant: "destructive"
            });
            console.error(err);
        } finally {
            setIsSearching(false);
        }
    }
    
    return (
        <div className="space-y-6">
            {lookupResults && (
                <ChelStatsDialog
                    gamertag={gamertag}
                    stats={lookupResults}
                    open={isDialogOpen}
                    onOpenChange={setIsDialogOpen}
                />
            )}
             <Card>
                <CardHeader>
                    <CardTitle className="font-headline text-xl flex items-center gap-2">
                        <Clock />
                        ON THE CLOCK
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <Carousel opts={{ align: "start", loop: false }} className="w-full">
                        <CarouselContent>
                            {mockDraftOrder.map((pick, index) => {
                                const teamOnClock = findTeam(pick.teamId);
                                if (!teamOnClock) return null;
                                return (
                                    <CarouselItem key={pick.pick} className="md:basis-1/2 lg:basis-1/3">
                                        <div className={cn("p-1", index === 0 ? "border-primary border-2 rounded-lg" : "")}>
                                            <Card className={cn(index === 0 ? "border-0" : "")}>
                                                <CardHeader className="p-4">
                                                    <CardDescription>Pick #{pick.pick}</CardDescription>
                                                    <CardTitle className="text-xl">{teamOnClock.city} {teamOnClock.name}</CardTitle>
                                                </CardHeader>
                                                <CardContent className="p-4 pt-0">
                                                    <Image data-ai-hint="logo" src={teamOnClock.logoUrl} alt={teamOnClock.name} width={60} height={60} />
                                                </CardContent>
                                            </Card>
                                        </div>
                                    </CarouselItem>
                                )
                            })}
                        </CarouselContent>
                        <CarouselPrevious className="-left-4" />
                        <CarouselNext className="-right-4" />
                    </Carousel>
                </CardContent>
            </Card>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[75vh]">
                <div className="lg:col-span-2">
                    <Card className="h-full">
                        <CardHeader>
                            <CardTitle>Draft Board</CardTitle>
                            <CardDescription>Top prospects available in the upcoming draft.</CardDescription>
                        </CardHeader>
                        <CardContent>
                            <ScrollArea className="h-[60vh]">
                                <Table>
                                    <TableHeader>
                                        <TableRow>
                                            <TableHead>Rank</TableHead>
                                            <TableHead>Name</TableHead>
                                            <TableHead>Position</TableHead>
                                            <TableHead className="text-right">Action</TableHead>
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        {draftProspects.map(prospect => (
                                            <TableRow key={prospect.id}>
                                                <TableCell>{prospect.rank}</TableCell>
                                                <TableCell>{prospect.name}</TableCell>
                                                <TableCell>{prospect.position}</TableCell>
                                                <TableCell className="text-right">
                                                    <Button size="sm" onClick={() => handleDraftPlayer(prospect)}>Draft</Button>
                                                </TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                            </ScrollArea>
                        </CardContent>
                    </Card>
                </div>
                <div className="flex flex-col gap-6">
                    <Card>
                        <CardHeader>
                            <CardTitle>CHEL Stats Lookup</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <form onSubmit={handleStatsLookup} className="flex gap-2">
                                <Input name="gamertag" placeholder="Enter Gamertag..." disabled={isSearching} />
                                <Button type="submit" size="icon" disabled={isSearching}>
                                    {isSearching ? <Loader2 className="animate-spin"/> : <Search />}
                                </Button>
                            </form>
                        </CardContent>
                    </Card>
                    <div className="flex-grow">
                        <ChatComponent title="Team Chat" />
                    </div>
                </div>
            </div>
        </div>
    )
}


export default function ManagementDashboardClient() {
    const { user, findTeam, teamPlayers, setTeamPlayers, teams, mockSchedule, draftProspects, contractOffers, addContractOffer } = useAuth();

    if (!user || user.role !== 'management' || !user.teamId) {
        return (
            <div className="container mx-auto p-4 text-center">
                <p className="text-destructive">You do not have permission to view this page.</p>
            </div>
        )
    }

    const team = findTeam(user.teamId);
    if (!team) {
         return <div className="container mx-auto p-4 text-center"><p>Could not find your team.</p></div>
    }

    const handleNewOffer = (offer: Offer) => {
        addContractOffer(offer);
    }

    return (
        <div className="container mx-auto p-4 sm:p-6 lg:p-8">
            <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center mb-8">
                <Image data-ai-hint="logo" src={team.logoUrl} alt={team.name} width={80} height={80} className="rounded-md" />
                <div>
                    <h1 className="text-4xl font-headline font-bold">{team.city} {team.name}</h1>
                    <p className="text-muted-foreground">Management Dashboard</p>
                </div>
            </div>
            
            <Tabs defaultValue="roster" className="w-full">
                <TabsList className="grid w-full h-auto grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-11">
                    <TabsTrigger value="roster">Roster</TabsTrigger>
                    <TabsTrigger value="injured-reserve">IR</TabsTrigger>
                    <TabsTrigger value="availability">Availability</TabsTrigger>
                    <TabsTrigger value="schedule">Schedule</TabsTrigger>
                    <TabsTrigger value="lineups">Lineups</TabsTrigger>
                    <TabsTrigger value="trades">Trades</TabsTrigger>
                    <TabsTrigger value="contracts">Contracts</TabsTrigger>
                    <TabsTrigger value="waivers">Waivers</TabsTrigger>
                    <TabsTrigger value="signings">Signings</TabsTrigger>
                    <TabsTrigger value="draft">Draft</TabsTrigger>
                    <TabsTrigger value="chat">Chat</TabsTrigger>
                </TabsList>

                <TabsContent value="roster" className="mt-6"><RosterTab roster={teamPlayers} /></TabsContent>
                <TabsContent value="injured-reserve" className="mt-6"><InjuredReserveTab teamPlayers={teamPlayers}/></TabsContent>
                <TabsContent value="availability" className="mt-6"><AvailabilityTab schedule={mockSchedule} roster={teamPlayers} findTeam={findTeam} /></TabsContent>
                <TabsContent value="schedule" className="mt-6"><ScheduleTab schedule={mockSchedule} players={teams.flatMap(t => t.roster)} findTeam={findTeam} /></TabsContent>
                <TabsContent value="lineups" className="mt-6"><LineupsTab schedule={mockSchedule} roster={teamPlayers} findTeam={findTeam} /></TabsContent>
                <TabsContent value="trades" className="mt-6"><TradesTab roster={teamPlayers} teams={teams} userTeamId={user.teamId} /></TabsContent>
                <TabsContent value="contracts" className="mt-6"><ContractsTab roster={teamPlayers} onOffer={handleNewOffer} /></TabsContent>
                <TabsContent value="waivers" className="mt-6"><WaiversTab roster={teamPlayers} teamId={user.teamId}/></TabsContent>
                <TabsContent value="signings" className="mt-6"><SigningsTab offers={contractOffers} /></TabsContent>
                <TabsContent value="draft" className="mt-6"><DraftTab draftProspects={draftProspects} team={team} findTeam={findTeam} /></TabsContent>
                <TabsContent value="chat" className="mt-6"><ChatTab /></TabsContent>
            </Tabs>
        </div>
    );
}
```

---

**File: `src/components/pages/matches-client.tsx`**
```tsx
'use client';

import React from 'react';
import Image from 'next/image';
import {useAuth} from '@/hooks/use-auth';
import {Card, CardContent, CardHeader, CardTitle} from '@/components/ui/card';
import {Badge} from '@/components/ui/badge';
import {Table, TableBody, TableCell, TableHead, TableHeader, TableRow} from '@/components/ui/table';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Users, BarChart2 } from 'lucide-react';
import type { Player, Team, PlayerStats, GoalieStats } from '@/lib/mock-data-types';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '../ui/separator';

const LineupsView = ({ homeTeam, awayTeam, players }: { homeTeam?: Team, awayTeam?: Team, players: Player[] }) => {
     if (!homeTeam || !awayTeam) {
        return <p>Team data not found.</p>;
    }

    const getTeamLineup = (teamId: string) => {
        const teamPlayers = players.filter(p => p.teamId === teamId);
        const positions: Player['position'][] = ['LW', 'C', 'RW', 'LD', 'RD', 'G'];
        return positions.map(pos => {
            const player = teamPlayers.find(p => p.position === pos);
            return {
                id: player ? player.id : `${teamId}-${pos}`,
                name: player ? player.name : 'Not Set',
                position: pos,
            };
        });
    };

    const homeLineup = getTeamLineup(homeTeam.id);
    const awayLineup = getTeamLineup(awayTeam.id);

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
            <Card>
                <CardHeader>
                    <CardTitle className="text-lg">{awayTeam.city} {awayTeam.name}</CardTitle>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader><TableRow><TableHead>Position</TableHead><TableHead>Player</TableHead></TableRow></TableHeader>
                        <TableBody>
                            {awayLineup.map(player => (
                                <TableRow key={player.id}><TableCell>{player.position}</TableCell><TableCell>{player.name}</TableCell></TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
                <Card>
                <CardHeader>
                    <CardTitle className="text-lg">{homeTeam.city} {homeTeam.name}</CardTitle>
                </CardHeader>
                <CardContent>
                    <Table>
                            <TableHeader><TableRow><TableHead>Position</TableHead><TableHead>Player</TableHead></TableRow></TableHeader>
                        <TableBody>
                            {homeLineup.map(player => (
                                <TableRow key={player.id}><TableCell>{player.position}</TableCell><TableCell>{player.name}</TableCell></TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
        </div>
    );
};

const StatsView = ({ homeTeam, awayTeam, players }: { homeTeam?: Team, awayTeam?: Team, players: Player[] }) => {
    if (!homeTeam || !awayTeam) {
        return <p>Team data not found.</p>;
    }
    
    const TeamStatsDisplay = ({ team }: { team: Team }) => {
        const teamStats = {
            goals: Math.floor(Math.random() * 5),
            shots: Math.floor(Math.random() * 40) + 20,
            hits: Math.floor(Math.random() * 30) + 10,
            blocks: Math.floor(Math.random() * 20) + 5,
            passing: `${Math.floor(Math.random() * 20) + 75}%`,
            faceoff: `${Math.floor(Math.random() * 20) + 40}%`,
            pim: Math.floor(Math.random() * 10) * 2,
            powerplay: `${Math.floor(Math.random() * 3)}/${Math.floor(Math.random() * 5) + 3}`,
        }

        return (
            <div className="space-y-4">
                <Card>
                    <CardHeader><CardTitle>Team Stats</CardTitle></CardHeader>
                    <CardContent>
                         <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                            <div className="flex justify-between"><span>Goals:</span> <span className="font-bold">{teamStats.goals}</span></div>
                            <div className="flex justify-between"><span>Shots:</span> <span className="font-bold">{teamStats.shots}</span></div>
                            <div className="flex justify-between"><span>Hits:</span> <span className="font-bold">{teamStats.hits}</span></div>
                            <div className="flex justify-between"><span>Blocks:</span> <span className="font-bold">{teamStats.blocks}</span></div>
                            <div className="flex justify-between"><span>Passing %:</span> <span className="font-bold">{teamStats.passing}</span></div>
                            <div className="flex justify-between"><span>Faceoff %:</span> <span className="font-bold">{teamStats.faceoff}</span></div>
                            <div className="flex justify-between"><span>PIM:</span> <span className="font-bold">{teamStats.pim}</span></div>
                            <div className="flex justify-between"><span>Powerplay:</span> <span className="font-bold">{teamStats.powerplay}</span></div>
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardHeader><CardTitle>Player Stats</CardTitle></CardHeader>
                    <CardContent>
                         <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Player</TableHead><TableHead>G</TableHead><TableHead>A</TableHead><TableHead>P</TableHead><TableHead>+/-</TableHead><TableHead>SOG</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {players.filter(p => p.teamId === team.id && p.position !== 'G').map(p => {
                                    const stats = p.stats as PlayerStats;
                                    return (
                                        <TableRow key={p.id}>
                                            <TableCell>{p.name}</TableCell><TableCell>{stats.goals}</TableCell><TableCell>{stats.assists}</TableCell><TableCell>{stats.points}</TableCell><TableCell>{stats.plusMinus}</TableCell><TableCell>{stats.sog}</TableCell>
                                        </TableRow>
                                    )
                                })}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>

                <Card>
                    <CardHeader><CardTitle>Goalie Stats</CardTitle></CardHeader>
                    <CardContent>
                         <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Player</TableHead><TableHead>Saves</TableHead><TableHead>GA</TableHead><TableHead>SV%</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {players.filter(p => p.teamId === team.id && p.position === 'G').map(p => {
                                    const stats = p.stats as GoalieStats;
                                    return (
                                        <TableRow key={p.id}>
                                            <TableCell>{p.name}</TableCell><TableCell>{stats.saves}</TableCell><TableCell>{stats.ga}</TableCell><TableCell>{stats.savePercentage.toFixed(3)}</TableCell>
                                        </TableRow>
                                    )
                                })}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>

            </div>
        )
    }

    return (
         <Tabs defaultValue={awayTeam.id} className="w-full">
            <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value={awayTeam.id}>{awayTeam.name}</TabsTrigger>
                <TabsTrigger value={homeTeam.id}>{homeTeam.name}</TabsTrigger>
            </TabsList>
            <TabsContent value={awayTeam.id} className="mt-4">
                <TeamStatsDisplay team={awayTeam} />
            </TabsContent>
            <TabsContent value={homeTeam.id} className="mt-4">
                 <TeamStatsDisplay team={homeTeam} />
            </TabsContent>
        </Tabs>
    )
};


const MatchDetailsDialogContent = ({ homeTeam, awayTeam, players }: { homeTeam?: Team, awayTeam?: Team, players: Player[] }) => {
    if (!homeTeam || !awayTeam) {
        return <DialogContent><p>Team data not found.</p></DialogContent>;
    }

    return (
        <DialogContent className="max-w-4xl h-[90vh]">
            <DialogHeader>
                <DialogTitle>{awayTeam.name} @ {homeTeam.name}</DialogTitle>
                <DialogDescription>
                    {new Date().toLocaleDateString()}
                </DialogDescription>
            </DialogHeader>
            <div className="flex-grow overflow-y-auto pr-4">
                 <Tabs defaultValue="lineups" className="w-full">
                    <TabsList className="grid w-full grid-cols-2">
                        <TabsTrigger value="lineups"><Users className="mr-2"/>Lineups</TabsTrigger>
                        <TabsTrigger value="stats"><BarChart2 className="mr-2"/>Stats</TabsTrigger>
                    </TabsList>
                    <TabsContent value="lineups">
                        <LineupsView homeTeam={homeTeam} awayTeam={awayTeam} players={players} />
                    </TabsContent>
                    <TabsContent value="stats">
                        <StatsView homeTeam={homeTeam} awayTeam={awayTeam} players={players} />
                    </TabsContent>
                </Tabs>
            </div>
        </DialogContent>
    );
};


export default function MatchesClient() {
  const {recentScores, mockSchedule, teams, players, findTeam} = useAuth();

  const ScoreCard = ({match}: {match: any}) => {
    const homeTeam = teams.find(t => t.id === match.homeTeamId);
    const awayTeam = teams.find(t => t.id === match.awayTeamId);
    return (
      <Card>
        <CardContent className="p-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Image
              data-ai-hint="logo"
              src={awayTeam?.logoUrl || ''}
              alt={awayTeam?.name || ''}
              width={24}
              height={24}
            />
            <span>{awayTeam?.name}</span>
            <span className="font-bold">{match.awayScore}</span>
          </div>
          <div className="flex flex-col items-center gap-1">
             <Badge>Final</Badge>
             <Dialog>
                <DialogTrigger asChild>
                    <Button variant="link" size="sm" className="text-xs">View Details</Button>
                </DialogTrigger>
                <MatchDetailsDialogContent homeTeam={homeTeam} awayTeam={awayTeam} players={players} />
             </Dialog>
          </div>
          <div className="flex items-center gap-2">
            <span className="font-bold">{match.homeScore}</span>
            <span>{homeTeam?.name}</span>
            <Image
              data-ai-hint="logo"
              src={homeTeam?.logoUrl || ''}
              alt={homeTeam?.name || ''}
              width={24}
              height={24}
            />
          </div>
        </CardContent>
      </Card>
    );
  };

  const groupedSchedule = mockSchedule.reduce((acc, match) => {
    const date = match.date.toDateString();
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(match);
    return acc;
  }, {} as Record<string, any[]>);

  return (
    <div className="container mx-auto p-4 space-y-8">
      <section>
        <h2 className="text-2xl font-headline mb-4">Recent Results</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {recentScores.map(match => (
            <ScoreCard key={match.id} match={match} />
          ))}
        </div>
      </section>

      <section>
        <h2 className="text-2xl font-headline mb-4">Full Schedule</h2>
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableBody>
                {Object.entries(groupedSchedule).map(([date, matches]) => (
                  <React.Fragment key={date}>
                    <TableRow>
                      <TableCell colSpan={3} className="font-bold bg-muted">
                        {date}
                      </TableCell>
                    </TableRow>
                    {matches.map(match => {
                      const homeTeam = teams.find(t => t.id === match.homeTeamId);
                      const awayTeam = teams.find(t => t.id === match.awayTeamId);
                      return (
                        <TableRow key={match.id}>
                          <TableCell className="flex items-center gap-2">
                            <Image
                              data-ai-hint="logo"
                              src={awayTeam?.logoUrl || ''}
                              alt={awayTeam?.name || ''}
                              width={24}
                              height={24}
                            />
                            {awayTeam?.name} @{' '}
                            <Image
                              data-ai-hint="logo"
                              src={homeTeam?.logoUrl || ''}
                              alt={homeTeam?.name || ''}
                              width={24}
                              height={24}
                            />
                            {homeTeam?.name}
                          </TableCell>
                          <TableCell className="text-center">
                            {match.date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})}
                          </TableCell>
                           <TableCell className="text-right">
                               <Dialog>
                                    <DialogTrigger asChild>
                                        <Button variant="outline" size="sm">View Details</Button>
                                    </DialogTrigger>
                                    <MatchDetailsDialogContent homeTeam={homeTeam} awayTeam={awayTeam} players={players} />
                               </Dialog>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </React.Fragment>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}
```

---

**File: `src/components/pages/news-client.tsx`**
```tsx
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/use-auth";
import Loader from "@/components/loader";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { generateNewsRecap } from "@/ai/flows/generate-news-recap";
import { toast } from "@/hooks/use-toast";
import { Volume2, PlayCircle } from "lucide-react";

export default function NewsClient() {
    const { teams, isLoading } = useAuth();
    const [selectedEntity, setSelectedEntity] = useState("league");
    const [recap, setRecap] = useState("");
    const [recapTitle, setRecapTitle] = useState("");
    const [isGenerating, setIsGenerating] = useState(true); // Start with true for initial load

    const handleGenerateRecap = async (entityId: string) => {
        setIsGenerating(true);
        setRecap("");
        setRecapTitle("");

        let entityName = "MVHL";
        let entityType: "league" | "team" | "player" = "league";
        let titleName = "MVHL";

        if (entityId !== "league") {
            entityType = "team";
            const team = teams.find(t => t.id === entityId);
            entityName = team?.name || "Unknown Team";
            titleName = `${team?.city} ${team?.name}`;
        }
        
        setRecapTitle(`Weekly Recap: ${titleName}`);
        
        try {
            const result = await generateNewsRecap({
                entityType,
                entityName
            });
            setRecap(result.recap);
        } catch (error) {
            console.error(error);
            toast({
                title: "Error",
                description: "Failed to generate news recap.",
                variant: "destructive",
            });
        } finally {
            setIsGenerating(false);
        }
    };
    
    useEffect(() => {
        // Automatically generate the league recap on initial load
        handleGenerateRecap("league");
    }, []); // Empty dependency array ensures this runs only once on mount

    const handleManualGenerate = () => {
        handleGenerateRecap(selectedEntity);
    }

    const handleTextToSpeech = () => {
        toast({
            title: "Audio Playback",
            description: "Text-to-speech functionality is in development. Stay tuned!",
        });
    }

    if (isLoading && isGenerating && !recap) {
        return <Loader text="Loading News Feed..." />;
    }

    return (
        <div className="container mx-auto max-w-screen-2xl py-8 px-4">
            <div className="text-center mb-8">
                <h1 className="font-headline text-4xl font-bold">News & Analysis</h1>
                <p className="text-muted-foreground mt-2">Your AI-powered source for the latest stories around the league.</p>
            </div>
            
            <Card className="max-w-2xl mx-auto">
                <CardHeader>
                    <CardTitle className="font-headline">Generate a News Recap</CardTitle>
                    <CardDescription>Select an entity to get a personalized weekly news summary generated by AI.</CardDescription>
                </CardHeader>
                <CardContent className="flex flex-col sm:flex-row gap-4">
                    <Select onValueChange={setSelectedEntity} defaultValue="league">
                        <SelectTrigger className="w-full sm:w-[280px]">
                            <SelectValue placeholder="Select an entity..." />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value="league">Entire League</SelectItem>
                            {teams.map(team => (
                                <SelectItem key={team.id} value={team.id}>{team.city} {team.name}</SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                    <Button onClick={handleManualGenerate} disabled={isGenerating} className="w-full sm:w-auto">
                        {isGenerating ? "Generating..." : "Generate Recap"}
                    </Button>
                </CardContent>
            </Card>

            <div className="max-w-4xl mx-auto mt-8">
                {isGenerating && <Loader text="Writing recap..." />}
                {recap && (
                    <Card>
                        <CardHeader>
                            <CardTitle className="font-headline text-2xl">{recapTitle}</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <p className="whitespace-pre-wrap leading-relaxed">{recap}</p>
                        </CardContent>
                        <CardFooter>
                            <Button variant="outline" onClick={handleTextToSpeech}>
                                <PlayCircle className="mr-2 h-4 w-4" />
                                Listen to Recap
                            </Button>
                        </CardFooter>
                    </Card>
                )}
            </div>
        </div>
    );
}
```

---

**File: `src/components/pages/player-dashboard-client.tsx`**
```tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import Loader from '@/components/loader';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { User, BarChart2, Shield, Calendar, Users, ClipboardCheck, Settings, Clock, UserCircle } from 'lucide-react';
import { Player, PlayerStats, GoalieStats, Team } from '@/lib/mock-data-types';
import { Label } from '../ui/label';
import DraftCentralClient from './draft-central-client';
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '../ui/dialog';

const settingsSchema = z.object({
    gamertag: z.string().min(3, "Gamertag must be at least 3 characters."),
    bio: z.string().max(200, "Bio cannot exceed 200 characters.").optional(),
    primaryPosition: z.string(),
    secondaryPosition: z.string().optional(),
});

type SettingsFormValues = z.infer<typeof settingsSchema>;

// Overview Tab Component
const OverviewTab = ({ player, team, nextMatch }: { player: Player, team: any, nextMatch: any }) => {
    const StatsDisplay = () => {
        if (!player.stats) return <p>No stats found for this season.</p>;
        const stats = player.stats;
        if (player.position === 'G') {
            const goalieStats = stats as GoalieStats;
            return (
                <ul className="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                    <li className="flex justify-between"><span>SV%:</span><span className="font-mono font-bold">{goalieStats.savePercentage.toFixed(3)}</span></li>
                    <li className="flex justify-between"><span>GAA:</span><span className="font-mono font-bold">{goalieStats.goalsAgainstAverage.toFixed(2)}</span></li>
                    <li className="flex justify-between"><span>Wins:</span><span className="font-mono font-bold">{goalieStats.wins}</span></li>
                </ul>
            );
        } else {
            const playerStats = stats as PlayerStats;
            return (
                <ul className="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                    <li className="flex justify-between"><span>Goals:</span><span className="font-mono font-bold">{playerStats.goals}</span></li>
                    <li className="flex justify-between"><span>Assists:</span><span className="font-mono font-bold">{playerStats.assists}</span></li>
                    <li className="flex justify-between"><span>Points:</span><span className="font-mono font-bold">{playerStats.points}</span></li>
                </ul>
            );
        }
    };

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Card>
                <CardHeader>
                    <CardTitle className="font-headline flex items-center gap-2">Current Team</CardTitle>
                </CardHeader>
                <CardContent>
                    <ul className="space-y-2 text-sm">
                        <li className="flex justify-between"><span>Team:</span> <span className="font-bold">{team.city} {team.name}</span></li>
                        <li className="flex justify-between"><span>Position:</span> <span className="font-bold">{player.position}</span></li>
                    </ul>
                    {player.bio && <p className="text-sm text-muted-foreground mt-4">{player.bio}</p>}
                </CardContent>
            </Card>
            <Card>
                <CardHeader>
                    <CardTitle className="font-headline flex items-center gap-2">Season Stats</CardTitle>
                </CardHeader>
                <CardContent>
                    <StatsDisplay />
                </CardContent>
            </Card>
            <Card>
                <CardHeader>
                    <CardTitle className="font-headline flex items-center gap-2">Next Game</CardTitle>
                </CardHeader>
                <CardContent>
                    {nextMatch ? (
                         <div className="text-sm">
                            <p>vs {nextMatch.awayTeamName}</p>
                            <p className="text-muted-foreground">{new Date(nextMatch.date).toLocaleString()}</p>
                        </div>
                    ) : (
                        <p className="text-sm text-muted-foreground">No upcoming games.</p>
                    )}
                </CardContent>
            </Card>
        </div>
    );
};

// Settings Tab Component
const SettingsTab = ({ player }: { player: Player }) => {
    const { toast } = useToast();
    const { updateUser } = useAuth();
    
    const form = useForm<SettingsFormValues>({
        resolver: zodResolver(settingsSchema),
        defaultValues: {
            gamertag: player.name || '',
            bio: player.bio || '',
            primaryPosition: player.position || '',
            secondaryPosition: player.secondaryPosition || '',
        },
    });

    const onSubmit = (data: SettingsFormValues) => {
        updateUser(data);
        toast({
            title: "Settings Saved",
            description: "Your profile information has been updated.",
        });
        console.log("Updated Settings:", data);
    };

    // Mock gamertagLastChanged date for disabling the input
    const gamertagLastChanged = new Date();
    gamertagLastChanged.setDate(gamertagLastChanged.getDate() - 15); // Changed 15 days ago
    const daysSinceChange = Math.floor((new Date().getTime() - gamertagLastChanged.getTime()) / (1000 * 3600 * 24));
    const canChangeGamertag = daysSinceChange >= 30;

    return (
        <Card>
            <CardHeader>
                <CardTitle>Account Settings</CardTitle>
            </CardHeader>
            <CardContent>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                        <FormField
                            control={form.control}
                            name="gamertag"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Gamertag</FormLabel>
                                    <FormControl>
                                        <Input placeholder="Your Gamertag" {...field} disabled={!canChangeGamertag} />
                                    </FormControl>
                                    {!canChangeGamertag && (
                                        <FormDescription>
                                            You can change your gamertag in {30 - daysSinceChange} days.
                                        </FormDescription>
                                    )}
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="bio"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Bio</FormLabel>
                                    <FormControl>
                                        <Textarea placeholder="Tell us a little about yourself" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <FormField
                                control={form.control}
                                name="primaryPosition"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Primary Position</FormLabel>
                                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <FormControl>
                                                <SelectTrigger><SelectValue placeholder="Select a position" /></SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                                {['C', 'LW', 'RW', 'LD', 'RD', 'G'].map(pos => <SelectItem key={pos} value={pos}>{pos}</SelectItem>)}
                                            </SelectContent>
                                        </Select>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="secondaryPosition"
                                render={({ field }) => (
                                     <FormItem>
                                        <FormLabel>Secondary Position</FormLabel>
                                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <FormControl>
                                                <SelectTrigger><SelectValue placeholder="Select a position" /></SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                                {['C', 'LW', 'RW', 'LD', 'RD', 'G'].map(pos => <SelectItem key={pos} value={pos}>{pos}</SelectItem>)}
                                            </SelectContent>
                                        </Select>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        </div>
                        <Button type="submit">Save Changes</Button>
                    </form>
                </Form>
            </CardContent>
        </Card>
    );
};

// Availability Tab Component
const AvailabilityTab = ({ schedule, findTeam }: { schedule: any[], findTeam: (id: string) => any }) => {
    const { toast } = useToast();
    const [availability, setAvailability] = useState<Record<string, string>>({});

    const handleAvailabilityChange = (gameId: string, value: string) => {
        setAvailability(prev => ({ ...prev, [gameId]: value }));
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        toast({
            title: "Availability Submitted",
            description: "Your availability for the upcoming week has been recorded.",
        });
        console.log("Submitted Availability:", availability);
    };

    return (
        <Card>
            <CardHeader>
                <CardTitle>Submit Weekly Availability</CardTitle>
            </CardHeader>
            <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                    <div className="space-y-4">
                        {schedule.map(game => {
                            const awayTeam = findTeam(game.awayTeamId);
                            return (
                                <div key={game.id} className="p-4 border rounded-md">
                                    <p className="font-semibold">vs {awayTeam?.name}</p>
                                    <p className="text-sm text-muted-foreground mb-2">{new Date(game.date).toLocaleString()}</p>
                                    <RadioGroup onValueChange={(value) => handleAvailabilityChange(game.id, value)} className="flex gap-4">
                                        <div className="flex items-center space-x-2"><RadioGroupItem value="available" id={`a-${game.id}`} /><Label htmlFor={`a-${game.id}`}>Available</Label></div>
                                        <div className="flex items-center space-x-2"><RadioGroupItem value="maybe" id={`m-${game.id}`} /><Label htmlFor={`m-${game.id}`}>Maybe</Label></div>
                                        <div className="flex items-center space-x-2"><RadioGroupItem value="unavailable" id={`u-${game.id}`} /><Label htmlFor={`u-${game.id}`}>Unavailable</Label></div>
                                    </RadioGroup>
                                </div>
                            );
                        })}
                    </div>
                     {schedule.length > 0 ? (
                        <Button type="submit">Submit All</Button>
                     ) : (
                        <p className="text-muted-foreground">No upcoming games to submit availability for.</p>
                     )}
                </form>
            </CardContent>
        </Card>
    );
};

// Roster Tab Component
const RosterTab = ({ teamPlayers }: { teamPlayers: Player[] }) => (
    <Card>
        <CardHeader>
            <CardTitle>Team Roster</CardTitle>
        </CardHeader>
        <CardContent>
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHead>Name</TableHead>
                        <TableHead>Position</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {teamPlayers.map(p => (
                        <TableRow key={p.id}>
                            <TableCell>{p.name}</TableCell>
                            <TableCell>{p.position}</TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
        </CardContent>
    </Card>
);

const LineupsDialogContent = ({ homeTeam, awayTeam, players }: { homeTeam?: Team, awayTeam?: Team, players: Player[] }) => {
    if (!homeTeam || !awayTeam) {
        return <DialogContent><p>Team data not found.</p></DialogContent>;
    }

    const getTeamLineup = (teamId: string) => {
        const teamPlayers = players.filter(p => p.teamId === teamId);
        const positions: Player['position'][] = ['LW', 'C', 'RW', 'LD', 'RD', 'G'];
        return positions.map(pos => {
            const player = teamPlayers.find(p => p.position === pos);
            return {
                id: player ? player.id : `${teamId}-${pos}`,
                name: player ? player.name : 'Not Set',
                position: pos,
            };
        });
    };

    const homeLineup = getTeamLineup(homeTeam.id);
    const awayLineup = getTeamLineup(awayTeam.id);

    return (
        <DialogContent className="max-w-4xl">
            <DialogHeader>
                <DialogTitle className="flex items-center gap-2"><Users/>Match Lineups</DialogTitle>
                <DialogDescription>{awayTeam.name} @ {homeTeam.name}</DialogDescription>
            </DialogHeader>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                <Card>
                    <CardHeader>
                        <CardTitle className="text-lg">{awayTeam.city} {awayTeam.name}</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader><TableRow><TableHead>Position</TableHead><TableHead>Player</TableHead></TableRow></TableHeader>
                            <TableBody>
                                {awayLineup.map(player => (
                                    <TableRow key={player.id}><TableCell>{player.position}</TableCell><TableCell>{player.name}</TableCell></TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
                 <Card>
                    <CardHeader>
                        <CardTitle className="text-lg">{homeTeam.city} {homeTeam.name}</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <Table>
                             <TableHeader><TableRow><TableHead>Position</TableHead><TableHead>Player</TableHead></TableRow></TableHeader>
                            <TableBody>
                                {homeLineup.map(player => (
                                    <TableRow key={player.id}><TableCell>{player.position}</TableCell><TableCell>{player.name}</TableCell></TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
            </div>
        </DialogContent>
    );
};


// Schedule Tab Component
const ScheduleTab = ({ schedule, players, findTeam }: { schedule: any[], players: Player[], findTeam: (id: string) => any }) => (
    <Card>
        <CardHeader>
            <CardTitle>Team Schedule</CardTitle>
        </CardHeader>
        <CardContent>
            <ul className="space-y-2">
                {schedule.map(game => {
                     const awayTeam = findTeam(game.awayTeamId);
                     const homeTeam = findTeam(game.homeTeamId);
                    return (
                        <li key={game.id} className="flex justify-between items-center p-2 border rounded-md">
                            <div>
                                {awayTeam?.name} @ {homeTeam?.name}
                                <p className="text-xs text-muted-foreground">{new Date(game.date).toLocaleString()}</p>
                            </div>
                            <Dialog>
                                <DialogTrigger asChild>
                                    <Button variant="outline" size="sm">View Lineups</Button>
                                </DialogTrigger>
                                <LineupsDialogContent homeTeam={homeTeam} awayTeam={awayTeam} players={players} />
                           </Dialog>
                        </li>
                    )
                })}
                 {schedule.length === 0 && <p className="text-muted-foreground">No upcoming games in the schedule.</p>}
            </ul>
        </CardContent>
    </Card>
);

// Draft Room Tab Component
const DraftRoomTab = () => (
    <Card>
        <CardHeader>
            <CardTitle>Team Draft Room</CardTitle>
            <CardDescription>View-only mode. Follow along with your team's picks.</CardDescription>
        </CardHeader>
        <CardContent>
            <DraftCentralClient />
        </CardContent>
    </Card>
)

export default function PlayerDashboardClient() {
    const { isLoading, user, findPlayer, findTeam, players, mockSchedule, upcomingMatches } = useAuth();
    
    if (isLoading) {
        return <Loader text="Loading Player Dashboard..." />;
    }

    if (!user || user.role !== 'player' || !user.playerId) {
        return (
            <div className="container mx-auto p-4 text-center">
                <p>You must be logged in as a player to view this page.</p>
            </div>
        );
    }

    const player = findPlayer(user.playerId);
    const team = player ? findTeam(player.teamId) : null;
    const teamPlayers = players.filter(p => p.teamId === player?.teamId);
    
    const nextMatch = upcomingMatches.length > 0 ? {
        ...upcomingMatches[0],
        awayTeamName: findTeam(upcomingMatches[0].awayTeamId)?.name
    } : null;
    
    if (!player || !team) {
        return <div className="container mx-auto p-4 text-center"><p>Could not load player data.</p></div>
    }

    const playerTeamSchedule = mockSchedule.filter(m => m.homeTeamId === player.teamId || m.awayTeamId === player.teamId);

    return (
        <div className="container mx-auto p-4 sm:p-6 lg:p-8">
            <div className="mb-8">
                <h1 className="text-4xl font-headline font-bold flex items-center gap-2"><UserCircle/> Player Dashboard</h1>
                <p className="text-muted-foreground">Welcome back, {player.name}. Here's your current status.</p>
            </div>
            
             <Tabs defaultValue="overview" className="w-full">
                <TabsList className="grid w-full grid-cols-3 md:grid-cols-6 h-auto">
                    <TabsTrigger value="overview"><UserCircle className="mr-2"/>Overview</TabsTrigger>
                    <TabsTrigger value="settings"><Settings className="mr-2"/>Settings</TabsTrigger>
                    <TabsTrigger value="availability"><ClipboardCheck className="mr-2"/>Availability</TabsTrigger>
                    <TabsTrigger value="roster"><Users className="mr-2"/>Roster</TabsTrigger>
                    <TabsTrigger value="schedule"><Calendar className="mr-2"/>Schedule</TabsTrigger>
                    <TabsTrigger value="draft"><Clock className="mr-2"/>Draft Room</TabsTrigger>
                </TabsList>

                <TabsContent value="overview" className="mt-6"><OverviewTab player={player} team={team} nextMatch={nextMatch} /></TabsContent>
                <TabsContent value="settings" className="mt-6"><SettingsTab player={player} /></TabsContent>
                <TabsContent value="availability" className="mt-6"><AvailabilityTab schedule={playerTeamSchedule} findTeam={findTeam} /></TabsContent>
                <TabsContent value="roster" className="mt-6"><RosterTab teamPlayers={teamPlayers} /></TabsContent>
                <TabsContent value="schedule" className="mt-6"><ScheduleTab schedule={playerTeamSchedule} players={players} findTeam={findTeam} /></TabsContent>
                <TabsContent value="draft" className="mt-6"><DraftRoomTab /></TabsContent>
            </Tabs>
        </div>
    );
}
```

---

**File: `src/components/pages/privacy-client.tsx`**
```tsx
'use client';

import * as React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PrivacyPolicyClient() {
  const [currentDate, setCurrentDate] = React.useState('');

  React.useEffect(() => {
    setCurrentDate(new Date().toLocaleDateString());
  }, []);

  return (
    <div className="container mx-auto max-w-4xl py-12 px-4">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-headline font-bold">Privacy Policy</h1>
        <p className="text-muted-foreground mt-2">Last updated: {currentDate}</p>
      </div>

      <Card>
        <CardContent className="p-8 space-y-8">
          <section className="space-y-2">
            <h2 className="text-2xl font-headline">Introduction</h2>
            <p className="text-muted-foreground leading-relaxed">
              Welcome to MVHL Hub. We are committed to protecting your privacy. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you visit our website. This is a fictional website for demonstration purposes, and we do not collect any real personal data.
            </p>
          </section>

          <section className="space-y-2">
            <h2 className="text-2xl font-headline">Information We "Collect"</h2>
            <p className="text-muted-foreground leading-relaxed">
              Since this is a simulation, we do not collect personally identifiable information. Any data you enter, such as a username for the live chat or votes you cast, is stored only in your browser's local storage and is not transmitted to our servers.
            </p>
             <p className="text-muted-foreground leading-relaxed">
              The AI features, such as generating commentary or headshots, may process the text or parameters you provide (e.g., player names). This data is used only to generate the requested content and is not stored or used for any other purpose.
            </p>
          </section>

          <section className="space-y-2">
            <h2 className="text-2xl font-headline">How We Use Your Information</h2>
            <p className="text-muted-foreground leading-relaxed">
              The information "collected" is used solely to provide and improve the features of this demonstration website. For example:
            </p>
            <ul className="list-disc list-inside text-muted-foreground space-y-1 pl-4">
                <li>Your login state (e.g., "Player," "Admin") is used to show or hide certain features.</li>
                <li>Your votes for awards or All-Stars are stored locally to show you that you have voted.</li>
                <li>Usernames are used to display messages in the live chat simulation.</li>
            </ul>
          </section>

          <section className="space-y-2">
            <h2 className="text-2xl font-headline">Data Security</h2>
            <p className="text-muted-foreground leading-relaxed">
              While no real data is collected, we use standard web technologies. All interactions with the AI models are handled securely.
            </p>
          </section>
          
           <section className="space-y-2">
            <h2 className="text-2xl font-headline">Third-Party Services</h2>
            <p className="text-muted-foreground leading-relaxed">
                This site uses Google Fonts to load the fonts used in the design. We also use placeholder image services (`placehold.co`) for team logos and player headshots. These services may have their own privacy policies.
            </p>
          </section>

          <section className="space-y-2">
            <h2 className="text-2xl font-headline">Changes to This Policy</h2>
            <p className="text-muted-foreground leading-relaxed">
              We may update this Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.
            </p>
          </section>

          <section className="space-y-2">
            <h2 className="text-2xl font-headline">Contact Us</h2>
            <p className="text-muted-foreground leading-relaxed">
              If you have any questions about this Privacy Policy, please note that this is a fictional entity.
            </p>
          </section>
        </CardContent>
      </Card>
    </div>
  );
}
```

---

**File: `src/components/pages/signup-client.tsx`**
```tsx
'use client';

import * as React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuth } from '@/hooks/use-auth';
import { useToast } from '@/hooks/use-toast';
import { useRouter } from 'next/navigation';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { UserPlus } from 'lucide-react';
import Link from 'next/link';

const formSchema = z.object({
    email: z.string().email({ message: 'Invalid email address.' }),
    password: z.string().min(8, { message: 'Password must be at least 8 characters.' }),
    confirmPassword: z.string(),
    gamertag: z.string().min(3, { message: 'Gamertag must be at least 3 characters.' }),
    primaryPosition: z.string({ required_error: 'Please select a primary position.' }),
    secondaryPosition: z.string({ required_error: 'Please select a secondary position.' }),
}).refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ['confirmPassword'],
});

type SignUpFormValues = z.infer<typeof formSchema>;

export default function SignUpClient() {
    const { signup } = useAuth();
    const { toast } = useToast();
    const router = useRouter();

    const form = useForm<SignUpFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            email: '',
            password: '',
            confirmPassword: '',
            gamertag: '',
        }
    });

    const onSubmit = (data: SignUpFormValues) => {
        try {
            signup(data);
            toast({
                title: 'Account Created!',
                description: 'Welcome to the league. You are now a free agent.',
            });
            router.push('/player');
        } catch (error: any) {
             toast({
                title: 'Sign Up Failed',
                description: error.message,
                variant: 'destructive'
            });
        }
    };

    const positions = ['C', 'LW', 'RW', 'LD', 'RD', 'G'];

    return (
        <div className="container mx-auto flex min-h-screen items-center justify-center py-12">
            <Card className="w-full max-w-lg">
                <CardHeader className="text-center">
                    <UserPlus className="mx-auto h-12 w-12" />
                    <CardTitle className="text-2xl font-headline mt-4">Create Your Player</CardTitle>
                    <CardDescription>Join the MVHL and become a free agent.</CardDescription>
                </CardHeader>
                <CardContent>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                            <FormField
                                control={form.control}
                                name="gamertag"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Gamertag</FormLabel>
                                        <FormControl><Input placeholder="Your player name" {...field} /></FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="email"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Email</FormLabel>
                                        <FormControl><Input placeholder="your@email.com" {...field} /></FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                             <FormField
                                control={form.control}
                                name="password"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Password</FormLabel>
                                        <FormControl><Input type="password" {...field} /></FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                             <FormField
                                control={form.control}
                                name="confirmPassword"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Confirm Password</FormLabel>
                                        <FormControl><Input type="password" {...field} /></FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                               <FormField
                                    control={form.control}
                                    name="primaryPosition"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Primary Position</FormLabel>
                                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                <FormControl><SelectTrigger><SelectValue placeholder="Select..." /></SelectTrigger></FormControl>
                                                <SelectContent>
                                                    {positions.map(p => <SelectItem key={`pri-${p}`} value={p}>{p}</SelectItem>)}
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                                <FormField
                                    control={form.control}
                                    name="secondaryPosition"
                                    render={({ field }) => (
                                        <FormItem>
                                            <FormLabel>Secondary Position</FormLabel>
                                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                <FormControl><SelectTrigger><SelectValue placeholder="Select..." /></SelectTrigger></FormControl>
                                                <SelectContent>
                                                    {positions.map(p => <SelectItem key={`sec-${p}`} value={p}>{p}</SelectItem>)}
                                                </SelectContent>
                                            </Select>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            </div>
                            <Button type="submit" className="w-full">Create Account</Button>
                        </form>
                    </Form>
                     <p className="mt-6 text-center text-sm text-muted-foreground">
                        Already have an account?{' '}
                        <a href="#" onClick={(e) => { e.preventDefault(); alert("Login modal would show here.")}} className="text-primary hover:underline">
                            Sign In
                        </a>
                    </p>
                </CardContent>
            </Card>
        </div>
    );
}
```

---

**File: `src/components/pages/standings-client.tsx`**
```tsx


"use client";

import Image from "next/image";
import { useAuth } from "@/hooks/use-auth";
import Loader from "@/components/loader";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import type { StandingRecord } from "@/lib/mock-data-types";
import { Separator } from "@/components/ui/separator";
import { Trophy, CheckCircle2, XCircle, MinusCircle, Lock, ChevronRight } from "lucide-react";

const StandingsTable = ({ records, title, showRank = true, rankOffset = 0 }: { records: StandingRecord[], title?: string, showRank?: boolean, rankOffset?: number }) => (
    <Card>
        {title && <CardHeader><CardTitle className="font-headline">{title}</CardTitle></CardHeader>}
        <CardContent className={!title ? 'pt-6' : ''}>
            <Table>
                <TableHeader>
                    <TableRow>
                        {showRank && <TableHead className="w-[50px]">Rank</TableHead>}
                        <TableHead>Team</TableHead>
                        <TableHead className="text-center">GP</TableHead>
                        <TableHead className="text-center">W</TableHead>
                        <TableHead className="text-center">L</TableHead>
                        <TableHead className="text-center">OTL</TableHead>
                        <TableHead className="text-center font-bold">Pts</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {records.map((r, index) => (
                        <TableRow key={r.teamId}>
                            {showRank && <TableCell className="font-medium">{rankOffset + index + 1}</TableCell>}
                            <TableCell>
                                <div className="flex items-center gap-2">
                                    <Image data-ai-hint="logo" src={r.teamLogoUrl} alt={r.teamName} width={24} height={24} />
                                    <span className="font-medium">{r.teamName}</span>
                                </div>
                            </TableCell>
                            <TableCell className="text-center">{r.gamesPlayed}</TableCell>
                            <TableCell className="text-center">{r.wins}</TableCell>
                            <TableCell className="text-center">{r.losses}</TableCell>
                            <TableCell className="text-center">{r.otLosses}</TableCell>
                            <TableCell className="text-center font-bold">{r.points}</TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
        </CardContent>
    </Card>
);

const ConferenceStandings = ({ conference, standings }: { conference: 'Eastern' | 'Western', standings: StandingRecord[] }) => {
    const divisions = conference === 'Eastern' ? ['Northeast', 'South'] : ['Midwest', 'West'];
    return (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {divisions.map(div => {
                const divisionStandings = standings
                    .filter(s => s.division === div)
                    .sort((a,b) => a.rankInDivision - b.rankInDivision);
                return (
                    <div key={div}>
                        <h3 className="font-headline text-xl mb-4">{div} Division</h3>
                        <StandingsTable records={divisionStandings} showRank={false} />
                    </div>
                );
            })}
        </div>
    );
};

const PlayoffRaceView = ({ standings }: { standings: StandingRecord[] }) => {
    const getConferenceData = (conference: 'Eastern' | 'Western') => {
        const conferenceTeams = standings.filter(s => s.conference === conference);
        const divisions = conference === 'Eastern' ? ['Northeast', 'South'] : ['Midwest', 'West'];
        
        const divisionLeaders: StandingRecord[] = [];
        const divisionLeaderIds = new Set<string>();

        divisions.forEach(div => {
            const top3 = conferenceTeams
                .filter(t => t.division === div)
                .sort((a,b) => a.rankInDivision - b.rankInDivision)
                .slice(0,3);
            
            top3.forEach(t => {
                divisionLeaders.push(t);
                divisionLeaderIds.add(t.teamId);
            });
        });

        const wildcardContenders = conferenceTeams
            .filter(t => !divisionLeaderIds.has(t.teamId))
            .sort((a,b) => b.points - a.points);
            
        return { divisionLeaders, wildcardContenders, divisions };
    }

    const easternData = getConferenceData('Eastern');
    const westernData = getConferenceData('Western');

    const ConferencePlayoffPictureCard = ({title, data}: {title:string, data: {divisionLeaders: StandingRecord[], wildcardContenders: StandingRecord[], divisions: string[]}}) => {
        
        const qualifiedTeams: (StandingRecord & {qualifier: string})[] = [];

        data.divisions.forEach(div => {
            const divisionTop3 = data.divisionLeaders
                .filter(t => t.division === div)
                .sort((a,b) => a.rankInDivision - b.rankInDivision);
            
            divisionTop3.forEach((team, index) => {
                qualifiedTeams.push({ ...team, qualifier: `${div.substring(0,1)}${index+1}`});
            });
        });
        
        data.wildcardContenders.slice(0, 2).forEach((team, index) => {
            qualifiedTeams.push({...team, qualifier: `WC${index+1}`});
        });

        qualifiedTeams.sort((a,b) => b.points - a.points);

        const bubbleTeams = data.wildcardContenders.slice(2,5);

        return (
             <Card>
                <CardHeader>
                    <CardTitle className="font-headline">{title} Playoff Picture</CardTitle>
                    <CardDescription>Top 3 in each division and two wild card teams qualify.</CardDescription>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead className="w-[80px]">Spot</TableHead>
                                <TableHead>Team</TableHead>
                                <TableHead className="text-center">Pts</TableHead>
                                <TableHead className="text-center">Status</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {qualifiedTeams.map(team => (
                                <TableRow key={team.teamId} className="bg-primary/10">
                                    <TableCell className="font-bold">{team.qualifier}</TableCell>
                                    <TableCell>
                                        <div className="flex items-center gap-2">
                                            <Image data-ai-hint="logo" src={team.teamLogoUrl} alt={team.teamName} width={24} height={24} />
                                            <span className="font-medium">{team.teamName}</span>
                                        </div>
                                    </TableCell>
                                    <TableCell className="text-center font-bold">{team.points}</TableCell>
                                    <TableCell className="text-center"><CheckCircle2 className="h-5 w-5 text-green-500 mx-auto"/></TableCell>
                                </TableRow>
                            ))}
                             <TableRow>
                                <TableCell colSpan={4} className="p-0"><Separator /></TableCell>
                             </TableRow>
                             <TableRow>
                                <TableCell colSpan={4} className="text-center text-xs font-bold text-muted-foreground py-1">ON THE BUBBLE</TableCell>
                             </TableRow>
                             <TableRow>
                                <TableCell colSpan={4} className="p-0"><Separator /></TableCell>
                             </TableRow>
                             {bubbleTeams.map((team) => (
                                 <TableRow key={team.teamId}>
                                     <TableCell>---</TableCell>
                                     <TableCell>
                                         <div className="flex items-center gap-2">
                                             <Image data-ai-hint="logo" src={team.teamLogoUrl} alt={team.teamName} width={24} height={24} />
                                             <span className="font-medium">{team.teamName}</span>
                                         </div>
                                     </TableCell>
                                     <TableCell className="text-center font-bold">{team.points}</TableCell>
                                     <TableCell className="text-center"><MinusCircle className="h-5 w-5 text-amber-500 mx-auto"/></TableCell>
                                 </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
        );
    }
    
    return (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <ConferencePlayoffPictureCard title="Western Conference" data={westernData} />
            <ConferencePlayoffPictureCard title="Eastern Conference" data={easternData} />
        </div>
    )
}

const PlayoffBracket = ({ standings }: { standings: StandingRecord[] }) => {
    type Matchup = { top: StandingRecord, bottom: StandingRecord, label: string };

    const getProjectedWinner = (matchup: Matchup) => {
        return matchup.top.points > matchup.bottom.points ? matchup.top : matchup.bottom;
    }

    const getConferenceBracket = (conference: 'Eastern' | 'Western') => {
        const conferenceStandings = standings.filter(s => s.conference === conference);
        const divisions = conference === 'Eastern' ? ['Northeast', 'South'] : ['Midwest', 'West'];
        const [div1Name, div2Name] = divisions;

        const div1Top3 = conferenceStandings.filter(s => s.division === div1Name).sort((a, b) => a.rankInDivision - b.rankInDivision).slice(0, 3);
        const div2Top3 = conferenceStandings.filter(s => s.division === div2Name).sort((a, b) => a.rankInDivision - b.rankInDivision).slice(0, 3);
        
        const divisionalTeams = new Set([...div1Top3.map(t => t.teamId), ...div2Top3.map(t => t.teamId)]);
        const wildcardTeams = conferenceStandings
            .filter(s => !divisionalTeams.has(s.teamId))
            .sort((a, b) => b.points - a.points)
            .slice(0, 2);
        
        if (wildcardTeams.length < 2 || div1Top3.length < 3 || div2Top3.length < 3) {
            return { round1: [], round2: [], confFinal: null }; // Not enough teams
        }
        
        const [wc1, wc2] = wildcardTeams;

        const topDivisionWinner = div1Top3[0].points > div2Top3[0].points ? div1Top3[0] : div2Top3[0];
        const otherDivisionWinner = topDivisionWinner.teamId === div1Top3[0].teamId ? div2Top3[0] : div1Top3[0];
        
        const matchup1: Matchup = { top: topDivisionWinner, bottom: wc2, label: `Div Winner vs WC2` };
        const matchup2: Matchup = { top: div1Top3[1], bottom: div1Top3[2], label: `${div1Name} #2 vs #3` };
        const matchup3: Matchup = { top: otherDivisionWinner, bottom: wc1, label: `Div Winner vs WC1` };
        const matchup4: Matchup = { top: div2Top3[1], bottom: div2Top3[2], label: `${div2Name} #2 vs #3` };

        const round1 = topDivisionWinner.division === div1Name ? [matchup1, matchup2, matchup3, matchup4] : [matchup3, matchup4, matchup1, matchup2];

        // Second Round
        const winnerR1M1 = getProjectedWinner(round1[0]);
        const winnerR1M2 = getProjectedWinner(round1[1]);
        const winnerR1M3 = getProjectedWinner(round1[2]);
        const winnerR1M4 = getProjectedWinner(round1[3]);

        const round2: Matchup[] = [
            { top: winnerR1M1, bottom: winnerR1M2, label: `Divisional Final` },
            { top: winnerR1M3, bottom: winnerR1M4, label: `Divisional Final` }
        ];

        // Conference Final
        const winnerR2M1 = getProjectedWinner(round2[0]);
        const winnerR2M2 = getProjectedWinner(round2[1]);
        const confFinal: Matchup = { top: winnerR2M1, bottom: winnerR2M2, label: `${conference} Final` };

        return { round1, round2, confFinal };
    };

    const easternBracket = getConferenceBracket('Eastern');
    const westernBracket = getConferenceBracket('Western');

    const MatchupCard = ({ matchup, isFinal = false, order }: { matchup: Matchup, isFinal?: boolean, order?: 'normal' | 'reverse' }) => {
        if (!matchup.top || !matchup.bottom) return null;
        const seriesWinner = getProjectedWinner(matchup);
        
        const getTeamLabel = (team: StandingRecord) => {
            if (team.rankInDivision <= 3) return `${team.division.substring(0,1)}${team.rankInDivision}`;
            const wcRank = standings.filter(s => s.conference === team.conference && s.rankInDivision > 3)
                                  .sort((a,b) => b.points - a.points)
                                  .findIndex(t => t.teamId === team.teamId) + 1;
            return `WC${wcRank}`;
        }

        const teams = order === 'reverse' ? [matchup.bottom, matchup.top] : [matchup.top, matchup.bottom];
        
        return (
            <Card className="bg-muted/50 w-full min-w-[200px] flex-shrink-0">
                 <CardDescription className="text-center text-xs pt-2 truncate px-1">{matchup.label}</CardDescription>
                <CardContent className="p-2 space-y-1 text-sm">
                    {teams.map(team => (
                        <div key={team.teamId} className={`flex items-center gap-2 p-1 rounded ${seriesWinner.teamId === team.teamId ? 'bg-primary/20 font-bold' : ''}`}>
                            {seriesWinner.teamId === team.teamId && <Trophy className="w-3 h-3 text-primary" />}
                            <Image data-ai-hint="logo" src={team.teamLogoUrl} alt={team.teamName} width={16} height={16} />
                            <span className="font-semibold text-xs hidden sm:inline">{getTeamLabel(team)}</span>
                            <span className="truncate flex-1">{team.teamName}</span>
                            <span className="ml-auto font-mono text-xs">{seriesWinner.teamId === team.teamId ? 'W' : 'L'}</span>
                        </div>
                    ))}
                </CardContent>
            </Card>
        )
    };
    
    const EmptyMatchupCard = () => (
        <Card className="bg-muted/50 w-full min-w-[200px] flex-shrink-0 h-[78px] flex items-center justify-center">
            <p className="text-xs text-muted-foreground">TBD</p>
        </Card>
    )
    
    const FinalMatchup = () => {
        if (!westernBracket.confFinal || !easternBracket.confFinal) return null;
        const westChamp = getProjectedWinner(westernBracket.confFinal);
        const eastChamp = getProjectedWinner(easternBracket.confFinal);
        const cupFinalMatchup = {top: westChamp, bottom: eastChamp, label: "MVHL Cup Final"};
        return <MatchupCard matchup={cupFinalMatchup} isFinal />
    }

    const Connector = ({ v, h, className }: {v?: 'top' | 'bottom' | 'middle', h?: 'left' | 'right', className?: string}) => (
        <div className={`relative w-full h-full ${className}`}>
            <div className={`absolute bg-border 
                ${h === 'left' ? 'left-0 w-1/2' : 'right-0 w-1/2'}
                ${v === 'top' ? 'top-1/2 h-1/2 border-r' : v === 'bottom' ? 'bottom-1/2 h-1/2 border-r' : 'top-1/2 h-[1px]'}
                ${h === 'right' && v !== 'middle' && 'border-l' }
                ${h === 'right' && (v === 'top' || v === 'bottom') && 'right-0' }
            `}></div>
        </div>
    )

    const ConferenceBracket = ({ title, bracketData, side }: {title: string, bracketData: { round1: Matchup[], round2: Matchup[], confFinal: Matchup | null }, side: 'left' | 'right'}) => {
        const { round1, round2, confFinal } = bracketData;
        const flexOrder = side === 'right' ? 'flex-row-reverse' : 'flex-row';
        
        return (
            <div className="flex-1 flex flex-col">
                <h3 className="font-headline text-center text-lg mb-4">{title}</h3>
                <div className={`flex ${flexOrder} items-center justify-center flex-1`}>
                    {/* Round 1 */}
                    <div className="flex flex-col gap-4 w-[200px] justify-between h-full">
                        {round1.length > 0 ? round1.map((m, i) => <MatchupCard key={i} matchup={m} order={side === 'right' ? 'reverse' : 'normal'} />) : Array(4).fill(0).map((_,i) => <EmptyMatchupCard key={i}/>)}
                    </div>
                    
                    {/* Connectors */}
                    <div className="w-8 hidden lg:flex flex-col h-full mx-2">
                        <div className="flex-1 flex items-center"><Connector v="bottom" h={side} /></div>
                        <div className="flex-1 flex items-center"><Connector v="top" h={side} /></div>
                        <div className="flex-1 flex items-center"><Connector v="bottom" h={side} /></div>
                        <div className="flex-1 flex items-center"><Connector v="top" h={side} /></div>
                    </div>
                    
                    {/* Round 2 */}
                    <div className="hidden lg:flex flex-col w-[200px] justify-around h-full">
                        {round2.length > 0 ? round2.map((m, i) => <MatchupCard key={i} matchup={m} order={side === 'right' ? 'reverse' : 'normal'} />) : <><EmptyMatchupCard /><EmptyMatchupCard /></>}
                    </div>

                     {/* Connectors */}
                     <div className="w-8 hidden lg:flex flex-col h-full justify-around mx-2">
                        <Connector v="middle" h={side} />
                    </div>

                    {/* Conf Final */}
                    <div className="hidden lg:flex flex-col justify-center w-[200px]">
                         {confFinal ? <MatchupCard matchup={confFinal} order={side === 'right' ? 'reverse' : 'normal'} /> : <EmptyMatchupCard />}
                    </div>
                </div>
            </div>
        );
    }


    return (
        <Card>
            <CardHeader>
                <CardTitle className="font-headline text-center">Playoff Bracket</CardTitle>
                <CardDescription className="text-center">Based on current standings if the season ended today.</CardDescription>
            </CardHeader>
            <CardContent className="flex flex-col lg:flex-row justify-between items-stretch gap-4 p-2 sm:p-4 overflow-x-auto min-h-[500px]">
                <ConferenceBracket title="Western Conference" bracketData={westernBracket} side="left" />

                <div className="flex flex-col justify-center items-center h-full pt-8 lg:pt-0 px-4 flex-shrink-0 order-first lg:order-none">
                     <Trophy className="w-16 h-16 sm:w-24 sm:h-24 text-primary" />
                     <p className="font-headline text-lg sm:text-2xl mt-4 text-center">MVHL Cup</p>
                     <div className="w-full mt-4 min-w-[200px]">
                        <FinalMatchup />
                     </div>
                </div>

                <ConferenceBracket title="Eastern Conference" bracketData={easternBracket} side="right" />
            </CardContent>
        </Card>
    );
};


export default function StandingsClient() {
    const { standings, isLoading } = useAuth();
    
    if (isLoading) {
        return <Loader text="Calculating Standings..." />;
    }

    const overallStandings = [...standings].sort((a,b) => a.rankInLeague - b.rankInLeague);
    const easternConference = standings.filter(s => s.conference === 'Eastern').sort((a, b) => b.points - a.points);
    const westernConference = standings.filter(s => s.conference === 'Western').sort((a, b) => b.points - a.points);

    return (
        <div className="container mx-auto max-w-screen-2xl py-8 px-4">
            <div className="text-center mb-8">
                <h1 className="font-headline text-4xl font-bold">League Standings</h1>
                <p className="text-muted-foreground mt-2">Track the race for the championship.</p>
            </div>
            <Tabs defaultValue="conferences">
                <TabsList className="grid w-full grid-cols-2 md:grid-cols-4">
                    <TabsTrigger value="conferences">Divisions</TabsTrigger>
                    <TabsTrigger value="overall">Overall</TabsTrigger>
                    <TabsTrigger value="playoff_race">Playoff Race</TabsTrigger>
                    <TabsTrigger value="bracket">Bracket</TabsTrigger>
                </TabsList>
                <TabsContent value="overall" className="mt-6">
                    <StandingsTable records={overallStandings} title="Overall League Standings" />
                </TabsContent>
                <TabsContent value="conferences" className="mt-6 space-y-8">
                     <h2 className="font-headline text-2xl">Eastern Conference</h2>
                     <ConferenceStandings conference="Eastern" standings={easternConference} />
                     <Separator className="my-8"/>
                     <h2 className="font-headline text-2xl">Western Conference</h2>
                     <ConferenceStandings conference="Western" standings={westernConference} />
                </TabsContent>
                <TabsContent value="playoff_race" className="mt-6">
                    <PlayoffRaceView standings={standings} />
                </TabsContent>
                <TabsContent value="bracket" className="mt-6">
                    <PlayoffBracket standings={standings} />
                </TabsContent>
            </Tabs>
        </div>
    );
}
```

---

**File: `src/components/pages/stats-client.tsx`**
```tsx
'use client';

import {useState} from 'react';
import Image from 'next/image';
import {useAuth} from '@/hooks/use-auth';
import Loader from '@/components/loader';
import {Tabs, TabsContent, TabsList, TabsTrigger} from '@/components/ui/tabs';
import {Card, CardContent, CardHeader, CardTitle, CardDescription} from '@/components/ui/card';
import {Table, TableBody, TableCell, TableHead, TableHeader, TableRow} from '@/components/ui/table';
import {Button} from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
} from '@/components/ui/dialog';
import type {Player, PlayerStats, GoalieStats} from '@/lib/mock-data-types';
import {generateScoutingReport} from '@/ai/flows/generate-scouting-report';
import {toast} from '@/hooks/use-toast';
import {ScrollArea} from '../ui/scroll-area';
import {Skeleton} from '../ui/skeleton';
import {FileText} from 'lucide-react';

const ScoutingReportDialog = ({player, team}: {player: Player; team: any}) => {
  const [report, setReport] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerate = async () => {
    if (report) return;
    setIsGenerating(true);
    setReport('');
    try {
      const stats = player.stats as PlayerStats | GoalieStats;
      let offenseStats = 'N/A',
        defenseStats = 'N/A',
        goalieStats;
      if ('points' in stats) {
        // Player
        offenseStats = `G: ${stats.goals}, A: ${stats.assists}, P: ${stats.points}`;
        defenseStats = `+/-: ${stats.plusMinus}, PIM: ${stats.penaltyMinutes}, Hits: ${stats.hits}, Blk: ${stats.blocks}`;
      } else {
        // Goalie
        goalieStats = `W: ${stats.wins}, L: ${stats.losses}, GAA: ${stats.goalsAgainstAverage}, SV%: ${stats.savePercentage}`;
      }

      const result = await generateScoutingReport({
        playerName: player.name,
        offenseStats,
        defenseStats,
        ...(goalieStats && {goalieStats}),
      });
      setReport(result.scoutingReport);
    } catch (error) {
      console.error(error);
      toast({
        title: 'Error',
        description: 'Failed to generate scouting report.',
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <DialogContent className="max-w-2xl">
      <DialogHeader>
        <DialogTitle className="font-headline text-2xl">Scouting Report: {player.name}</DialogTitle>
        <DialogDescription>
          #{player.number} | {player.position} | {team.name}
        </DialogDescription>
      </DialogHeader>
      <div className="mt-4">
        {!report && !isGenerating && (
          <div className="flex flex-col items-center justify-center text-center p-8 border-dashed border-2 rounded-lg">
            <p className="mb-4 text-muted-foreground">Generate an AI-powered scouting report for {player.name}.</p>
            <Button onClick={handleGenerate}>Generate Report</Button>
          </div>
        )}
        {isGenerating && (
          <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
          </div>
        )}
        {report && (
          <Card>
            <CardContent className="p-6">
              <ScrollArea className="h-72">
                <p className="whitespace-pre-wrap">{report}</p>
              </ScrollArea>
            </CardContent>
          </Card>
        )}
      </div>
    </DialogContent>
  );
};

export default function StatsClient() {
  const {players, findTeam, isLoading} = useAuth();

  if (isLoading) {
    return <Loader text="Loading Player Stats..." />;
  }

  const offensivePlayers = players.filter(p => ['C', 'LW', 'RW'].includes(p.position));
  const defensivePlayers = players.filter(p => ['LD', 'RD'].includes(p.position));
  const goalies = players.filter(p => p.position === 'G');

  const offenseLeaders = [...offensivePlayers].sort((a, b) => (b.stats as PlayerStats).points - (a.stats as PlayerStats).points);
  const defenseLeaders = [...defensivePlayers].sort((a, b) => (b.stats as PlayerStats).blocks - (a.stats as PlayerStats).blocks);
  const goalieLeaders = [...goalies].sort(
    (a, b) => (b.stats as GoalieStats).savePercentage - (a.stats as GoalieStats).savePercentage
  );

  const renderSkatersTable = (playerList: Player[]) => (
    <div className="overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Player</TableHead>
            <TableHead>Team</TableHead>
            <TableHead>Pos</TableHead>
            <TableHead>GP</TableHead>
            <TableHead>G</TableHead>
            <TableHead>A</TableHead>
            <TableHead className="font-bold">Pts</TableHead>
            <TableHead>PPG</TableHead>
            <TableHead className="font-bold">+/-</TableHead>
            <TableHead>SOG</TableHead>
            <TableHead className="font-bold">Hits</TableHead>
            <TableHead>PIM</TableHead>
            <TableHead className="font-bold">BLK</TableHead>
            <TableHead>TKA</TableHead>
            <TableHead>GVA</TableHead>
            <TableHead>INT</TableHead>
            <TableHead>Pass%</TableHead>
            <TableHead>PassAtt</TableHead>
            <TableHead>FOW</TableHead>
            <TableHead>FO%</TableHead>
            <TableHead>Record</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {playerList.map(p => {
            const stats = p.stats as PlayerStats;
            const team = findTeam(p.teamId);
            return (
              <TableRow key={p.id}>
                <TableCell className="font-medium">{p.name}</TableCell>
                <TableCell>{team?.name}</TableCell>
                <TableCell>{p.position}</TableCell>
                <TableCell>{stats.gamesPlayed}</TableCell>
                <TableCell>{stats.goals}</TableCell>
                <TableCell>{stats.assists}</TableCell>
                <TableCell className="font-bold">{stats.points}</TableCell>
                <TableCell>{(stats.points / stats.gamesPlayed).toFixed(2)}</TableCell>
                <TableCell className="font-bold">{stats.plusMinus}</TableCell>
                <TableCell>{stats.sog}</TableCell>
                <TableCell className="font-bold">{stats.hits}</TableCell>
                <TableCell>{stats.penaltyMinutes}</TableCell>
                <TableCell className="font-bold">{stats.blocks}</TableCell>
                <TableCell>{stats.tka}</TableCell>
                <TableCell>{stats.gva}</TableCell>
                <TableCell>{stats.int}</TableCell>
                <TableCell>{stats.passPct}%</TableCell>
                <TableCell>{stats.passAtt}</TableCell>
                <TableCell>{stats.fow}</TableCell>
                <TableCell>{stats.foPct}%</TableCell>
                <TableCell>{stats.record}</TableCell>
                <TableCell>
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="icon">
                        <FileText className="h-4 w-4" />
                      </Button>
                    </DialogTrigger>
                    <ScoutingReportDialog player={p} team={team} />
                  </Dialog>
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
    </div>
  );

  const renderGoaliesTable = (playerList: Player[]) => (
    <div className="overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Player</TableHead>
            <TableHead>Team</TableHead>
            <TableHead>Pos</TableHead>
            <TableHead>GP</TableHead>
            <TableHead>Record</TableHead>
            <TableHead>Saves</TableHead>
            <TableHead>Shots</TableHead>
            <TableHead>GA</TableHead>
            <TableHead className="font-bold">SV%</TableHead>
            <TableHead>GAA</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {playerList.map(p => {
            const stats = p.stats as GoalieStats;
            const team = findTeam(p.teamId);
            return (
              <TableRow key={p.id}>
                <TableCell className="font-medium">{p.name}</TableCell>
                <TableCell>{team?.name}</TableCell>
                <TableCell>{p.position}</TableCell>
                <TableCell>{stats.gamesPlayed}</TableCell>
                <TableCell>{stats.record}</TableCell>
                <TableCell>{stats.saves}</TableCell>
                <TableCell>{stats.shots}</TableCell>
                <TableCell>{stats.ga}</TableCell>
                <TableCell className="font-bold">{stats.savePercentage.toFixed(3)}</TableCell>
                <TableCell>{stats.goalsAgainstAverage.toFixed(2)}</TableCell>
                <TableCell>
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="icon">
                        <FileText className="h-4 w-4" />
                      </Button>
                    </DialogTrigger>
                    <ScoutingReportDialog player={p} team={team} />
                  </Dialog>
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
    </div>
  );

  return (
    <div className="container mx-auto max-w-screen-2xl py-8 px-4">
      <div className="text-center mb-8">
        <h1 className="font-headline text-4xl font-bold">Player Statistics</h1>
        <p className="text-muted-foreground mt-2">See who is leading the league in every category.</p>
      </div>
      <Tabs defaultValue="offense">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="offense">Offense</TabsTrigger>
          <TabsTrigger value="defense">Defense</TabsTrigger>
          <TabsTrigger value="goalies">Goalies</TabsTrigger>
        </TabsList>
        <TabsContent value="offense" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle className="font-headline">Offensive Leaders</CardTitle>
              <CardDescription>Top offensive players in the league.</CardDescription>
            </CardHeader>
            <CardContent>{renderSkatersTable(offenseLeaders)}</CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="defense" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle className="font-headline">Defensive Leaders</CardTitle>
              <CardDescription>Top defensive players in the league.</CardDescription>
            </CardHeader>
            <CardContent>{renderSkatersTable(defenseLeaders)}</CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="goalies" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle className="font-headline">Goalie Leaders</CardTitle>
              <CardDescription>Top goalies in the league.</CardDescription>
            </CardHeader>
            <CardContent>{renderGoaliesTable(goalieLeaders)}</CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
```

---

**File: `src/components/pages/teams-client.tsx`**
```tsx
"use client";

import { useState, useMemo } from 'react';
import Image from 'next/image';
import { useAuth } from '@/hooks/use-auth';
import Loader from '@/components/loader';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import type { Player, Team } from '@/lib/mock-data-types';
import { Separator } from '../ui/separator';
import { Star } from 'lucide-react';

const TeamDetailsDialog = ({ team, players }: { team: Team; players: Player[] }) => {
    const teamPlayers = players.filter(p => p.teamId === team.id);

    return (
        <DialogContent className="max-w-4xl h-[80vh]">
            <DialogHeader>
                <div className="flex items-center gap-4">
                    <Image data-ai-hint="logo" src={team.logoUrl} alt={team.name} width={60} height={60} />
                    <div>
                        <DialogTitle className="text-3xl font-headline">{team.city} {team.name}</DialogTitle>
                        <DialogDescription>{team.stadium} | {team.conference} Conference, {team.division} Division</DialogDescription>
                    </div>
                </div>
            </DialogHeader>
            <div className="mt-4 overflow-y-auto pr-2">
                 <h3 className="font-headline text-xl mb-2">Roster</h3>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>#</TableHead>
                            <TableHead>Name</TableHead>
                            <TableHead>Position</TableHead>
                            <TableHead>Secondary</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {teamPlayers.map(player => (
                            <TableRow key={player.id}>
                                <TableCell>{player.number}</TableCell>
                                <TableCell className="flex items-center gap-2">
                                    {player.managementRole && <Star className="h-4 w-4 text-amber-400" />}
                                    {player.name}
                                    {player.managementRole && <span className="text-xs text-muted-foreground">({player.managementRole})</span>}
                                </TableCell>
                                <TableCell>{player.position}</TableCell>
                                <TableCell>{player.secondaryPosition}</TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </div>
        </DialogContent>
    );
};


export default function TeamsClient() {
    const { teams, players, isLoading } = useAuth();
    const [searchTerm, setSearchTerm] = useState('');

    const filteredTeams = useMemo(() => {
        if (!searchTerm) return teams;
        return teams.filter(team =>
            team.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            team.city.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }, [teams, searchTerm]);

    if (isLoading) {
        return <Loader text="Loading Teams..." />;
    }

    return (
        <div className="container mx-auto max-w-screen-2xl py-8 px-4">
            <div className="space-y-8">
                <div className="text-center">
                    <h1 className="font-headline text-4xl font-bold">League Teams</h1>
                    <p className="text-muted-foreground mt-2">Explore all 32 teams competing in the MVHL.</p>
                </div>
                <div className="max-w-lg mx-auto">
                    <Input
                        placeholder="Search for a team..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {filteredTeams.map(team => (
                         <Dialog key={team.id}>
                            <DialogTrigger asChild>
                                <Card className="cursor-pointer hover:border-primary transition-colors flex flex-col">
                                    <CardHeader className="flex-grow flex flex-col items-center text-center">
                                        <Image data-ai-hint="logo" src={team.logoUrl} alt={`${team.name} logo`} width={80} height={80} />
                                        <CardTitle className="font-headline mt-4">{team.city}</CardTitle>
                                        <CardDescription className="text-lg">{team.name}</CardDescription>
                                    </CardHeader>
                                </Card>
                            </DialogTrigger>
                            <TeamDetailsDialog team={team} players={players}/>
                        </Dialog>
                    ))}
                </div>
                 {filteredTeams.length === 0 && (
                    <div className="text-center py-16 text-muted-foreground">
                        <p>No teams found for &quot;{searchTerm}&quot;.</p>
                    </div>
                )}
            </div>
        </div>
    );
}
```

---

**File: `src/components/pages/transactions-client.tsx`**
```tsx
'use client';

import {useAuth} from '@/hooks/use-auth';
import {Card, CardContent} from '@/components/ui/card';
import {ArrowRightLeft} from 'lucide-react';

export default function TransactionsClient() {
  const {recentTransactions} = useAuth();

  return (
    <div className="container mx-auto p-4">
      <div className="space-y-4">
        {recentTransactions.map(tx => (
          <Card key={tx.id}>
            <CardContent className="p-4 flex items-center justify-between">
              <div className="flex items-center gap-4">
                <ArrowRightLeft className="h-6 w-6 text-muted-foreground" />
                <p>{tx.description}</p>
              </div>
              <p className="text-sm text-muted-foreground">{tx.date.toLocaleDateString()}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
```

---

**File: `src/components/site-logo.tsx`**
```tsx
import Link from 'next/link';
import { ShieldCheck } from 'lucide-react';

export function SiteLogo() {
  return (
    <Link href="/" className="flex items-center" aria-label="MVHL Home">
      <ShieldCheck className="h-8 w-8 text-primary" />
    </Link>
  );
}
```

---

**File: `src/components/ui/accordion.tsx`**
```tsx
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
```

---

**File: `src/components/ui/alert-dialog.tsx`**
```tsx
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
```

---

**File: `src/components/ui/alert.tsx`**
```tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
```

---

**File: `src/components/ui/avatar.tsx`**
```tsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
```

---

**File: `src/components/ui/badge.tsx`**
```tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
```

---

**File: `src/components/ui/button.tsx`**
```tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```

---

**File: `src/components/ui/calendar.tsx`**
```tsx
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
```

---

**File: `src/components/ui/card.tsx`**
```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
```

---

**File: `src/components/ui/carousel.tsx`**
```tsx
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
```

---

**File: `src/components/ui/chart.tsx`**
```tsx
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
```

---

**File: `src/components/ui/checkbox.tsx`**
```tsx
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
```

---

**File: `src/components/ui/collapsible.tsx`**
```tsx
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
```

---

**File: `src/components/ui/dialog.tsx`**
```tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
```

---

**File: `src/components/ui/dropdown-menu.tsx`**
```tsx
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
```

---

**File: `src/components/ui/form.tsx`**
```tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
```

---

**File: `src/components/ui/input.tsx`**
```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
```

---

**File: `src/components/ui/label.tsx`**
```tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
```

---

**File: `src/components/ui/menubar.tsx`**
```tsx
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
```

---

**File: `src/components/ui/popover.tsx`**
```tsx
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
```

---

**File: `src/components/ui/progress.tsx`**
```tsx
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
```

---

**File: `src/components/ui/radio-group.tsx`**
```tsx
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
```

---

**File: `src/components/ui/scroll-area.tsx`**
```tsx
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
```

---

**File: `src/components/ui/select.tsx`**
```tsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
```

---

**File: `src/components/ui/separator.tsx`**
```tsx
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
```

---

**File: `src/components/ui/sheet.tsx`**
```tsx
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
```

---

**File: `src/components/ui/sidebar.tsx`**
```tsx
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
```

---

**File: `src/components/ui/skeleton.tsx`**
```tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
```

---

**File: `src/components/ui/slider.tsx`**
```tsx
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
```

---

**File: `src/components/ui/switch.tsx`**
```tsx
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
```

---

**File: `src/components/ui/table.tsx`**
```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
```

---

**File: `src/components/ui/tabs.tsx`**
```tsx
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
```

---

**File: `src/components/ui/textarea.tsx`**
```tsx
import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};
```

---

**File: `src/components/ui/toast.tsx`**
```tsx
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
```

---

**File: `src/components/ui/toaster.tsx`**
```tsx
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
```

---

**File: `src/components/ui/tooltip.tsx`**
```tsx
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
```

---

**File: `src/hooks/use-auth.tsx`**
```tsx
'use client';

import React, {createContext, useContext, useState, useEffect, ReactNode} from 'react';
import type {User, UserRole, Team, Player, StandingRecord, Match, Trade, FreeAgent, AwardNominee, DraftProspect, PlayerStats, GoalieStats} from '@/lib/mock-data-types';
import {
  generateTeams,
  generatePlayers,
  generateStandings,
  generateRecentTrades,
  generateUpcomingMatches,
  generateScoreTickerMatches,
  generateFreeAgents,
  generateAwardNominees,
  generateAllStars,
  generateHallOfFame,
  generateRecentScores,
  generateMockSchedule,
  generateRecentTransactions,
  generateDraftProspects,
} from '@/lib/mock-data';

export interface InjuredPlayer extends Player {
    injuryReason: string;
    returnDate: string;
    irSince: Date;
}

export interface Offer {
    id: string;
    playerName: string;
    salary: number;
    seasons: number;
    hasTradeClause: boolean;
    status: 'Pending' | 'Accepted' | 'Rejected';
}

// WaivedPlayer needs to be defined in a way that it can be shared
export interface WaivedPlayer extends Player {
    waiverTimestamp: Date;
    originalTeamId: string;
}

interface SignUpData {
    email: string;
    gamertag: string;
    primaryPosition: Player['position'];
    secondaryPosition: Player['position'];
}

interface UpdateUserData {
    gamertag: string;
    bio?: string;
    primaryPosition: string;
    secondaryPosition?: string;
}

type DraftStatus = 'Not Started' | 'In Progress' | 'Paused' | 'Finished';

interface AuthContextType {
  isLoading: boolean;
  user: User | null;
  login: (role: UserRole) => void;
  logout: () => void;
  signup: (data: SignUpData) => void;
  updateUser: (data: UpdateUserData) => void;
  setAvatar: (url: string) => void;
  teams: Team[];
  players: Player[];
  teamPlayers: Player[]; // Players on the user's team
  setTeamPlayers: React.Dispatch<React.SetStateAction<Player[]>>;
  injuredReserve: InjuredPlayer[]; // Players on IR for the user's team
  standings: StandingRecord[];
  recentTrades: Trade[];
  upcomingMatches: Match[];
  scoreTickerMatches: Match[];
  freeAgents: FreeAgent[];
  awardNominees: AwardNominee[];
  allStars: Player[];
  hallOfFameInductees: (Player & {inductionYear: number})[];
  recentScores: Match[];
  mockSchedule: Match[];
  recentTransactions: (Trade & {description: string})[];
  draftProspects: DraftProspect[];
  contractOffers: Offer[];
  waiverList: WaivedPlayer[];
  draftStatus: DraftStatus;
  setDraftStatus: React.Dispatch<React.SetStateAction<DraftStatus>>;
  currentPick: number;
  setCurrentPick: React.Dispatch<React.SetStateAction<number>>;
  setWaiverList: React.Dispatch<React.SetStateAction<WaivedPlayer[]>>;
  findTeam: (teamId: string) => Team | undefined;
  findPlayer: (playerId: string) => Player | undefined;
  addTeam: (teamData: { city: string; name: string }) => void;
  addMatch: (matchData: Omit<Match, 'id' | 'status' | 'homeScore' | 'awayScore'>) => void;
  movePlayerToIR: (playerId: string, reason: string, returnDate: string) => void;
  activatePlayerFromIR: (playerId: string) => void;
  addContractOffer: (offer: Offer) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({children}: {children: ReactNode}) {
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  
  // All-league data
  const [teams, setTeams] = useState<Team[]>([]);
  const [players, setPlayers] = useState<Player[]>([]);
  const [standings, setStandings] = useState<StandingRecord[]>([]);
  const [recentTrades, setRecentTrades] = useState<Trade[]>([]);
  const [upcomingMatches, setUpcomingMatches] = useState<Match[]>([]);
  const [scoreTickerMatches, setScoreTickerMatches] = useState<Match[]>([]);
  const [freeAgents, setFreeAgents] = useState<FreeAgent[]>([]);
  const [awardNominees, setAwardNominees] = useState<AwardNominee[]>([]);
  const [allStars, setAllStars] = useState<Player[]>([]);
  const [hallOfFameInductees, setHallOfFameInductees] = useState<(Player & {inductionYear: number})[]>([]);
  const [recentScores, setRecentScores] = useState<Match[]>([]);
  const [mockSchedule, setMockSchedule] = useState<Match[]>([]);
  const [recentTransactions, setRecentTransactions] = useState<(Trade & {description: string})[]>([]);
  const [draftProspects, setDraftProspects] = useState<DraftProspect[]>([]);
  
  // User-specific team management data
  const [teamPlayers, setTeamPlayers] = useState<Player[]>([]);
  const [injuredReserve, setInjuredReserve] = useState<InjuredPlayer[]>([]);
  const [contractOffers, setContractOffers] = useState<Offer[]>([]);
  const [waiverList, setWaiverList] = useState<WaivedPlayer[]>([]);

  // Draft state
  const [draftStatus, setDraftStatus] = useState<DraftStatus>('Not Started');
  const [currentPick, setCurrentPick] = useState(1);


  useEffect(() => {
    const generatedTeams = generateTeams();
    const generatedPlayers = generatePlayers(generatedTeams);
    const generatedStandings = generateStandings(generatedTeams);
    const generatedTrades = generateRecentTrades();
    const generatedUpcoming = generateUpcomingMatches(generatedTeams);
    const generatedTicker = generateScoreTickerMatches(generatedTeams);
    const generatedFreeAgents = generateFreeAgents(generatedPlayers);
    const generatedAwardNominees = generateAwardNominees(generatedPlayers);
    const generatedAllStars = generateAllStars(generatedPlayers, generatedTeams);
    const generatedHallOfFame = generateHallOfFame(generatedPlayers);
    const generatedRecentScores = generateRecentScores(generatedTeams);
    const generatedMockSchedule = generateMockSchedule(generatedTeams);
    const generatedRecentTransactions = generateRecentTransactions(generatedTeams);
    const generatedDraftProspects = generateDraftProspects();

    setTeams(generatedTeams);
    setPlayers(generatedPlayers);
    setStandings(generatedStandings);
    setRecentTrades(generatedTrades);
    setUpcomingMatches(generatedUpcoming);
    setScoreTickerMatches(generatedTicker);
    setFreeAgents(generatedFreeAgents);
    setAwardNominees(generatedAwardNominees);
    setAllStars(generatedAllStars);
    setHallOfFameInductees(generatedHallOfFame);
    setRecentScores(generatedRecentScores);
    setMockSchedule(generatedMockSchedule);
    setRecentTransactions(generatedRecentTransactions);
    setDraftProspects(generatedDraftProspects);
    
    // Load management data from localStorage if it exists
    const savedIR = localStorage.getItem('mvh-ir');
    if (savedIR) {
      const parsedIR = JSON.parse(savedIR).map((p: any) => ({...p, irSince: new Date(p.irSince)}));
      setInjuredReserve(parsedIR);
    }
    const savedOffers = localStorage.getItem('mvh-offers');
    if (savedOffers) {
      setContractOffers(JSON.parse(savedOffers));
    }

    setIsLoading(false);
  }, []);
  
  // Update user's team players whenever user or players list changes
  useEffect(() => {
    if (user?.teamId) {
      const currentTeamPlayers = players.filter(p => p.teamId === user.teamId && !injuredReserve.some(ip => ip.id === p.id));
      setTeamPlayers(currentTeamPlayers);
    } else {
      setTeamPlayers([]);
    }
  }, [user, players, injuredReserve]);
  
  // Persist IR list to localStorage
  useEffect(() => {
    localStorage.setItem('mvh-ir', JSON.stringify(injuredReserve));
  }, [injuredReserve]);
  
  // Persist offers list to localStorage
  useEffect(() => {
    localStorage.setItem('mvh-offers', JSON.stringify(contractOffers));
  }, [contractOffers]);


  const login = (role: UserRole) => {
    if (role === 'guest') {
      logout();
      return;
    }

    let userTeamId;
    let userPlayerId;
    let loggedInUser: User;

    if (role === 'player' || role === 'management') {
      const easternTeam = teams.find(t => t.conference === 'Eastern');
      userTeamId = easternTeam ? easternTeam.id : 'team-1';

      if (role === 'player') {
        const firstPlayerOnTeam = players.find(p => p.teamId === userTeamId);
        userPlayerId = firstPlayerOnTeam ? firstPlayerOnTeam.id : 'player-1';
        loggedInUser = {
            id: 'user-player',
            name: 'Player Pat',
            email: `player@mvhthub.com`,
            role: 'player',
            teamId: userTeamId,
            playerId: userPlayerId,
            avatarUrl: 'https://placehold.co/40x40.png?text=PP',
        };
      } else { // Management
        loggedInUser = {
            id: 'user-management',
            name: 'GM Bob',
            email: `management@mvhthub.com`,
            role: 'management',
            teamId: userTeamId,
            avatarUrl: 'https://placehold.co/40x40.png?text=GM',
        };
      }
    } else { // Admin
        loggedInUser = {
            id: 'user-admin',
            name: 'Admin User',
            email: 'admin@mvhthub.com',
            role: 'admin',
            avatarUrl: 'https://placehold.co/40x40.png?text=AU',
        };
    }
    
    setUser(loggedInUser);
  };
  
  const signup = (data: SignUpData) => {
    const newPlayerId = `player-${players.length + 1}`;
    
    const newPlayer: Player = {
        id: newPlayerId,
        teamId: 'FA', // Free Agent
        name: data.gamertag,
        number: 0, // No number as a free agent
        position: data.primaryPosition,
        secondaryPosition: data.secondaryPosition,
        headshotUrl: `https://placehold.co/200x200.png`,
        bio: `A new player looking to make their mark in the league.`,
        stats: {
            gamesPlayed: 0, goals: 0, assists: 0, points: 0, plusMinus: 0,
            penaltyMinutes: 0, hits: 0, blocks: 0, sog: 0, tka: 0, gva: 0,
            int: 0, passPct: 0, passAtt: 0, fow: 0, foPct: 0, record: '0-0-0'
        } as PlayerStats,
    };

    const newFreeAgent: FreeAgent = {
        ...newPlayer,
        askingSalary: 1, // Default asking salary
        contractLength: 1, // Default contract length,
    };
    
    const newDraftProspect: DraftProspect = {
      id: `prospect-${draftProspects.length + 1}`,
      name: newPlayer.name,
      position: newPlayer.position,
      rank: draftProspects.length + 1,
      scoutingSummary: 'A fresh free agent signing, ready to prove their worth.',
      headshotUrl: newPlayer.headshotUrl,
    }

    setPlayers(prev => [...prev, newPlayer]);
    setFreeAgents(prev => [...prev, newFreeAgent]);
    setDraftProspects(prev => [...prev, newDraftProspect]);

    const newUser: User = {
        id: `user-${Math.random()}`,
        name: newPlayer.name,
        email: data.email,
        role: 'player',
        playerId: newPlayerId,
        avatarUrl: 'https://placehold.co/40x40.png'
    };
    setUser(newUser);
  };
  
  const updateUser = (data: UpdateUserData) => {
    if (!user || !user.playerId) return;

    setUser(prevUser => {
        if (!prevUser) return null;
        return {
            ...prevUser,
            name: data.gamertag,
        };
    });

    setPlayers(prevPlayers => prevPlayers.map(p => {
        if (p.id === user.playerId) {
            return {
                ...p,
                name: data.gamertag,
                bio: data.bio,
                position: data.primaryPosition as Player['position'],
                secondaryPosition: data.secondaryPosition as Player['position'],
            };
        }
        return p;
    }));
  };

  const logout = () => {
    setUser(null);
  };

  const setAvatar = (url: string) => {
    if (user) {
      setUser({...user, avatarUrl: url});
    }
  };

  const findTeam = (teamId: string) => teams.find(t => t.id === teamId);
  const findPlayer = (playerId: string) => players.find(p => p.id === playerId);
  
  const addTeam = (teamData: { city: string; name: string }) => {
    const newTeam: Team = {
      id: `team-${teams.length + 1}`,
      city: teamData.city,
      name: teamData.name,
      logoUrl: 'https://placehold.co/100x100.png',
      conference: teams.length % 2 === 0 ? 'Eastern' : 'Western',
      division: teams.length % 4 === 0 ? 'Northeast' : teams.length % 4 === 1 ? 'South' : teams.length % 4 === 2 ? 'Midwest' : 'West',
      owner: 'TBD',
      gm: 'TBD',
      agm: 'TBD',
      stadium: `${teamData.city} Arena`,
      roster: [], // Initialize with empty roster
    };
    setTeams(prevTeams => [...prevTeams, newTeam]);
  };

  const addMatch = (matchData: Omit<Match, 'id' | 'status' | 'homeScore' | 'awayScore'>) => {
    const newMatch: Match = {
      id: `match-ms-${mockSchedule.length + 1}-${Math.random()}`,
      status: 'scheduled',
      ...matchData,
    };
    setMockSchedule(prevSchedule => [...prevSchedule, newMatch].sort((a,b) => a.date.getTime() - b.date.getTime()));
  };
  
  const movePlayerToIR = (playerId: string, reason: string, returnDate: string) => {
    const playerToMove = players.find(p => p.id === playerId);
    if (!playerToMove) return;

    const injuredPlayer: InjuredPlayer = {
        ...playerToMove,
        injuryReason: reason,
        returnDate,
        irSince: new Date()
    };
    
    const newIR = [...injuredReserve, injuredPlayer];
    setInjuredReserve(newIR);
  };

  const activatePlayerFromIR = (playerId: string) => {
      const playerToActivate = injuredReserve.find(p => p.id === playerId);
      if (!playerToActivate) return;
      
      const newIR = injuredReserve.filter(p => p.id !== playerId);
      setInjuredReserve(newIR);
  };
  
  const addContractOffer = (offer: Offer) => {
      const newOffers = [...contractOffers, offer];
      setContractOffers(newOffers);
  };

  const value = {
    isLoading,
    user,
    login,
    logout,
    signup,
    updateUser,
    setAvatar,
    teams,
    players,
    teamPlayers,
    setTeamPlayers,
    injuredReserve,
    standings,
    recentTrades,
    upcomingMatches,
    scoreTickerMatches,
    freeAgents,
    awardNominees,
    allStars,
    hallOfFameInductees,
    recentScores,
    mockSchedule,
    recentTransactions,
    draftProspects,
    contractOffers,
    waiverList,
    setWaiverList,
    draftStatus,
    setDraftStatus,
    currentPick,
    setCurrentPick,
    findTeam,
    findPlayer,
    addTeam,
    addMatch,
    movePlayerToIR,
    activatePlayerFromIR,
    addContractOffer
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
```

---

**File: `src/hooks/use-mobile.tsx`**
```tsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
```

---

**File: `src/hooks/use-toast.ts`**
```ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
```

---

**File: `src/lib/constants.ts`**
```ts
export type NavLink = {
  href: string;
  label: string;
};

export const NAV_LINKS: NavLink[] = [
  { href: "/", label: "Home" },
  { href: "/teams", label: "Teams" },
  { href: "/standings", label: "Standings" },
  { href: "/stats", label: "Stats" },
  { href: "/awards", label: "Awards" },
  { href: "/matches", label: "Matches" },
  { href: "/transactions", label: "Transactions" },
  { href: "/free-agency", label: "Free Agency" },
  { href: "/news", label: "News" },
  { href: "/all-star-vote", label: "All-Star Vote" },
  { href: "/draft-central", label: "Draft Central" },
  { href: "/hall-of-fame", label: "Hall of Fame" },
];

export const FOOTER_LINKS = {
    league: [
        { href: "/", label: "Home" },
        { href: "/teams", label: "Teams" },
        { href: "/standings", label: "Standings" },
        { href: "/stats", label: "Stats" },
        { href: "/matches", label: "Matches" },
        { href: "/transactions", label: "Transactions" },
    ],
    community: [
        { href: "/news", label: "News" },
        { href: "/awards", label: "Awards" },
        { href: "/all-star-vote", label: "All-Star Vote" },
        { href: "/draft-central", label: "Draft Central" },
        { href: "/hall-of-fame", label: "Hall of Fame" },
    ],
    resources: [
        { href: "/free-agency", label: "Free Agency" },
        { href: "/faq", label: "FAQ" },
        { href: "/privacy", label: "Privacy Policy" },
        { href: "/disclaimer", label: "Disclaimer" },
        { href: "/contact", label: "Contact Us" },
    ],
    account: [
        { href: "#", label: "Sign In" }, // Placeholder actions
        { href: "/signup", label: "Sign Up" },
        { href: "/player", label: "Player Panel" },
        { href: "/management", label: "Team Management" },
        { href: "/admin", label: "Admin Panel" },
    ]
}
```

---

**File: `src/lib/mock-data-types.ts`**
```ts
export type UserRole = 'guest' | 'player' | 'management' | 'admin';

export interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
  teamId?: string;
  playerId?: string;
  avatarUrl?: string;
}

export interface Team {
  id: string;
  name: string;
  city: string;
  logoUrl: string;
  conference: 'Eastern' | 'Western';
  division: 'Northeast' | 'South' | 'Midwest' | 'West';
  owner: string;
  gm: string;
  agm: string;
  stadium: string;
  roster: Player[];
}

export interface PlayerStats {
  gamesPlayed: number;
  goals: number;
  assists: number;
  points: number;
  plusMinus: number;
  penaltyMinutes: number;
  hits: number;
  blocks: number;
  sog: number;
  tka: number;
  gva: number;
  int: number;
  passPct: number;
  passAtt: number;
  fow: number;
  foPct: number;
  record: string;
}

export interface GoalieStats {
  gamesPlayed: number;
  wins: number;
  losses: number;
  otLosses: number;
  goalsAgainstAverage: number;
  savePercentage: number;
  shutouts: number;
  record: string;
  saves: number;
  shots: number;
  ga: number;
}

export interface Player {
  id: string;
  teamId: string;
  name: string;
  number: number;
  position: 'C' | 'LW' | 'RW' | 'LD' | 'RD' | 'G';
  secondaryPosition: 'C' | 'LW' | 'RW' | 'LD' | 'RD' | 'G';
  managementRole?: 'Owner' | 'GM' | 'AGM';
  stats: PlayerStats | GoalieStats;
  headshotUrl: string;
  bio?: string;
  hasTradeClause?: boolean;
}

export interface StandingRecord {
  teamId: string;
  teamName: string;
  teamLogoUrl: string;
  gamesPlayed: number;
  wins: number;
  losses: number;
  otLosses: number;
  points: number;
  conference: 'Eastern' | 'Western';
  division: 'Northeast' | 'South' | 'Midwest' | 'West';
  rankInDivision: number;
  rankInConference: number;
  rankInLeague: number;
}

export interface Match {
  id: string;
  homeTeamId: string;
  awayTeamId: string;
  date: Date;
  status: 'scheduled' | 'inprogress' | 'completed';
  homeScore?: number;
  awayScore?: number;
}

export interface Trade {
  id: string;
  teamsInvolved: {teamId: string; assets: string[]}[];
  date: Date;
  status: 'proposed' | 'accepted' | 'rejected';
}

export interface NewsArticle {
  id: string;
  title: string;
  content: string;
  date: Date;
  author: string;
}

export interface AwardNominee {
  id: string;
  playerId: string;
  awardName: string;
  votes: number;
}

export interface FreeAgent extends Player {
  askingSalary: number;
  contractLength: number;
}

export interface DraftProspect {
  id: string;
  name: string;
  position: 'C' | 'LW' | 'RW' | 'LD' | 'RD' | 'G';
  rank: number;
  scoutingSummary: string;
  headshotUrl: string;
}
```

---

**File: `src/lib/mock-data.ts`**
```ts
import type {
  Team,
  Player,
  StandingRecord,
  Match,
  Trade,
  FreeAgent,
  NewsArticle,
  AwardNominee,
  DraftProspect,
} from './mock-data-types';

const firstNames = [
  'Alex',
  'John',
  'Mike',
  'Chris',
  'David',
  'James',
  'Matt',
  'Connor',
  'Sidney',
  'Nathan',
  'Auston',
  'Leon',
  'Nikita',
  'Patrick',
  'Brad',
];
const lastNames = [
  'Ovechkin',
  'Tavares',
  'Smith',
  'Johnson',
  'Brown',
  'Williams',
  'Jones',
  'Garcia',
  'Miller',
  'Davis',
  'Crosby',
  'MacKinnon',
  'Matthews',
  'Draisaitl',
  'Kucherov',
  'Kane',
  'Marchand',
];
const cities = [
  'New York',
  'Los Angeles',
  'Chicago',
  'Toronto',
  'Montreal',
  'Boston',
  'Philadelphia',
  'Pittsburgh',
  'Detroit',
  'Vancouver',
  'Edmonton',
  'Calgary',
  'Tampa Bay',
  'Florida',
  'Washington',
  'Las Vegas',
  'Seattle',
  'Colorado',
  'Dallas',
  'Minnesota',
  'St. Louis',
  'Nashville',
  'Winnipeg',
  'Arizona',
  'San Jose',
  'Anaheim',
  'Columbus',
  'Buffalo',
  'Ottawa',
  'New Jersey',
  'Carolina',
  'Rangers',
];
const teamNames = [
  'Maple Leafs',
  'Canadiens',
  'Bruins',
  'Flyers',
  'Penguins',
  'Red Wings',
  'Canucks',
  'Oilers',
  'Flames',
  'Lightning',
  'Panthers',
  'Capitals',
  'Golden Knights',
  'Kraken',
  'Avalanche',
  'Stars',
  'Wild',
  'Blues',
  'Predators',
  'Jets',
  'Coyotes',
  'Sharks',
  'Ducks',
  'Blue Jackets',
  'Sabres',
  'Senators',
  'Devils',
  'Hurricanes',
  'Islanders',
  'Rangers',
  'Blackhawks',
  'Kings',
];
const stadiums = ['Arena', 'Gardens', 'Center', 'Dome', 'Coliseum', 'Place', 'Forum'];

const getRandom = <T>(arr: T[]): T => arr[Math.floor(Math.random() * arr.length)];
const getRandomNumber = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;

const positions: Player['position'][] = ['C', 'LW', 'RW', 'LD', 'RD', 'G'];

export const mockDraftOrder = [
    { pick: 1, teamId: "team-1", selection: "Leo Grandis" },
    { pick: 2, teamId: "team-2", selection: "Axel Torque" },
    { pick: 3, teamId: "team-17", selection: null },
    { pick: 4, teamId: "team-4", selection: null },
    { pick: 5, teamId: "team-5", selection: null },
    { pick: 6, teamId: "team-6", selection: null },
    { pick: 7, teamId: "team-7", selection: null },
    { pick: 8, teamId: "team-8", selection: null },
    { pick: 9, teamId: "team-9", selection: null },
    { pick: 10, teamId: "team-10", selection: null },
];

export function generateTeams(): Team[] {
  const teams: Team[] = [];
  const usedCityNames = new Set<string>();

  for (let i = 1; i <= 32; i++) {
    let city;
    do {
      city = getRandom(cities);
    } while (usedCityNames.has(city));
    usedCityNames.add(city);

    const name = getRandom(teamNames);
    const conference = i <= 16 ? 'Eastern' : 'Western';
    const division =
      conference === 'Eastern' ? (i % 2 === 0 ? 'Northeast' : 'South') : i % 2 === 0 ? 'Midwest' : 'West';

    teams.push({
      id: `team-${i}`,
      name: name,
      city: city,
      logoUrl: `https://placehold.co/100x100.png`,
      conference: conference,
      division: division,
      owner: `${getRandom(firstNames)} ${getRandom(lastNames)}`,
      gm: `${getRandom(firstNames)} ${getRandom(lastNames)}`,
      agm: `${getRandom(firstNames)} ${getRandom(lastNames)}`,
      stadium: `${city} ${getRandom(stadiums)}`,
      roster: [],
    });
  }
  return teams;
}

export function generatePlayers(teams: Team[]): Player[] {
  const players: Player[] = [];
  let playerId = 1;
  teams.forEach(team => {
    const usedNumbers = new Set<number>();
    
    const createPlayer = (name: string, managementRole?: 'Owner' | 'GM' | 'AGM'): Player => {
        let number;
        do {
            number = getRandomNumber(1, 99);
        } while (usedNumbers.has(number));
        usedNumbers.add(number);

        const position = getRandom(positions);
        let secondaryPosition;
        do {
            secondaryPosition = getRandom(positions);
        } while (position === secondaryPosition);

        const gamesPlayed = getRandomNumber(60, 82);
        const wins = getRandomNumber(15, 40);
        const losses = getRandomNumber(10, 25);
        const otLosses = getRandomNumber(2, 10);
        const goals = getRandomNumber(5, 50);
        const assists = getRandomNumber(10, 70);

        const newPlayer: Player = {
            id: `player-${playerId++}`,
            teamId: team.id,
            name,
            number,
            position,
            secondaryPosition,
            managementRole,
            hasTradeClause: Math.random() > 0.7,
            stats:
            position === 'G'
                ? {
                    gamesPlayed: gamesPlayed,
                    wins: wins,
                    losses: losses,
                    otLosses: otLosses,
                    goalsAgainstAverage: parseFloat((Math.random() * (3.5 - 1.8) + 1.8).toFixed(2)),
                    savePercentage: parseFloat((Math.random() * (0.93 - 0.89)).toFixed(3)) + 0.89,
                    shutouts: getRandomNumber(0, 7),
                    record: `${wins}-${losses}-${otLosses}`,
                    saves: getRandomNumber(800, 1800),
                    shots: getRandomNumber(900, 2000),
                    ga: getRandomNumber(150, 250),
                }
                : {
                    gamesPlayed: gamesPlayed,
                    goals: goals,
                    assists: assists,
                    points: goals + assists,
                    plusMinus: getRandomNumber(-20, 20),
                    penaltyMinutes: getRandomNumber(10, 150),
                    hits: getRandomNumber(20, 200),
                    blocks: getRandomNumber(10, 100),
                    sog: getRandomNumber(100, 300),
                    tka: getRandomNumber(20, 80),
                    gva: getRandomNumber(20, 80),
                    int: getRandomNumber(5, 30),
                    passPct: getRandomNumber(75, 95),
                    passAtt: getRandomNumber(1000, 2500),
                    fow: getRandomNumber(200, 800),
                    foPct: getRandomNumber(45, 60),
                    record: 'N/A',
                },
            headshotUrl: `https://placehold.co/200x200.png`,
            bio: `A talented ${position} known for their powerful shot and playmaking abilities.`,
        };
        team.roster.push(newPlayer);
        return newPlayer;
    };
    
    // Add management as players
    players.push(createPlayer(team.owner, 'Owner'));
    players.push(createPlayer(team.gm, 'GM'));
    players.push(createPlayer(team.agm, 'AGM'));
    
    // Generate remaining players to fill the roster (12 more to make 15)
    for (let i = 0; i < 12; i++) {
        players.push(createPlayer(`${getRandom(firstNames)} ${getRandom(lastNames)}`));
    }
  });
  return players;
}

export function generateStandings(teams: Team[]): StandingRecord[] {
  const records: Omit<StandingRecord, 'rankInDivision' | 'rankInConference' | 'rankInLeague'>[] = teams.map(team => {
    const wins = getRandomNumber(20, 55);
    const losses = getRandomNumber(15, 45);
    const otLosses = getRandomNumber(5, 15);
    return {
      teamId: team.id,
      teamName: `${team.city} ${team.name}`,
      teamLogoUrl: team.logoUrl,
      gamesPlayed: wins + losses + otLosses,
      wins,
      losses,
      otLosses,
      points: wins * 2 + otLosses,
      conference: team.conference,
      division: team.division,
    };
  });

  // Sort by points for league rank
  records.sort((a, b) => b.points - a.points);

  const standings: StandingRecord[] = records.map((record, index) => ({
    ...record,
    rankInLeague: index + 1,
    rankInConference: 0, // placeholder
    rankInDivision: 0, // placeholder
  }));

  // Calculate conference and division ranks
  const conferences: ('Eastern' | 'Western')[] = ['Eastern', 'Western'];
  const divisionsByConference = {
    Eastern: ['Northeast', 'South'],
    Western: ['Midwest', 'West'],
  };

  conferences.forEach(conf => {
    // Sort within the conference for conference ranking
    const conferenceTeams = standings.filter(s => s.conference === conf);
    conferenceTeams.sort((a, b) => b.points - a.points);
    conferenceTeams.forEach((team, index) => {
      const originalIndex = standings.findIndex(s => s.teamId === team.teamId);
      standings[originalIndex].rankInConference = index + 1;
    });

    divisionsByConference[conf].forEach(div => {
      // Sort within the division for division ranking
      const divisionTeams = standings.filter(s => s.division === div);
      divisionTeams.sort((a, b) => b.points - a.points);
      divisionTeams.forEach((team, index) => {
        const originalIndex = standings.findIndex(s => s.teamId === team.teamId);
        standings[originalIndex].rankInDivision = index + 1;
      });
    });
  });

  return standings;
}

export function generateRecentTrades(): Trade[] {
  return [
    {
      id: 'trade-1',
      teamsInvolved: [
        {teamId: 'team-1', assets: ['Player A', '1st Round Pick']},
        {teamId: 'team-5', assets: ['Player B']},
      ],
      date: new Date(),
      status: 'accepted',
    },
    {
      id: 'trade-2',
      teamsInvolved: [
        {teamId: 'team-2', assets: ['Player C']},
        {teamId: 'team-8', assets: ['Player D', '3rd Round Pick']},
      ],
      date: new Date(),
      status: 'accepted',
    },
  ];
}

function getNextDayOfWeek(date: Date, dayOfWeek: number) {
  const resultDate = new Date(date.getTime());
  const currentDay = date.getDay();
  const distance = (dayOfWeek - currentDay + 7) % 7;
  resultDate.setDate(date.getDate() + distance);
  return resultDate;
}

export function generateUpcomingMatches(teams: Team[]): Match[] {
  const matches: Match[] = [];
  const today = new Date();
  
  const days = [
    { day: 3, time: '20:30' }, // Wednesday 8:30 PM
    { day: 4, time: '20:50' }, // Thursday 8:50 PM
    { day: 5, time: '21:10' }, // Friday 9:10 PM
  ];

  days.forEach((d, i) => {
    const homeTeam = getRandom(teams);
    let awayTeam;
    do {
      awayTeam = getRandom(teams);
    } while (homeTeam.id === awayTeam.id);

    const gameDate = getNextDayOfWeek(today, d.day);
    const [hours, minutes] = d.time.split(':');
    gameDate.setHours(parseInt(hours, 10), parseInt(minutes, 10), 0, 0);

    matches.push({
      id: `match-${i}`,
      homeTeamId: homeTeam.id,
      awayTeamId: awayTeam.id,
      date: gameDate,
      status: 'scheduled',
    });
  });
  
  // Add a couple more random matches
  for (let i = 3; i < 5; i++) {
    const homeTeam = getRandom(teams);
    let awayTeam;
    do {
      awayTeam = getRandom(teams);
    } while (homeTeam.id === awayTeam.id);

    matches.push({
      id: `match-${i}`,
      homeTeamId: homeTeam.id,
      awayTeamId: awayTeam.id,
      date: new Date(new Date().getTime() + i * 24 * 60 * 60 * 1000),
      status: 'scheduled',
    });
  }

  return matches.sort((a,b) => a.date.getTime() - b.date.getTime());
}

export function generateScoreTickerMatches(teams: Team[]): Match[] {
  const matches: Match[] = [];
  for (let i = 0; i < 8; i++) {
    const homeTeam = getRandom(teams);
    let awayTeam;
    do {
      awayTeam = getRandom(teams);
    } while (homeTeam.id === awayTeam.id);

    matches.push({
      id: `ticker-match-${i}`,
      homeTeamId: homeTeam.id,
      awayTeamId: awayTeam.id,
      date: new Date(new Date().getTime() - 24 * 60 * 60 * 1000),
      status: 'completed',
      homeScore: getRandomNumber(0, 7),
      awayScore: getRandomNumber(0, 7),
    });
  }
  return matches;
}

export function generateFreeAgents(players: Player[]): FreeAgent[] {
  return players.slice(0, 10).map(p => ({
    ...p,
    askingSalary: getRandomNumber(1, 10),
    contractLength: getRandomNumber(1, 8),
  }));
}

export function generateAwardNominees(players: Player[]): AwardNominee[] {
  const awards = ['MVP', 'Best Goalie', 'Best Defenseman'];
  const nominees: AwardNominee[] = [];
  awards.forEach(award => {
    for (let i = 0; i < 3; i++) {
      nominees.push({
        id: `${award}-${i}`,
        awardName: award,
        playerId: getRandom(players).id,
        votes: getRandomNumber(100, 1000),
      });
    }
  });
  return nominees;
}

export function generateAllStars(players: Player[], teams: Team[]): Player[] {
  const allStars: Player[] = [];
  const positions: Player['position'][] = ['C', 'LW', 'RW', 'LD', 'RD', 'G'];
  const conferences: ('Eastern' | 'Western')[] = ['Eastern', 'Western'];

  positions.forEach(pos => {
    conferences.forEach(conf => {
      const conferenceTeams = teams.filter(t => t.conference === conf);
      const conferenceTeamIds = new Set(conferenceTeams.map(t => t.id));
      const playersInConferenceAndPosition = players.filter(p => p.position === pos && conferenceTeamIds.has(p.teamId));

      // Get 2-3 players for each position in each conference
      const shuffledPlayers = playersInConferenceAndPosition.sort(() => 0.5 - Math.random());
      const selectedPlayers = shuffledPlayers.slice(0, 5);
      
      allStars.push(...selectedPlayers);
    });
  });

  return allStars;
}


export function generateHallOfFame(players: Player[]): (Player & {inductionYear: number})[] {
  return players.slice(20, 25).map(p => ({
    ...p,
    inductionYear: getRandomNumber(2000, 2023),
  }));
}

export function generateRecentScores(teams: Team[]): Match[] {
  const matches: Match[] = [];
  for (let i = 0; i < 4; i++) {
    const homeTeam = getRandom(teams);
    let awayTeam;
    do {
      awayTeam = getRandom(teams);
    } while (homeTeam.id === awayTeam.id);

    matches.push({
      id: `recent-score-${i}`,
      homeTeamId: homeTeam.id,
      awayTeamId: awayTeam.id,
      date: new Date(new Date().getTime() - (i + 1) * 24 * 60 * 60 * 1000),
      status: 'completed',
      homeScore: getRandomNumber(0, 7),
      awayScore: getRandomNumber(0, 7),
    });
  }
  return matches;
}

export function generateMockSchedule(teams: Team[]): Match[] {
  const matches: Match[] = [];
  const today = new Date();
  let matchIdCounter = 0;

  const gameDays = [
    { day: 3, times: ['20:30'] }, // Wednesday
    { day: 4, times: ['20:50'] }, // Thursday
    { day: 5, times: ['21:10'] }, // Friday
  ];

  gameDays.forEach(gameDay => {
    const gameDate = getNextDayOfWeek(today, gameDay.day);
    let availableTeams = [...teams];

    // Shuffle teams to create random matchups
    for (let i = availableTeams.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [availableTeams[i], availableTeams[j]] = [availableTeams[j], availableTeams[i]];
    }

    while(availableTeams.length >= 2) {
        const homeTeam = availableTeams.pop();
        const awayTeam = availableTeams.pop();

        if (homeTeam && awayTeam) {
            const time = getRandom(gameDay.times);
            const [hours, minutes] = time.split(':');
            const matchDate = new Date(gameDate);
            matchDate.setHours(parseInt(hours, 10), parseInt(minutes, 10), 0, 0);

            matches.push({
                id: `schedule-${matchIdCounter++}`,
                homeTeamId: homeTeam.id,
                awayTeamId: awayTeam.id,
                date: matchDate,
                status: 'scheduled',
            });
        }
    }
  });

  return matches.sort((a, b) => a.date.getTime() - b.date.getTime());
}

export function generateRecentTransactions(teams: Team[]): (Trade & {description: string})[] {
  const transactions = [];
  for (let i = 0; i < 5; i++) {
    const team1 = getRandom(teams);
    let team2;
    do {
      team2 = getRandom(teams);
    } while (team1.id === team2.id);

    transactions.push({
      id: `tx-${i}`,
      teamsInvolved: [
        {teamId: team1.id, assets: ['Player A', '1st Round Pick']},
        {teamId: team2.id, assets: ['Player B']},
      ],
      date: new Date(new Date().getTime() - (i + 1) * 24 * 60 * 60 * 1000),
      status: 'accepted' as const,
      description: `${team1.name} traded Player A and a 1st round pick to ${team2.name} for Player B.`,
    });
  }
  return transactions;
}


export function generateDraftProspects(): DraftProspect[] {
  const prospects: DraftProspect[] = [];
  const positions: Player['position'][] = ['C', 'LW', 'RW', 'LD', 'RD', 'G'];
  for (let i = 1; i <= 30; i++) {
    prospects.push({
      id: `prospect-${i}`,
      name: `${getRandom(firstNames)} ${getRandom(lastNames)}`,
      position: getRandom(positions),
      rank: i,
      scoutingSummary: `A highly-touted prospect, ranked #${i} overall. Known for exceptional skills and on-ice intelligence.`,
      headshotUrl: 'https://placehold.co/100x100.png',
    });
  }
  return prospects;
}
```

---

**File: `src/lib/utils.ts`**
```ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

---

**File: `tailwind.config.ts`**
```ts
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        body: ['Inter', 'sans-serif'],
        headline: ['"Space Grotesk"', 'sans-serif'],
        code: ['"Source Code Pro"', 'monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;
```

---

**File: `tsconfig.json`**
```json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```